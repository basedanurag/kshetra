// Mock backend declarations - replace with generated ones when dfx is available
import { Principal } from '@dfinity/principal';

export interface BackendService {
  get_user_roles: (principal: Principal) => Promise<string[]>;
  assign_role: (principal: Principal, role: string) => Promise<{ Ok?: null; Err?: string }>;
  get_land_parcel: (tokenId: bigint) => Promise<any>;
  get_parcels_by_owner: (owner: Principal) => Promise<any[]>;
  register_land_parcel: (
    location: string,
    sizeSqMeters: number,
    coordinates: { latitude: number; longitude: number },
    documentHashes: string[]
  ) => Promise<{ Ok?: bigint; Err?: string }>;
}

// Mock IDL factory - this should be generated by dfx
export const idlFactory = ({ IDL }: any) => {
  const UserRole = IDL.Variant({ 
    Admin: IDL.Null, 
    LandRegistrar: IDL.Null 
  });
  
  const Coordinates = IDL.Record({
    latitude: IDL.Float64,
    longitude: IDL.Float64,
  });
  
  const Result = IDL.Variant({ 
    Ok: IDL.Null, 
    Err: IDL.Text 
  });
  
  const Result_1 = IDL.Variant({ 
    Ok: IDL.Nat64, 
    Err: IDL.Text 
  });

  return IDL.Service({
    get_user_roles: IDL.Func([IDL.Principal], [IDL.Vec(UserRole)], ['query']),
    assign_role: IDL.Func([IDL.Principal, UserRole], [Result], []),
    get_land_parcel: IDL.Func([IDL.Nat64], [IDL.Opt(IDL.Record({}))], ['query']),
    get_parcels_by_owner: IDL.Func([IDL.Principal], [IDL.Vec(IDL.Record({}))], ['query']),
    register_land_parcel: IDL.Func([IDL.Text, IDL.Float64, Coordinates, IDL.Vec(IDL.Text)], [Result_1], []),
  });
};

export const init = ({ IDL }: any) => { return []; };
