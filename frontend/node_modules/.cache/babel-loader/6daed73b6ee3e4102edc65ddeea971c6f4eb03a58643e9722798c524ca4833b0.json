{"ast":null,"code":"import { IdbKeyVal } from \"./db.js\";\nexport const KEY_STORAGE_KEY = 'identity';\nexport const KEY_STORAGE_DELEGATION = 'delegation';\nexport const KEY_VECTOR = 'iv';\n// Increment if any fields are modified\nexport const DB_VERSION = 1;\nexport const isBrowser = typeof window !== 'undefined';\n/**\n * Legacy implementation of AuthClientStorage, for use where IndexedDb is not available\n */\nexport class LocalStorage {\n  prefix;\n  _localStorage;\n  constructor(prefix = 'ic-', _localStorage) {\n    this.prefix = prefix;\n    this._localStorage = _localStorage;\n  }\n  get(key) {\n    return Promise.resolve(this._getLocalStorage().getItem(this.prefix + key));\n  }\n  set(key, value) {\n    this._getLocalStorage().setItem(this.prefix + key, value);\n    return Promise.resolve();\n  }\n  remove(key) {\n    this._getLocalStorage().removeItem(this.prefix + key);\n    return Promise.resolve();\n  }\n  _getLocalStorage() {\n    if (this._localStorage) {\n      return this._localStorage;\n    }\n    const ls = typeof window === 'undefined' ? typeof global === 'undefined' ? typeof self === 'undefined' ? undefined : self.localStorage : global.localStorage : window.localStorage;\n    if (!ls) {\n      throw new Error('Could not find local storage.');\n    }\n    return ls;\n  }\n}\n/**\n * IdbStorage is an interface for simple storage of string key-value pairs built on {@link IdbKeyVal}\n *\n * It replaces {@link LocalStorage}\n * @see implements {@link AuthClientStorage}\n */\nexport class IdbStorage {\n  #options;\n  /**\n   * @param options - DBCreateOptions\n   * @param options.dbName - name for the indexeddb database\n   * @param options.storeName - name for the indexeddb Data Store\n   * @param options.version - version of the database. Increment to safely upgrade\n   * @example\n   * ```ts\n   * const storage = new IdbStorage({ dbName: 'my-db', storeName: 'my-store', version: 2 });\n   * ```\n   */\n  constructor(options) {\n    this.#options = options ?? {};\n  }\n  // Initializes a KeyVal on first request\n  initializedDb;\n  get _db() {\n    return new Promise(resolve => {\n      if (this.initializedDb) {\n        resolve(this.initializedDb);\n        return;\n      }\n      IdbKeyVal.create(this.#options).then(db => {\n        this.initializedDb = db;\n        resolve(db);\n      });\n    });\n  }\n  async get(key) {\n    const db = await this._db;\n    return await db.get(key);\n    // return (await db.get<string>(key)) ?? null;\n  }\n  async set(key, value) {\n    const db = await this._db;\n    await db.set(key, value);\n  }\n  async remove(key) {\n    const db = await this._db;\n    await db.remove(key);\n  }\n}","map":{"version":3,"names":["IdbKeyVal","KEY_STORAGE_KEY","KEY_STORAGE_DELEGATION","KEY_VECTOR","DB_VERSION","isBrowser","window","LocalStorage","prefix","_localStorage","constructor","get","key","Promise","resolve","_getLocalStorage","getItem","set","value","setItem","remove","removeItem","ls","global","self","undefined","localStorage","Error","IdbStorage","options","initializedDb","_db","create","then","db"],"sources":["D:\\Kshetra\\frontend\\node_modules\\@dfinity\\auth-client\\src\\storage.ts"],"sourcesContent":["import { type DBCreateOptions, IdbKeyVal } from './db.ts';\n\nexport const KEY_STORAGE_KEY = 'identity';\nexport const KEY_STORAGE_DELEGATION = 'delegation';\nexport const KEY_VECTOR = 'iv';\n// Increment if any fields are modified\nexport const DB_VERSION = 1;\n\nexport const isBrowser = typeof window !== 'undefined';\n\nexport type StoredKey = string | CryptoKeyPair;\n\n/**\n * Interface for persisting user authentication data\n */\nexport interface AuthClientStorage {\n  get(key: string): Promise<StoredKey | null>;\n\n  set(key: string, value: StoredKey): Promise<void>;\n\n  remove(key: string): Promise<void>;\n}\n\n/**\n * Legacy implementation of AuthClientStorage, for use where IndexedDb is not available\n */\nexport class LocalStorage implements AuthClientStorage {\n  constructor(\n    public readonly prefix = 'ic-',\n    private readonly _localStorage?: Storage,\n  ) {}\n\n  public get(key: string): Promise<string | null> {\n    return Promise.resolve(this._getLocalStorage().getItem(this.prefix + key));\n  }\n\n  public set(key: string, value: string): Promise<void> {\n    this._getLocalStorage().setItem(this.prefix + key, value);\n    return Promise.resolve();\n  }\n\n  public remove(key: string): Promise<void> {\n    this._getLocalStorage().removeItem(this.prefix + key);\n    return Promise.resolve();\n  }\n\n  private _getLocalStorage() {\n    if (this._localStorage) {\n      return this._localStorage;\n    }\n\n    const ls =\n      typeof window === 'undefined'\n        ? typeof global === 'undefined'\n          ? typeof self === 'undefined'\n            ? undefined\n            : self.localStorage\n          : global.localStorage\n        : window.localStorage;\n\n    if (!ls) {\n      throw new Error('Could not find local storage.');\n    }\n\n    return ls;\n  }\n}\n\n/**\n * IdbStorage is an interface for simple storage of string key-value pairs built on {@link IdbKeyVal}\n *\n * It replaces {@link LocalStorage}\n * @see implements {@link AuthClientStorage}\n */\nexport class IdbStorage implements AuthClientStorage {\n  #options: DBCreateOptions;\n\n  /**\n   * @param options - DBCreateOptions\n   * @param options.dbName - name for the indexeddb database\n   * @param options.storeName - name for the indexeddb Data Store\n   * @param options.version - version of the database. Increment to safely upgrade\n   * @example\n   * ```ts\n   * const storage = new IdbStorage({ dbName: 'my-db', storeName: 'my-store', version: 2 });\n   * ```\n   */\n  constructor(options?: DBCreateOptions) {\n    this.#options = options ?? {};\n  }\n\n  // Initializes a KeyVal on first request\n  private initializedDb: IdbKeyVal | undefined;\n  get _db(): Promise<IdbKeyVal> {\n    return new Promise(resolve => {\n      if (this.initializedDb) {\n        resolve(this.initializedDb);\n        return;\n      }\n      IdbKeyVal.create(this.#options).then(db => {\n        this.initializedDb = db;\n        resolve(db);\n      });\n    });\n  }\n\n  public async get<T = string>(key: string): Promise<T | null> {\n    const db = await this._db;\n    return await db.get<T>(key);\n    // return (await db.get<string>(key)) ?? null;\n  }\n\n  public async set<T = string>(key: string, value: T): Promise<void> {\n    const db = await this._db;\n    await db.set(key, value);\n  }\n\n  public async remove(key: string): Promise<void> {\n    const db = await this._db;\n    await db.remove(key);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}