{"ast":null,"code":"import { AuthClient } from '@dfinity/auth-client';\nimport { HttpAgent } from '@dfinity/agent';\nclass AuthService {\n  constructor() {\n    this.authClient = null;\n    this.agent = null;\n    this.actor = null;\n  }\n  async init() {\n    if (!this.authClient) {\n      this.authClient = await AuthClient.create();\n    }\n  }\n  async login() {\n    await this.init();\n    return new Promise((resolve, reject) => {\n      this.authClient.login({\n        identityProvider: process.env.REACT_APP_II_URL || 'https://identity.ic0.app',\n        onSuccess: () => {\n          this.setupAgent();\n          resolve();\n        },\n        onError: error => {\n          console.error('Login failed:', error);\n          reject(error);\n        }\n      });\n    });\n  }\n  async logout() {\n    await this.init();\n    await this.authClient.logout();\n    this.agent = null;\n    this.actor = null;\n  }\n  async checkAuth() {\n    await this.init();\n    const isAuthenticated = await this.authClient.isAuthenticated();\n    if (isAuthenticated) {\n      const identity = this.authClient.getIdentity();\n      const principal = identity.getPrincipal();\n\n      // Setup agent and actor if not already done\n      if (!this.agent) {\n        this.setupAgent();\n      }\n\n      // Get user roles from backend\n      let roles = [];\n      try {\n        if (this.actor) {\n          roles = await this.actor.get_user_roles(principal);\n        }\n      } catch (error) {\n        console.error('Failed to fetch user roles:', error);\n        roles = ['User']; // Default role\n      }\n      return {\n        isAuthenticated: true,\n        principal,\n        roles: roles.map(role => role.toString())\n      };\n    }\n    return {\n      isAuthenticated: false,\n      roles: []\n    };\n  }\n  setupAgent() {\n    const identity = this.authClient.getIdentity();\n    this.agent = new HttpAgent({\n      identity,\n      host: process.env.REACT_APP_IC_HOST || 'https://ic0.app'\n    });\n\n    // Only fetch root key in development\n    if (process.env.NODE_ENV === 'development') {\n      this.agent.fetchRootKey().catch(err => {\n        console.warn('Unable to fetch root key. Check to ensure that your local replica is running');\n        console.error(err);\n      });\n    }\n\n    // Create actor for backend canister\n    // Note: You'll need to import the generated declarations\n    // this.actor = Actor.createActor(idlFactory, {\n    //   agent: this.agent,\n    //   canisterId: process.env.REACT_APP_BACKEND_CANISTER_ID || 'your-canister-id',\n    // });\n  }\n  getAgent() {\n    return this.agent;\n  }\n  getActor() {\n    return this.actor;\n  }\n  getPrincipal() {\n    if (this.authClient) {\n      const identity = this.authClient.getIdentity();\n      return identity.getPrincipal();\n    }\n    return null;\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["AuthClient","HttpAgent","AuthService","constructor","authClient","agent","actor","init","create","login","Promise","resolve","reject","identityProvider","process","env","REACT_APP_II_URL","onSuccess","setupAgent","onError","error","console","logout","checkAuth","isAuthenticated","identity","getIdentity","principal","getPrincipal","roles","get_user_roles","map","role","toString","host","REACT_APP_IC_HOST","NODE_ENV","fetchRootKey","catch","err","warn","getAgent","getActor"],"sources":["D:/Kshetra/frontend/src/services/AuthService.ts"],"sourcesContent":["import { AuthClient } from '@dfinity/auth-client';\r\nimport { HttpAgent } from '@dfinity/agent';\r\nimport { Principal } from '@dfinity/principal';\r\n\r\nexport interface AuthStatus {\r\n  isAuthenticated: boolean;\r\n  principal?: Principal;\r\n  roles: string[];\r\n}\r\n\r\nclass AuthService {\r\n  private authClient: AuthClient | null = null;\r\n  private agent: HttpAgent | null = null;\r\n  private actor: any = null;\r\n\r\n  async init(): Promise<void> {\r\n    if (!this.authClient) {\r\n      this.authClient = await AuthClient.create();\r\n    }\r\n  }\r\n\r\n  async login(): Promise<void> {\r\n    await this.init();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      this.authClient!.login({\r\n        identityProvider: process.env.REACT_APP_II_URL || 'https://identity.ic0.app',\r\n        onSuccess: () => {\r\n          this.setupAgent();\r\n          resolve();\r\n        },\r\n        onError: (error) => {\r\n          console.error('Login failed:', error);\r\n          reject(error);\r\n        },\r\n      });\r\n    });\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    await this.init();\r\n    await this.authClient!.logout();\r\n    this.agent = null;\r\n    this.actor = null;\r\n  }\r\n\r\n  async checkAuth(): Promise<AuthStatus> {\r\n    await this.init();\r\n    \r\n    const isAuthenticated = await this.authClient!.isAuthenticated();\r\n    \r\n    if (isAuthenticated) {\r\n      const identity = this.authClient!.getIdentity();\r\n      const principal = identity.getPrincipal();\r\n      \r\n      // Setup agent and actor if not already done\r\n      if (!this.agent) {\r\n        this.setupAgent();\r\n      }\r\n      \r\n      // Get user roles from backend\r\n      let roles: string[] = [];\r\n      try {\r\n        if (this.actor) {\r\n          roles = await this.actor.get_user_roles(principal);\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to fetch user roles:', error);\r\n        roles = ['User']; // Default role\r\n      }\r\n      \r\n      return {\r\n        isAuthenticated: true,\r\n        principal,\r\n        roles: roles.map(role => role.toString()),\r\n      };\r\n    }\r\n    \r\n    return {\r\n      isAuthenticated: false,\r\n      roles: [],\r\n    };\r\n  }\r\n\r\n  private setupAgent(): void {\r\n    const identity = this.authClient!.getIdentity();\r\n    \r\n    this.agent = new HttpAgent({\r\n      identity,\r\n      host: process.env.REACT_APP_IC_HOST || 'https://ic0.app'\r\n    });\r\n\r\n    // Only fetch root key in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      this.agent.fetchRootKey().catch(err => {\r\n        console.warn('Unable to fetch root key. Check to ensure that your local replica is running');\r\n        console.error(err);\r\n      });\r\n    }\r\n\r\n    // Create actor for backend canister\r\n    // Note: You'll need to import the generated declarations\r\n    // this.actor = Actor.createActor(idlFactory, {\r\n    //   agent: this.agent,\r\n    //   canisterId: process.env.REACT_APP_BACKEND_CANISTER_ID || 'your-canister-id',\r\n    // });\r\n  }\r\n\r\n  getAgent(): HttpAgent | null {\r\n    return this.agent;\r\n  }\r\n\r\n  getActor(): any {\r\n    return this.actor;\r\n  }\r\n\r\n  getPrincipal(): Principal | null {\r\n    if (this.authClient) {\r\n      const identity = this.authClient.getIdentity();\r\n      return identity.getPrincipal();\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}