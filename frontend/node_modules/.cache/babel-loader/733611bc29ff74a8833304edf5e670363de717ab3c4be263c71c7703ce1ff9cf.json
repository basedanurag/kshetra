{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import authService from'../services/AuthService';/**\r\n * Custom React hook for managing authentication state\r\n * \r\n * This hook provides:\r\n * - Current authentication status\r\n * - Login and logout functions\r\n * - Loading states\r\n * - Error handling\r\n * - Automatic authentication check on mount\r\n */export const useAuth=()=>{const[authState,setAuthState]=useState({isAuthenticated:false,loading:true,principal:undefined,roles:[],error:undefined});// Check authentication status\nconst checkAuthentication=useCallback(async()=>{try{setAuthState(prev=>({...prev,loading:true,error:undefined}));// Initialize the service first\nawait authService.init();// Check current authentication status\nconst status=await authService.checkAuth();setAuthState({...status,loading:false,error:undefined});}catch(error){console.error('Authentication check failed:',error);setAuthState({isAuthenticated:false,loading:false,principal:undefined,roles:[],error:error instanceof Error?error.message:'Authentication check failed'});}},[]);// Login function\nconst login=useCallback(async()=>{try{setAuthState(prev=>({...prev,loading:true,error:undefined}));// Attempt login\nawait authService.login();// Check authentication status after login\nconst status=await authService.checkAuth();setAuthState({...status,loading:false,error:undefined});return{success:true};}catch(error){const errorMessage=error instanceof Error?error.message:'Login failed';console.error('Login failed:',error);setAuthState(prev=>({...prev,loading:false,error:errorMessage}));return{success:false,error:errorMessage};}},[]);// Logout function\nconst logout=useCallback(async()=>{try{setAuthState(prev=>({...prev,loading:true,error:undefined}));// Attempt logout\nawait authService.logout();// Update state to reflect logout\nsetAuthState({isAuthenticated:false,loading:false,principal:undefined,roles:[],error:undefined});return{success:true};}catch(error){const errorMessage=error instanceof Error?error.message:'Logout failed';console.error('Logout failed:',error);setAuthState(prev=>({...prev,loading:false,error:errorMessage}));return{success:false,error:errorMessage};}},[]);// Refresh authentication status\nconst refresh=useCallback(async()=>{await checkAuthentication();},[checkAuthentication]);// Check authentication on mount\nuseEffect(()=>{checkAuthentication();},[checkAuthentication]);return{...authState,authClient:null,// TODO: Get from authService\nuserProfile:null,// TODO: Implement user profile logic\nlogin,logout,refresh};};","map":{"version":3,"names":["useState","useEffect","useCallback","authService","useAuth","authState","setAuthState","isAuthenticated","loading","principal","undefined","roles","error","checkAuthentication","prev","init","status","checkAuth","console","Error","message","login","success","errorMessage","logout","refresh","authClient","userProfile"],"sources":["D:/Kshetra/frontend/src/hooks/useAuth.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport authService, { AuthStatus } from '../services/AuthService';\r\n\r\ninterface UseAuthState extends AuthStatus {\r\n  loading: boolean;\r\n  error?: string;\r\n}\r\n\r\ninterface UseAuthReturn extends UseAuthState {\r\n  authClient: any;\r\n  userProfile: any;\r\n  login: () => Promise<{ success: boolean; error?: string }>;\r\n  logout: () => Promise<{ success: boolean; error?: string }>;\r\n  refresh: () => Promise<void>;\r\n}\r\n\r\n/**\r\n * Custom React hook for managing authentication state\r\n * \r\n * This hook provides:\r\n * - Current authentication status\r\n * - Login and logout functions\r\n * - Loading states\r\n * - Error handling\r\n * - Automatic authentication check on mount\r\n */\r\nexport const useAuth = (): UseAuthReturn => {\r\n  const [authState, setAuthState] = useState<UseAuthState>({\r\n    isAuthenticated: false,\r\n    loading: true,\r\n    principal: undefined,\r\n    roles: [],\r\n    error: undefined\r\n  });\r\n\r\n  // Check authentication status\r\n  const checkAuthentication = useCallback(async () => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true, error: undefined }));\r\n      \r\n      // Initialize the service first\r\n      await authService.init();\r\n      \r\n      // Check current authentication status\r\n      const status = await authService.checkAuth();\r\n      \r\n      setAuthState({\r\n        ...status,\r\n        loading: false,\r\n        error: undefined\r\n      });\r\n    } catch (error) {\r\n      console.error('Authentication check failed:', error);\r\n      setAuthState({\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        principal: undefined,\r\n        roles: [],\r\n        error: error instanceof Error ? error.message : 'Authentication check failed'\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = useCallback(async (): Promise<{ success: boolean; error?: string }> => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true, error: undefined }));\r\n      \r\n      // Attempt login\r\n      await authService.login();\r\n      \r\n      // Check authentication status after login\r\n      const status = await authService.checkAuth();\r\n      \r\n      setAuthState({\r\n        ...status,\r\n        loading: false,\r\n        error: undefined\r\n      });\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Login failed';\r\n      console.error('Login failed:', error);\r\n      \r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: errorMessage\r\n      }));\r\n      \r\n      return { \r\n        success: false, \r\n        error: errorMessage\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  // Logout function\r\n  const logout = useCallback(async (): Promise<{ success: boolean; error?: string }> => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true, error: undefined }));\r\n      \r\n      // Attempt logout\r\n      await authService.logout();\r\n      \r\n      // Update state to reflect logout\r\n      setAuthState({\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        principal: undefined,\r\n        roles: [],\r\n        error: undefined\r\n      });\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Logout failed';\r\n      console.error('Logout failed:', error);\r\n      \r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: errorMessage\r\n      }));\r\n      \r\n      return { \r\n        success: false, \r\n        error: errorMessage\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  // Refresh authentication status\r\n  const refresh = useCallback(async () => {\r\n    await checkAuthentication();\r\n  }, [checkAuthentication]);\r\n\r\n  // Check authentication on mount\r\n  useEffect(() => {\r\n    checkAuthentication();\r\n  }, [checkAuthentication]);\r\n\r\n  return {\r\n    ...authState,\r\n    authClient: null, // TODO: Get from authService\r\n    userProfile: null, // TODO: Implement user profile logic\r\n    login,\r\n    logout,\r\n    refresh\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}