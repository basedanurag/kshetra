{"ast":null,"code":"const RANDOMIZATION_FACTOR = 0.5;\nconst MULTIPLIER = 1.5;\nconst INITIAL_INTERVAL_MSEC = 500;\nconst MAX_INTERVAL_MSEC = 60_000;\nconst MAX_ELAPSED_TIME_MSEC = 900_000;\nconst MAX_ITERATIONS = 10;\n/**\n * Exponential backoff strategy.\n */\nexport class ExponentialBackoff {\n  #currentInterval;\n  #randomizationFactor;\n  #multiplier;\n  #maxInterval;\n  #startTime;\n  #maxElapsedTime;\n  #maxIterations;\n  #date;\n  #count = 0;\n  static {\n    this.default = {\n      initialInterval: INITIAL_INTERVAL_MSEC,\n      randomizationFactor: RANDOMIZATION_FACTOR,\n      multiplier: MULTIPLIER,\n      maxInterval: MAX_INTERVAL_MSEC,\n      // 1 minute\n      maxElapsedTime: MAX_ELAPSED_TIME_MSEC,\n      maxIterations: MAX_ITERATIONS,\n      date: Date\n    };\n  }\n  constructor(options = ExponentialBackoff.default) {\n    const {\n      initialInterval = INITIAL_INTERVAL_MSEC,\n      randomizationFactor = RANDOMIZATION_FACTOR,\n      multiplier = MULTIPLIER,\n      maxInterval = MAX_INTERVAL_MSEC,\n      maxElapsedTime = MAX_ELAPSED_TIME_MSEC,\n      maxIterations = MAX_ITERATIONS,\n      date = Date\n    } = options;\n    this.#currentInterval = initialInterval;\n    this.#randomizationFactor = randomizationFactor;\n    this.#multiplier = multiplier;\n    this.#maxInterval = maxInterval;\n    this.#date = date;\n    this.#startTime = date.now();\n    this.#maxElapsedTime = maxElapsedTime;\n    this.#maxIterations = maxIterations;\n  }\n  get ellapsedTimeInMsec() {\n    return this.#date.now() - this.#startTime;\n  }\n  get currentInterval() {\n    return this.#currentInterval;\n  }\n  get count() {\n    return this.#count;\n  }\n  get randomValueFromInterval() {\n    const delta = this.#randomizationFactor * this.#currentInterval;\n    const min = this.#currentInterval - delta;\n    const max = this.#currentInterval + delta;\n    return Math.random() * (max - min) + min;\n  }\n  incrementCurrentInterval() {\n    this.#currentInterval = Math.min(this.#currentInterval * this.#multiplier, this.#maxInterval);\n    this.#count++;\n    return this.#currentInterval;\n  }\n  next() {\n    if (this.ellapsedTimeInMsec >= this.#maxElapsedTime || this.#count >= this.#maxIterations) {\n      return null;\n    } else {\n      this.incrementCurrentInterval();\n      return this.randomValueFromInterval;\n    }\n  }\n}\n/**\n * Utility function to create an exponential backoff iterator.\n * @param options - for the exponential backoff\n * @returns an iterator that yields the next delay in the exponential backoff\n * @yields the next delay in the exponential backoff\n */\nexport function* exponentialBackoff(options = ExponentialBackoff.default) {\n  const backoff = new ExponentialBackoff(options);\n  let next = backoff.next();\n  while (next) {\n    yield next;\n    next = backoff.next();\n  }\n}","map":{"version":3,"names":["RANDOMIZATION_FACTOR","MULTIPLIER","INITIAL_INTERVAL_MSEC","MAX_INTERVAL_MSEC","MAX_ELAPSED_TIME_MSEC","MAX_ITERATIONS","ExponentialBackoff","currentInterval","randomizationFactor","multiplier","maxInterval","startTime","maxElapsedTime","maxIterations","date","count","default","initialInterval","Date","constructor","options","now","ellapsedTimeInMsec","randomValueFromInterval","delta","min","max","Math","random","incrementCurrentInterval","next","exponentialBackoff","backoff"],"sources":["D:\\Kshetra\\frontend\\node_modules\\@dfinity\\agent\\src\\polling\\backoff.ts"],"sourcesContent":["const RANDOMIZATION_FACTOR = 0.5;\nconst MULTIPLIER = 1.5;\nconst INITIAL_INTERVAL_MSEC = 500;\nconst MAX_INTERVAL_MSEC = 60_000;\nconst MAX_ELAPSED_TIME_MSEC = 900_000;\nconst MAX_ITERATIONS = 10;\n\nexport type BackoffStrategy = {\n  next: () => number | null;\n  currentInterval?: number;\n  count?: number;\n  ellapsedTimeInMsec?: number;\n};\n\nexport type BackoffStrategyArgs = {\n  maxIterations?: number;\n  maxElapsedTime?: number;\n};\n\nexport type BackoffStrategyFactory = (args?: BackoffStrategyArgs) => BackoffStrategy;\n\n// export type BackoffStrategyGenerator = Generator<number, void, unknown>;\n\nexport type ExponentialBackoffOptions = {\n  initialInterval?: number;\n  randomizationFactor?: number;\n  multiplier?: number;\n  maxInterval?: number;\n  maxElapsedTime?: number;\n  maxIterations?: number;\n  date?: DateConstructor;\n};\n\n/**\n * Exponential backoff strategy.\n */\nexport class ExponentialBackoff {\n  #currentInterval: number;\n  #randomizationFactor: number;\n  #multiplier: number;\n  #maxInterval: number;\n  #startTime: number;\n  #maxElapsedTime: number;\n  #maxIterations: number;\n  #date: DateConstructor;\n  #count = 0;\n\n  static default = {\n    initialInterval: INITIAL_INTERVAL_MSEC,\n    randomizationFactor: RANDOMIZATION_FACTOR,\n    multiplier: MULTIPLIER,\n    maxInterval: MAX_INTERVAL_MSEC,\n    // 1 minute\n    maxElapsedTime: MAX_ELAPSED_TIME_MSEC,\n    maxIterations: MAX_ITERATIONS,\n    date: Date,\n  };\n\n  constructor(options: ExponentialBackoffOptions = ExponentialBackoff.default) {\n    const {\n      initialInterval = INITIAL_INTERVAL_MSEC,\n      randomizationFactor = RANDOMIZATION_FACTOR,\n      multiplier = MULTIPLIER,\n      maxInterval = MAX_INTERVAL_MSEC,\n      maxElapsedTime = MAX_ELAPSED_TIME_MSEC,\n      maxIterations = MAX_ITERATIONS,\n      date = Date,\n    } = options;\n    this.#currentInterval = initialInterval;\n    this.#randomizationFactor = randomizationFactor;\n    this.#multiplier = multiplier;\n    this.#maxInterval = maxInterval;\n    this.#date = date;\n    this.#startTime = date.now();\n    this.#maxElapsedTime = maxElapsedTime;\n    this.#maxIterations = maxIterations;\n  }\n\n  get ellapsedTimeInMsec() {\n    return this.#date.now() - this.#startTime;\n  }\n\n  get currentInterval() {\n    return this.#currentInterval;\n  }\n\n  get count() {\n    return this.#count;\n  }\n\n  get randomValueFromInterval() {\n    const delta = this.#randomizationFactor * this.#currentInterval;\n    const min = this.#currentInterval - delta;\n    const max = this.#currentInterval + delta;\n    return Math.random() * (max - min) + min;\n  }\n\n  public incrementCurrentInterval() {\n    this.#currentInterval = Math.min(this.#currentInterval * this.#multiplier, this.#maxInterval);\n    this.#count++;\n\n    return this.#currentInterval;\n  }\n\n  public next() {\n    if (this.ellapsedTimeInMsec >= this.#maxElapsedTime || this.#count >= this.#maxIterations) {\n      return null;\n    } else {\n      this.incrementCurrentInterval();\n      return this.randomValueFromInterval;\n    }\n  }\n}\n/**\n * Utility function to create an exponential backoff iterator.\n * @param options - for the exponential backoff\n * @returns an iterator that yields the next delay in the exponential backoff\n * @yields the next delay in the exponential backoff\n */\nexport function* exponentialBackoff(\n  options: ExponentialBackoffOptions = ExponentialBackoff.default,\n) {\n  const backoff = new ExponentialBackoff(options);\n\n  let next = backoff.next();\n  while (next) {\n    yield next;\n    next = backoff.next();\n  }\n}\n"],"mappings":"AAAA,MAAMA,oBAAoB,GAAG,GAAG;AAChC,MAAMC,UAAU,GAAG,GAAG;AACtB,MAAMC,qBAAqB,GAAG,GAAG;AACjC,MAAMC,iBAAiB,GAAG,MAAM;AAChC,MAAMC,qBAAqB,GAAG,OAAO;AACrC,MAAMC,cAAc,GAAG,EAAE;AA4BzB;;;AAGA,OAAM,MAAOC,kBAAkB;EAC7B,CAAAC,eAAgB;EAChB,CAAAC,mBAAoB;EACpB,CAAAC,UAAW;EACX,CAAAC,WAAY;EACZ,CAAAC,SAAU;EACV,CAAAC,cAAe;EACf,CAAAC,aAAc;EACd,CAAAC,IAAK;EACL,CAAAC,KAAM,GAAG,CAAC;;IAEH,KAAAC,OAAO,GAAG;MACfC,eAAe,EAAEf,qBAAqB;MACtCM,mBAAmB,EAAER,oBAAoB;MACzCS,UAAU,EAAER,UAAU;MACtBS,WAAW,EAAEP,iBAAiB;MAC9B;MACAS,cAAc,EAAER,qBAAqB;MACrCS,aAAa,EAAER,cAAc;MAC7BS,IAAI,EAAEI;KACP;EAAC;EAEFC,YAAYC,OAAA,GAAqCd,kBAAkB,CAACU,OAAO;IACzE,MAAM;MACJC,eAAe,GAAGf,qBAAqB;MACvCM,mBAAmB,GAAGR,oBAAoB;MAC1CS,UAAU,GAAGR,UAAU;MACvBS,WAAW,GAAGP,iBAAiB;MAC/BS,cAAc,GAAGR,qBAAqB;MACtCS,aAAa,GAAGR,cAAc;MAC9BS,IAAI,GAAGI;IAAI,CACZ,GAAGE,OAAO;IACX,IAAI,CAAC,CAAAb,eAAgB,GAAGU,eAAe;IACvC,IAAI,CAAC,CAAAT,mBAAoB,GAAGA,mBAAmB;IAC/C,IAAI,CAAC,CAAAC,UAAW,GAAGA,UAAU;IAC7B,IAAI,CAAC,CAAAC,WAAY,GAAGA,WAAW;IAC/B,IAAI,CAAC,CAAAI,IAAK,GAAGA,IAAI;IACjB,IAAI,CAAC,CAAAH,SAAU,GAAGG,IAAI,CAACO,GAAG,EAAE;IAC5B,IAAI,CAAC,CAAAT,cAAe,GAAGA,cAAc;IACrC,IAAI,CAAC,CAAAC,aAAc,GAAGA,aAAa;EACrC;EAEA,IAAIS,kBAAkBA,CAAA;IACpB,OAAO,IAAI,CAAC,CAAAR,IAAK,CAACO,GAAG,EAAE,GAAG,IAAI,CAAC,CAAAV,SAAU;EAC3C;EAEA,IAAIJ,eAAeA,CAAA;IACjB,OAAO,IAAI,CAAC,CAAAA,eAAgB;EAC9B;EAEA,IAAIQ,KAAKA,CAAA;IACP,OAAO,IAAI,CAAC,CAAAA,KAAM;EACpB;EAEA,IAAIQ,uBAAuBA,CAAA;IACzB,MAAMC,KAAK,GAAG,IAAI,CAAC,CAAAhB,mBAAoB,GAAG,IAAI,CAAC,CAAAD,eAAgB;IAC/D,MAAMkB,GAAG,GAAG,IAAI,CAAC,CAAAlB,eAAgB,GAAGiB,KAAK;IACzC,MAAME,GAAG,GAAG,IAAI,CAAC,CAAAnB,eAAgB,GAAGiB,KAAK;IACzC,OAAOG,IAAI,CAACC,MAAM,EAAE,IAAIF,GAAG,GAAGD,GAAG,CAAC,GAAGA,GAAG;EAC1C;EAEOI,wBAAwBA,CAAA;IAC7B,IAAI,CAAC,CAAAtB,eAAgB,GAAGoB,IAAI,CAACF,GAAG,CAAC,IAAI,CAAC,CAAAlB,eAAgB,GAAG,IAAI,CAAC,CAAAE,UAAW,EAAE,IAAI,CAAC,CAAAC,WAAY,CAAC;IAC7F,IAAI,CAAC,CAAAK,KAAM,EAAE;IAEb,OAAO,IAAI,CAAC,CAAAR,eAAgB;EAC9B;EAEOuB,IAAIA,CAAA;IACT,IAAI,IAAI,CAACR,kBAAkB,IAAI,IAAI,CAAC,CAAAV,cAAe,IAAI,IAAI,CAAC,CAAAG,KAAM,IAAI,IAAI,CAAC,CAAAF,aAAc,EAAE;MACzF,OAAO,IAAI;IACb,CAAC,MAAM;MACL,IAAI,CAACgB,wBAAwB,EAAE;MAC/B,OAAO,IAAI,CAACN,uBAAuB;IACrC;EACF;;AAEF;;;;;;AAMA,OAAM,UAAWQ,kBAAkBA,CACjCX,OAAA,GAAqCd,kBAAkB,CAACU,OAAO;EAE/D,MAAMgB,OAAO,GAAG,IAAI1B,kBAAkB,CAACc,OAAO,CAAC;EAE/C,IAAIU,IAAI,GAAGE,OAAO,CAACF,IAAI,EAAE;EACzB,OAAOA,IAAI,EAAE;IACX,MAAMA,IAAI;IACVA,IAAI,GAAGE,OAAO,CAACF,IAAI,EAAE;EACvB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}