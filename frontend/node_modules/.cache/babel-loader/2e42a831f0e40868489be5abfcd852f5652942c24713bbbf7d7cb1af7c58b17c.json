{"ast":null,"code":"import{Actor,HttpAgent}from'@dfinity/agent';// Types matching your backend canister\n// Interface matching your backend canister methods\nclass LandRegistryService{constructor(){this.actor=null;this.agent=null;this.canisterId=void 0;this.canisterId=process.env.REACT_APP_LAND_REGISTRY_CANISTER_ID||'rdmx6-jaaaa-aaaah-qcaiq-cai';}async init(authClient){try{const host=process.env.REACT_APP_IC_HOST||'https://ic0.app';this.agent=new HttpAgent({host});// Use authenticated identity if available\nif(authClient){const identity=authClient.getIdentity();this.agent=new HttpAgent({host,identity});}// Fetch root key for local development\nif(process.env.NODE_ENV==='development'){await this.agent.fetchRootKey();}// Create actor with the canister interface\nthis.actor=Actor.createActor(this.getIDL(),{agent:this.agent,canisterId:this.canisterId});}catch(error){console.error('Failed to initialize LandRegistryService:',error);throw error;}}getIDL(){// This would normally be generated from your .did file\n// For now, we'll use a simplified interface\nreturn _ref=>{let{IDL}=_ref;const LandParcel=IDL.Record({id:IDL.Text,owner:IDL.Principal,coordinates:IDL.Record({latitude:IDL.Float64,longitude:IDL.Float64}),area:IDL.Float64,land_use:IDL.Text,zone:IDL.Text,survey_number:IDL.Text,village:IDL.Text,district:IDL.Text,state:IDL.Text,registration_date:IDL.Int,last_updated:IDL.Int,documents:IDL.Vec(IDL.Text),metadata:IDL.Record({})});const TransferRequest=IDL.Record({parcel_id:IDL.Text,new_owner:IDL.Principal,transfer_fee:IDL.Nat,documents:IDL.Vec(IDL.Text),reason:IDL.Text});const UserProfile=IDL.Record({principal:IDL.Principal,name:IDL.Text,role:IDL.Variant({Admin:IDL.Null,User:IDL.Null}),registration_date:IDL.Int,contact_info:IDL.Record({})});const Result=IDL.Variant({Ok:IDL.Text,Err:IDL.Text});return IDL.Service({// Query methods\nget_parcel:IDL.Func([IDL.Text],[IDL.Opt(LandParcel)],['query']),get_parcels_by_owner:IDL.Func([IDL.Principal],[IDL.Vec(LandParcel)],['query']),get_all_parcels:IDL.Func([],[IDL.Vec(LandParcel)],['query']),search_parcels:IDL.Func([IDL.Record({})],[IDL.Vec(LandParcel)],['query']),get_user_profile:IDL.Func([IDL.Principal],[IDL.Opt(UserProfile)],['query']),get_transfer_requests:IDL.Func([],[IDL.Vec(TransferRequest)],['query']),get_pending_transfers:IDL.Func([],[IDL.Vec(TransferRequest)],['query']),verify_ownership:IDL.Func([IDL.Text,IDL.Principal],[IDL.Bool],['query']),// Update methods\nregister_parcel:IDL.Func([LandParcel],[Result],[]),transfer_ownership:IDL.Func([TransferRequest],[Result],[]),approve_transfer:IDL.Func([IDL.Text,IDL.Principal],[Result],[]),reject_transfer:IDL.Func([IDL.Text,IDL.Text],[Result],[]),update_parcel:IDL.Func([IDL.Text,LandParcel],[Result],[]),create_user_profile:IDL.Func([UserProfile],[Result],[]),update_user_profile:IDL.Func([UserProfile],[Result],[])});};}// Parcel management methods\nasync getParcel(id){if(!this.actor)throw new Error('Service not initialized');return await this.actor.get_parcel(id);}async getParcelsByOwner(owner){if(!this.actor)throw new Error('Service not initialized');return await this.actor.get_parcels_by_owner(owner);}async getAllParcels(){if(!this.actor)throw new Error('Service not initialized');return await this.actor.get_all_parcels();}async searchParcels(filters){if(!this.actor)throw new Error('Service not initialized');return await this.actor.search_parcels(filters);}async registerParcel(parcel){if(!this.actor)throw new Error('Service not initialized');return await this.actor.register_parcel(parcel);}async updateParcel(id,updates){if(!this.actor)throw new Error('Service not initialized');return await this.actor.update_parcel(id,updates);}// Transfer management methods\nasync transferOwnership(request){if(!this.actor)throw new Error('Service not initialized');return await this.actor.transfer_ownership(request);}async approveTransfer(parcelId,newOwner){if(!this.actor)throw new Error('Service not initialized');return await this.actor.approve_transfer(parcelId,newOwner);}async rejectTransfer(parcelId,reason){if(!this.actor)throw new Error('Service not initialized');return await this.actor.reject_transfer(parcelId,reason);}async getTransferRequests(){if(!this.actor)throw new Error('Service not initialized');return await this.actor.get_transfer_requests();}async getPendingTransfers(){if(!this.actor)throw new Error('Service not initialized');return await this.actor.get_pending_transfers();}// User management methods\nasync getUserProfile(principal){if(!this.actor)throw new Error('Service not initialized');return await this.actor.get_user_profile(principal);}async createUserProfile(profile){if(!this.actor)throw new Error('Service not initialized');return await this.actor.create_user_profile(profile);}async updateUserProfile(updates){if(!this.actor)throw new Error('Service not initialized');return await this.actor.update_user_profile(updates);}// Utility methods\nasync verifyOwnership(parcelId,owner){if(!this.actor)throw new Error('Service not initialized');return await this.actor.verify_ownership(parcelId,owner);}// Helper method to format area in different units\nformatArea(area){let unit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'sqm';switch(unit){case'acre':return`${(area*0.000247105).toFixed(2)} acres`;case'hectare':return`${(area*0.0001).toFixed(2)} hectares`;default:return`${area.toFixed(2)} sq.m`;}}// Helper method to format dates\nformatDate(timestamp){return new Date(Number(timestamp)/1000000).toLocaleDateString();}// Helper method to generate parcel display ID\ngetParcelDisplayId(parcel){return`${parcel.state.substring(0,2).toUpperCase()}-${parcel.district.substring(0,3).toUpperCase()}-${parcel.survey_number}`;}}// Export singleton instance\nexport const landRegistryService=new LandRegistryService();export default landRegistryService;","map":{"version":3,"names":["Actor","HttpAgent","LandRegistryService","constructor","actor","agent","canisterId","process","env","REACT_APP_LAND_REGISTRY_CANISTER_ID","init","authClient","host","REACT_APP_IC_HOST","identity","getIdentity","NODE_ENV","fetchRootKey","createActor","getIDL","error","console","_ref","IDL","LandParcel","Record","id","Text","owner","Principal","coordinates","latitude","Float64","longitude","area","land_use","zone","survey_number","village","district","state","registration_date","Int","last_updated","documents","Vec","metadata","TransferRequest","parcel_id","new_owner","transfer_fee","Nat","reason","UserProfile","principal","name","role","Variant","Admin","Null","User","contact_info","Result","Ok","Err","Service","get_parcel","Func","Opt","get_parcels_by_owner","get_all_parcels","search_parcels","get_user_profile","get_transfer_requests","get_pending_transfers","verify_ownership","Bool","register_parcel","transfer_ownership","approve_transfer","reject_transfer","update_parcel","create_user_profile","update_user_profile","getParcel","Error","getParcelsByOwner","getAllParcels","searchParcels","filters","registerParcel","parcel","updateParcel","updates","transferOwnership","request","approveTransfer","parcelId","newOwner","rejectTransfer","getTransferRequests","getPendingTransfers","getUserProfile","createUserProfile","profile","updateUserProfile","verifyOwnership","formatArea","unit","arguments","length","undefined","toFixed","formatDate","timestamp","Date","Number","toLocaleDateString","getParcelDisplayId","substring","toUpperCase","landRegistryService"],"sources":["D:/Kshetra/frontend/src/services/LandRegistryService.ts"],"sourcesContent":["import { Actor, HttpAgent } from '@dfinity/agent';\r\nimport Principal from '@dfinity/principal';\r\nimport { AuthClient } from '@dfinity/auth-client';\r\n\r\n// Types matching your backend canister\r\nexport interface LandParcel {\r\n  id: string;\r\n  owner: Principal;\r\n  coordinates: {\r\n    latitude: number;\r\n    longitude: number;\r\n  };\r\n  area: number;\r\n  land_use: string;\r\n  zone: string;\r\n  survey_number: string;\r\n  village: string;\r\n  district: string;\r\n  state: string;\r\n  registration_date: bigint;\r\n  last_updated: bigint;\r\n  documents: string[]; // IPFS hashes\r\n  metadata: Record<string, string>;\r\n}\r\n\r\nexport interface TransferRequest {\r\n  parcel_id: string;\r\n  new_owner: Principal;\r\n  transfer_fee: bigint;\r\n  documents: string[];\r\n  reason: string;\r\n}\r\n\r\nexport interface UserProfile {\r\n  principal: Principal;\r\n  name: string;\r\n  role: 'Admin' | 'User';\r\n  registration_date: bigint;\r\n  contact_info: Record<string, string>;\r\n}\r\n\r\n// Interface matching your backend canister methods\r\nexport interface LandRegistryActor {\r\n  // Query methods\r\n  get_parcel: (id: string) => Promise<LandParcel | null>;\r\n  get_parcels_by_owner: (owner: Principal) => Promise<LandParcel[]>;\r\n  get_all_parcels: () => Promise<LandParcel[]>;\r\n  search_parcels: (filters: Record<string, string>) => Promise<LandParcel[]>;\r\n  get_user_profile: (principal: Principal) => Promise<UserProfile | null>;\r\n  get_transfer_requests: () => Promise<TransferRequest[]>;\r\n  get_pending_transfers: () => Promise<TransferRequest[]>;\r\n  verify_ownership: (parcel_id: string, owner: Principal) => Promise<boolean>;\r\n  \r\n  // Update methods\r\n  register_parcel: (parcel: Omit<LandParcel, 'id' | 'registration_date' | 'last_updated'>) => Promise<{ Ok: string } | { Err: string }>;\r\n  transfer_ownership: (request: TransferRequest) => Promise<{ Ok: string } | { Err: string }>;\r\n  approve_transfer: (parcel_id: string, new_owner: Principal) => Promise<{ Ok: string } | { Err: string }>;\r\n  reject_transfer: (parcel_id: string, reason: string) => Promise<{ Ok: string } | { Err: string }>;\r\n  update_parcel: (id: string, updates: Partial<LandParcel>) => Promise<{ Ok: string } | { Err: string }>;\r\n  create_user_profile: (profile: Omit<UserProfile, 'principal' | 'registration_date'>) => Promise<{ Ok: string } | { Err: string }>;\r\n  update_user_profile: (updates: Partial<UserProfile>) => Promise<{ Ok: string } | { Err: string }>;\r\n}\r\n\r\nclass LandRegistryService {\r\n  private actor: LandRegistryActor | null = null;\r\n  private agent: HttpAgent | null = null;\r\n  private canisterId: string;\r\n\r\n  constructor() {\r\n    this.canisterId = process.env.REACT_APP_LAND_REGISTRY_CANISTER_ID || 'rdmx6-jaaaa-aaaah-qcaiq-cai';\r\n  }\r\n\r\n  async init(authClient?: AuthClient): Promise<void> {\r\n    try {\r\n      const host = process.env.REACT_APP_IC_HOST || 'https://ic0.app';\r\n      \r\n      this.agent = new HttpAgent({ host });\r\n      \r\n      // Use authenticated identity if available\r\n      if (authClient) {\r\n        const identity = authClient.getIdentity();\r\n        this.agent = new HttpAgent({ host, identity });\r\n      }\r\n\r\n      // Fetch root key for local development\r\n      if (process.env.NODE_ENV === 'development') {\r\n        await this.agent.fetchRootKey();\r\n      }\r\n\r\n      // Create actor with the canister interface\r\n      this.actor = Actor.createActor<LandRegistryActor>(this.getIDL(), {\r\n        agent: this.agent,\r\n        canisterId: this.canisterId,\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Failed to initialize LandRegistryService:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private getIDL() {\r\n    // This would normally be generated from your .did file\r\n    // For now, we'll use a simplified interface\r\n    return ({ IDL }: any) => {\r\n      const LandParcel = IDL.Record({\r\n        id: IDL.Text,\r\n        owner: IDL.Principal,\r\n        coordinates: IDL.Record({\r\n          latitude: IDL.Float64,\r\n          longitude: IDL.Float64,\r\n        }),\r\n        area: IDL.Float64,\r\n        land_use: IDL.Text,\r\n        zone: IDL.Text,\r\n        survey_number: IDL.Text,\r\n        village: IDL.Text,\r\n        district: IDL.Text,\r\n        state: IDL.Text,\r\n        registration_date: IDL.Int,\r\n        last_updated: IDL.Int,\r\n        documents: IDL.Vec(IDL.Text),\r\n        metadata: IDL.Record({}),\r\n      });\r\n\r\n      const TransferRequest = IDL.Record({\r\n        parcel_id: IDL.Text,\r\n        new_owner: IDL.Principal,\r\n        transfer_fee: IDL.Nat,\r\n        documents: IDL.Vec(IDL.Text),\r\n        reason: IDL.Text,\r\n      });\r\n\r\n      const UserProfile = IDL.Record({\r\n        principal: IDL.Principal,\r\n        name: IDL.Text,\r\n        role: IDL.Variant({ Admin: IDL.Null, User: IDL.Null }),\r\n        registration_date: IDL.Int,\r\n        contact_info: IDL.Record({}),\r\n      });\r\n\r\n      const Result = IDL.Variant({\r\n        Ok: IDL.Text,\r\n        Err: IDL.Text,\r\n      });\r\n\r\n      return IDL.Service({\r\n        // Query methods\r\n        get_parcel: IDL.Func([IDL.Text], [IDL.Opt(LandParcel)], ['query']),\r\n        get_parcels_by_owner: IDL.Func([IDL.Principal], [IDL.Vec(LandParcel)], ['query']),\r\n        get_all_parcels: IDL.Func([], [IDL.Vec(LandParcel)], ['query']),\r\n        search_parcels: IDL.Func([IDL.Record({})], [IDL.Vec(LandParcel)], ['query']),\r\n        get_user_profile: IDL.Func([IDL.Principal], [IDL.Opt(UserProfile)], ['query']),\r\n        get_transfer_requests: IDL.Func([], [IDL.Vec(TransferRequest)], ['query']),\r\n        get_pending_transfers: IDL.Func([], [IDL.Vec(TransferRequest)], ['query']),\r\n        verify_ownership: IDL.Func([IDL.Text, IDL.Principal], [IDL.Bool], ['query']),\r\n        \r\n        // Update methods\r\n        register_parcel: IDL.Func([LandParcel], [Result], []),\r\n        transfer_ownership: IDL.Func([TransferRequest], [Result], []),\r\n        approve_transfer: IDL.Func([IDL.Text, IDL.Principal], [Result], []),\r\n        reject_transfer: IDL.Func([IDL.Text, IDL.Text], [Result], []),\r\n        update_parcel: IDL.Func([IDL.Text, LandParcel], [Result], []),\r\n        create_user_profile: IDL.Func([UserProfile], [Result], []),\r\n        update_user_profile: IDL.Func([UserProfile], [Result], []),\r\n      });\r\n    };\r\n  }\r\n\r\n  // Parcel management methods\r\n  async getParcel(id: string): Promise<LandParcel | null> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.get_parcel(id);\r\n  }\r\n\r\n  async getParcelsByOwner(owner: Principal): Promise<LandParcel[]> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.get_parcels_by_owner(owner);\r\n  }\r\n\r\n  async getAllParcels(): Promise<LandParcel[]> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.get_all_parcels();\r\n  }\r\n\r\n  async searchParcels(filters: Record<string, string>): Promise<LandParcel[]> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.search_parcels(filters);\r\n  }\r\n\r\n  async registerParcel(parcel: Omit<LandParcel, 'id' | 'registration_date' | 'last_updated'>): Promise<{ Ok: string } | { Err: string }> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.register_parcel(parcel);\r\n  }\r\n\r\n  async updateParcel(id: string, updates: Partial<LandParcel>): Promise<{ Ok: string } | { Err: string }> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.update_parcel(id, updates);\r\n  }\r\n\r\n  // Transfer management methods\r\n  async transferOwnership(request: TransferRequest): Promise<{ Ok: string } | { Err: string }> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.transfer_ownership(request);\r\n  }\r\n\r\n  async approveTransfer(parcelId: string, newOwner: Principal): Promise<{ Ok: string } | { Err: string }> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.approve_transfer(parcelId, newOwner);\r\n  }\r\n\r\n  async rejectTransfer(parcelId: string, reason: string): Promise<{ Ok: string } | { Err: string }> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.reject_transfer(parcelId, reason);\r\n  }\r\n\r\n  async getTransferRequests(): Promise<TransferRequest[]> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.get_transfer_requests();\r\n  }\r\n\r\n  async getPendingTransfers(): Promise<TransferRequest[]> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.get_pending_transfers();\r\n  }\r\n\r\n  // User management methods\r\n  async getUserProfile(principal: Principal): Promise<UserProfile | null> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.get_user_profile(principal);\r\n  }\r\n\r\n  async createUserProfile(profile: Omit<UserProfile, 'principal' | 'registration_date'>): Promise<{ Ok: string } | { Err: string }> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.create_user_profile(profile);\r\n  }\r\n\r\n  async updateUserProfile(updates: Partial<UserProfile>): Promise<{ Ok: string } | { Err: string }> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.update_user_profile(updates);\r\n  }\r\n\r\n  // Utility methods\r\n  async verifyOwnership(parcelId: string, owner: Principal): Promise<boolean> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.verify_ownership(parcelId, owner);\r\n  }\r\n\r\n  // Helper method to format area in different units\r\n  formatArea(area: number, unit: 'sqm' | 'acre' | 'hectare' = 'sqm'): string {\r\n    switch (unit) {\r\n      case 'acre':\r\n        return `${(area * 0.000247105).toFixed(2)} acres`;\r\n      case 'hectare':\r\n        return `${(area * 0.0001).toFixed(2)} hectares`;\r\n      default:\r\n        return `${area.toFixed(2)} sq.m`;\r\n    }\r\n  }\r\n\r\n  // Helper method to format dates\r\n  formatDate(timestamp: bigint): string {\r\n    return new Date(Number(timestamp) / 1000000).toLocaleDateString();\r\n  }\r\n\r\n  // Helper method to generate parcel display ID\r\n  getParcelDisplayId(parcel: LandParcel): string {\r\n    return `${parcel.state.substring(0, 2).toUpperCase()}-${parcel.district.substring(0, 3).toUpperCase()}-${parcel.survey_number}`;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const landRegistryService = new LandRegistryService();\r\nexport default landRegistryService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}