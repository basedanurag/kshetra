{"ast":null,"code":"import { Principal } from '@dfinity/principal';\n/**\n * A partial delegated identity, representing a delegation chain and the public key that it targets\n */\nexport class PartialIdentity {\n  #inner;\n  /**\n   * The raw public key of this identity.\n   */\n  get rawKey() {\n    return this.#inner.rawKey;\n  }\n  /**\n   * The DER-encoded public key of this identity.\n   */\n  get derKey() {\n    return this.#inner.derKey;\n  }\n  /**\n   * The DER-encoded public key of this identity.\n   */\n  toDer() {\n    return this.#inner.toDer();\n  }\n  /**\n   * The inner {@link PublicKey} used by this identity.\n   */\n  getPublicKey() {\n    return this.#inner;\n  }\n  /**\n   * The {@link Principal} of this identity.\n   */\n  getPrincipal() {\n    if (!this.#inner.rawKey) {\n      throw new Error('Cannot get principal from a public key without a raw key.');\n    }\n    return Principal.fromUint8Array(new Uint8Array(this.#inner.rawKey));\n  }\n  /**\n   * Required for the Identity interface, but cannot implemented for just a public key.\n   */\n  transformRequest() {\n    return Promise.reject('Not implemented. You are attempting to use a partial identity to sign calls, but this identity only has access to the public key.To sign calls, use a DelegationIdentity instead.');\n  }\n  constructor(inner) {\n    this.#inner = inner;\n  }\n}","map":{"version":3,"names":["Principal","PartialIdentity","inner","rawKey","derKey","toDer","getPublicKey","getPrincipal","Error","fromUint8Array","Uint8Array","transformRequest","Promise","reject","constructor"],"sources":["D:\\Kshetra\\frontend\\node_modules\\@dfinity\\identity\\src\\identity\\partial.ts"],"sourcesContent":["import { type Identity, type PublicKey } from '@dfinity/agent';\nimport { Principal } from '@dfinity/principal';\n\n/**\n * A partial delegated identity, representing a delegation chain and the public key that it targets\n */\nexport class PartialIdentity implements Identity {\n  #inner: PublicKey;\n\n  /**\n   * The raw public key of this identity.\n   */\n  get rawKey(): Uint8Array | undefined {\n    return this.#inner.rawKey;\n  }\n\n  /**\n   * The DER-encoded public key of this identity.\n   */\n  get derKey(): Uint8Array | undefined {\n    return this.#inner.derKey;\n  }\n\n  /**\n   * The DER-encoded public key of this identity.\n   */\n  public toDer(): Uint8Array {\n    return this.#inner.toDer();\n  }\n\n  /**\n   * The inner {@link PublicKey} used by this identity.\n   */\n  public getPublicKey(): PublicKey {\n    return this.#inner;\n  }\n\n  /**\n   * The {@link Principal} of this identity.\n   */\n  public getPrincipal(): Principal {\n    if (!this.#inner.rawKey) {\n      throw new Error('Cannot get principal from a public key without a raw key.');\n    }\n    return Principal.fromUint8Array(new Uint8Array(this.#inner.rawKey));\n  }\n\n  /**\n   * Required for the Identity interface, but cannot implemented for just a public key.\n   */\n  public transformRequest(): Promise<never> {\n    return Promise.reject(\n      'Not implemented. You are attempting to use a partial identity to sign calls, but this identity only has access to the public key.To sign calls, use a DelegationIdentity instead.',\n    );\n  }\n\n  constructor(inner: PublicKey) {\n    this.#inner = inner;\n  }\n}\n"],"mappings":"AACA,SAASA,SAAS,QAAQ,oBAAoB;AAE9C;;;AAGA,OAAM,MAAOC,eAAe;EAC1B,CAAAC,KAAM;EAEN;;;EAGA,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAAC,CAAAD,KAAM,CAACC,MAAM;EAC3B;EAEA;;;EAGA,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAAC,CAAAF,KAAM,CAACE,MAAM;EAC3B;EAEA;;;EAGOC,KAAKA,CAAA;IACV,OAAO,IAAI,CAAC,CAAAH,KAAM,CAACG,KAAK,EAAE;EAC5B;EAEA;;;EAGOC,YAAYA,CAAA;IACjB,OAAO,IAAI,CAAC,CAAAJ,KAAM;EACpB;EAEA;;;EAGOK,YAAYA,CAAA;IACjB,IAAI,CAAC,IAAI,CAAC,CAAAL,KAAM,CAACC,MAAM,EAAE;MACvB,MAAM,IAAIK,KAAK,CAAC,2DAA2D,CAAC;IAC9E;IACA,OAAOR,SAAS,CAACS,cAAc,CAAC,IAAIC,UAAU,CAAC,IAAI,CAAC,CAAAR,KAAM,CAACC,MAAM,CAAC,CAAC;EACrE;EAEA;;;EAGOQ,gBAAgBA,CAAA;IACrB,OAAOC,OAAO,CAACC,MAAM,CACnB,mLAAmL,CACpL;EACH;EAEAC,YAAYZ,KAAgB;IAC1B,IAAI,CAAC,CAAAA,KAAM,GAAGA,KAAK;EACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}