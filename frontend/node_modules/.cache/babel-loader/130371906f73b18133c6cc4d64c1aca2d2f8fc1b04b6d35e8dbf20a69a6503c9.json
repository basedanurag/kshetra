{"ast":null,"code":"import { decode, encode } from \"./utils/base32.js\";\nimport { getCrc32 } from \"./utils/getCrc.js\";\nimport { sha224 } from '@noble/hashes/sha2';\nimport { bytesToHex, hexToBytes } from '@noble/hashes/utils';\nexport const JSON_KEY_PRINCIPAL = '__principal__';\nconst SELF_AUTHENTICATING_SUFFIX = 2;\nconst ANONYMOUS_SUFFIX = 4;\nconst MANAGEMENT_CANISTER_PRINCIPAL_TEXT_STR = 'aaaaa-aa';\nexport class Principal {\n  static anonymous() {\n    return new this(new Uint8Array([ANONYMOUS_SUFFIX]));\n  }\n  /**\n   * Utility method, returning the principal representing the management canister, decoded from the hex string `'aaaaa-aa'`\n   * @returns {Principal} principal of the management canister\n   */\n  static managementCanister() {\n    return this.fromText(MANAGEMENT_CANISTER_PRINCIPAL_TEXT_STR);\n  }\n  static selfAuthenticating(publicKey) {\n    const sha = sha224(publicKey);\n    return new this(new Uint8Array([...sha, SELF_AUTHENTICATING_SUFFIX]));\n  }\n  static from(other) {\n    if (typeof other === 'string') {\n      return Principal.fromText(other);\n    } else if (Object.getPrototypeOf(other) === Uint8Array.prototype) {\n      return new Principal(other);\n    } else if (Principal.isPrincipal(other)) {\n      return new Principal(other._arr);\n    }\n    throw new Error(`Impossible to convert ${JSON.stringify(other)} to Principal.`);\n  }\n  static fromHex(hex) {\n    return new this(hexToBytes(hex));\n  }\n  static fromText(text) {\n    let maybePrincipal = text;\n    // If formatted as JSON string, parse it first\n    if (text.includes(JSON_KEY_PRINCIPAL)) {\n      const obj = JSON.parse(text);\n      if (JSON_KEY_PRINCIPAL in obj) {\n        maybePrincipal = obj[JSON_KEY_PRINCIPAL];\n      }\n    }\n    const canisterIdNoDash = maybePrincipal.toLowerCase().replace(/-/g, '');\n    let arr = decode(canisterIdNoDash);\n    arr = arr.slice(4, arr.length);\n    const principal = new this(arr);\n    if (principal.toText() !== maybePrincipal) {\n      throw new Error(`Principal \"${principal.toText()}\" does not have a valid checksum (original value \"${maybePrincipal}\" may not be a valid Principal ID).`);\n    }\n    return principal;\n  }\n  static fromUint8Array(arr) {\n    return new this(arr);\n  }\n  static isPrincipal(other) {\n    return other instanceof Principal || typeof other === 'object' && other !== null && '_isPrincipal' in other && other['_isPrincipal'] === true && '_arr' in other && other['_arr'] instanceof Uint8Array;\n  }\n  constructor(_arr) {\n    this._arr = _arr;\n    this._isPrincipal = true;\n  }\n  isAnonymous() {\n    return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX;\n  }\n  toUint8Array() {\n    return this._arr;\n  }\n  toHex() {\n    return bytesToHex(this._arr).toUpperCase();\n  }\n  toText() {\n    const checksumArrayBuf = new ArrayBuffer(4);\n    const view = new DataView(checksumArrayBuf);\n    view.setUint32(0, getCrc32(this._arr));\n    const checksum = new Uint8Array(checksumArrayBuf);\n    const array = new Uint8Array([...checksum, ...this._arr]);\n    const result = encode(array);\n    const matches = result.match(/.{1,5}/g);\n    if (!matches) {\n      // This should only happen if there's no character, which is unreachable.\n      throw new Error();\n    }\n    return matches.join('-');\n  }\n  toString() {\n    return this.toText();\n  }\n  /**\n   * Serializes to JSON\n   * @returns {JsonnablePrincipal} a JSON object with a single key, {@link JSON_KEY_PRINCIPAL}, whose value is the principal as a string\n   */\n  toJSON() {\n    return {\n      [JSON_KEY_PRINCIPAL]: this.toText()\n    };\n  }\n  /**\n   * Utility method taking a Principal to compare against. Used for determining canister ranges in certificate verification\n   * @param {Principal} other - a {@link Principal} to compare\n   * @returns {'lt' | 'eq' | 'gt'} `'lt' | 'eq' | 'gt'` a string, representing less than, equal to, or greater than\n   */\n  compareTo(other) {\n    for (let i = 0; i < Math.min(this._arr.length, other._arr.length); i++) {\n      if (this._arr[i] < other._arr[i]) return 'lt';else if (this._arr[i] > other._arr[i]) return 'gt';\n    }\n    // Here, at least one principal is a prefix of the other principal (they could be the same)\n    if (this._arr.length < other._arr.length) return 'lt';\n    if (this._arr.length > other._arr.length) return 'gt';\n    return 'eq';\n  }\n  /**\n   * Utility method checking whether a provided Principal is less than or equal to the current one using the {@link Principal.compareTo} method\n   * @param other a {@link Principal} to compare\n   * @returns {boolean} boolean\n   */\n  ltEq(other) {\n    const cmp = this.compareTo(other);\n    return cmp == 'lt' || cmp == 'eq';\n  }\n  /**\n   * Utility method checking whether a provided Principal is greater than or equal to the current one using the {@link Principal.compareTo} method\n   * @param other a {@link Principal} to compare\n   * @returns {boolean} boolean\n   */\n  gtEq(other) {\n    const cmp = this.compareTo(other);\n    return cmp == 'gt' || cmp == 'eq';\n  }\n}","map":{"version":3,"names":["decode","encode","getCrc32","sha224","bytesToHex","hexToBytes","JSON_KEY_PRINCIPAL","SELF_AUTHENTICATING_SUFFIX","ANONYMOUS_SUFFIX","MANAGEMENT_CANISTER_PRINCIPAL_TEXT_STR","Principal","anonymous","Uint8Array","managementCanister","fromText","selfAuthenticating","publicKey","sha","from","other","Object","getPrototypeOf","prototype","isPrincipal","_arr","Error","JSON","stringify","fromHex","hex","text","maybePrincipal","includes","obj","parse","canisterIdNoDash","toLowerCase","replace","arr","slice","length","principal","toText","fromUint8Array","constructor","_isPrincipal","isAnonymous","byteLength","toUint8Array","toHex","toUpperCase","checksumArrayBuf","ArrayBuffer","view","DataView","setUint32","checksum","array","result","matches","match","join","toString","toJSON","compareTo","i","Math","min","ltEq","cmp","gtEq"],"sources":["D:\\Kshetra\\frontend\\node_modules\\@dfinity\\principal\\src\\principal.ts"],"sourcesContent":["import { decode, encode } from './utils/base32.ts';\nimport { getCrc32 } from './utils/getCrc.ts';\nimport { sha224 } from '@noble/hashes/sha2';\nimport { bytesToHex, hexToBytes } from '@noble/hashes/utils';\n\nexport const JSON_KEY_PRINCIPAL = '__principal__';\nconst SELF_AUTHENTICATING_SUFFIX = 2;\nconst ANONYMOUS_SUFFIX = 4;\n\nconst MANAGEMENT_CANISTER_PRINCIPAL_TEXT_STR = 'aaaaa-aa';\n\nexport type JsonnablePrincipal = {\n  [JSON_KEY_PRINCIPAL]: string;\n};\n\nexport class Principal {\n  public static anonymous(): Principal {\n    return new this(new Uint8Array([ANONYMOUS_SUFFIX]));\n  }\n\n  /**\n   * Utility method, returning the principal representing the management canister, decoded from the hex string `'aaaaa-aa'`\n   * @returns {Principal} principal of the management canister\n   */\n  public static managementCanister(): Principal {\n    return this.fromText(MANAGEMENT_CANISTER_PRINCIPAL_TEXT_STR);\n  }\n\n  public static selfAuthenticating(publicKey: Uint8Array): Principal {\n    const sha = sha224(publicKey);\n    return new this(new Uint8Array([...sha, SELF_AUTHENTICATING_SUFFIX]));\n  }\n\n  public static from(other: unknown): Principal {\n    if (typeof other === 'string') {\n      return Principal.fromText(other);\n    } else if (Object.getPrototypeOf(other) === Uint8Array.prototype) {\n      return new Principal(other as Uint8Array);\n    } else if (Principal.isPrincipal(other)) {\n      return new Principal(other._arr);\n    }\n\n    throw new Error(`Impossible to convert ${JSON.stringify(other)} to Principal.`);\n  }\n\n  public static fromHex(hex: string): Principal {\n    return new this(hexToBytes(hex));\n  }\n\n  public static fromText(text: string): Principal {\n    let maybePrincipal = text;\n    // If formatted as JSON string, parse it first\n    if (text.includes(JSON_KEY_PRINCIPAL)) {\n      const obj = JSON.parse(text);\n      if (JSON_KEY_PRINCIPAL in obj) {\n        maybePrincipal = obj[JSON_KEY_PRINCIPAL];\n      }\n    }\n\n    const canisterIdNoDash = maybePrincipal.toLowerCase().replace(/-/g, '');\n\n    let arr = decode(canisterIdNoDash);\n    arr = arr.slice(4, arr.length);\n\n    const principal = new this(arr);\n    if (principal.toText() !== maybePrincipal) {\n      throw new Error(\n        `Principal \"${principal.toText()}\" does not have a valid checksum (original value \"${maybePrincipal}\" may not be a valid Principal ID).`,\n      );\n    }\n\n    return principal;\n  }\n\n  public static fromUint8Array(arr: Uint8Array): Principal {\n    return new this(arr);\n  }\n\n  public static isPrincipal(other: unknown): other is Principal {\n    return (\n      other instanceof Principal ||\n      (typeof other === 'object' &&\n        other !== null &&\n        '_isPrincipal' in other &&\n        (other as { _isPrincipal: boolean })['_isPrincipal'] === true &&\n        '_arr' in other &&\n        (other as { _arr: Uint8Array })['_arr'] instanceof Uint8Array)\n    );\n  }\n\n  public readonly _isPrincipal = true;\n\n  protected constructor(private _arr: Uint8Array) {}\n\n  public isAnonymous(): boolean {\n    return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX;\n  }\n\n  public toUint8Array(): Uint8Array {\n    return this._arr;\n  }\n\n  public toHex(): string {\n    return bytesToHex(this._arr).toUpperCase();\n  }\n\n  public toText(): string {\n    const checksumArrayBuf = new ArrayBuffer(4);\n    const view = new DataView(checksumArrayBuf);\n    view.setUint32(0, getCrc32(this._arr));\n    const checksum = new Uint8Array(checksumArrayBuf);\n\n    const array = new Uint8Array([...checksum, ...this._arr]);\n\n    const result = encode(array);\n    const matches = result.match(/.{1,5}/g);\n    if (!matches) {\n      // This should only happen if there's no character, which is unreachable.\n      throw new Error();\n    }\n    return matches.join('-');\n  }\n\n  public toString(): string {\n    return this.toText();\n  }\n\n  /**\n   * Serializes to JSON\n   * @returns {JsonnablePrincipal} a JSON object with a single key, {@link JSON_KEY_PRINCIPAL}, whose value is the principal as a string\n   */\n  public toJSON(): JsonnablePrincipal {\n    return { [JSON_KEY_PRINCIPAL]: this.toText() };\n  }\n\n  /**\n   * Utility method taking a Principal to compare against. Used for determining canister ranges in certificate verification\n   * @param {Principal} other - a {@link Principal} to compare\n   * @returns {'lt' | 'eq' | 'gt'} `'lt' | 'eq' | 'gt'` a string, representing less than, equal to, or greater than\n   */\n  public compareTo(other: Principal): 'lt' | 'eq' | 'gt' {\n    for (let i = 0; i < Math.min(this._arr.length, other._arr.length); i++) {\n      if (this._arr[i] < other._arr[i]) return 'lt';\n      else if (this._arr[i] > other._arr[i]) return 'gt';\n    }\n    // Here, at least one principal is a prefix of the other principal (they could be the same)\n    if (this._arr.length < other._arr.length) return 'lt';\n    if (this._arr.length > other._arr.length) return 'gt';\n    return 'eq';\n  }\n\n  /**\n   * Utility method checking whether a provided Principal is less than or equal to the current one using the {@link Principal.compareTo} method\n   * @param other a {@link Principal} to compare\n   * @returns {boolean} boolean\n   */\n  public ltEq(other: Principal): boolean {\n    const cmp = this.compareTo(other);\n    return cmp == 'lt' || cmp == 'eq';\n  }\n\n  /**\n   * Utility method checking whether a provided Principal is greater than or equal to the current one using the {@link Principal.compareTo} method\n   * @param other a {@link Principal} to compare\n   * @returns {boolean} boolean\n   */\n  public gtEq(other: Principal): boolean {\n    const cmp = this.compareTo(other);\n    return cmp == 'gt' || cmp == 'eq';\n  }\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,MAAM,QAAQ,mBAAmB;AAClD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,UAAU,EAAEC,UAAU,QAAQ,qBAAqB;AAE5D,OAAO,MAAMC,kBAAkB,GAAG,eAAe;AACjD,MAAMC,0BAA0B,GAAG,CAAC;AACpC,MAAMC,gBAAgB,GAAG,CAAC;AAE1B,MAAMC,sCAAsC,GAAG,UAAU;AAMzD,OAAM,MAAOC,SAAS;EACb,OAAOC,SAASA,CAAA;IACrB,OAAO,IAAI,IAAI,CAAC,IAAIC,UAAU,CAAC,CAACJ,gBAAgB,CAAC,CAAC,CAAC;EACrD;EAEA;;;;EAIO,OAAOK,kBAAkBA,CAAA;IAC9B,OAAO,IAAI,CAACC,QAAQ,CAACL,sCAAsC,CAAC;EAC9D;EAEO,OAAOM,kBAAkBA,CAACC,SAAqB;IACpD,MAAMC,GAAG,GAAGd,MAAM,CAACa,SAAS,CAAC;IAC7B,OAAO,IAAI,IAAI,CAAC,IAAIJ,UAAU,CAAC,CAAC,GAAGK,GAAG,EAAEV,0BAA0B,CAAC,CAAC,CAAC;EACvE;EAEO,OAAOW,IAAIA,CAACC,KAAc;IAC/B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAOT,SAAS,CAACI,QAAQ,CAACK,KAAK,CAAC;IAClC,CAAC,MAAM,IAAIC,MAAM,CAACC,cAAc,CAACF,KAAK,CAAC,KAAKP,UAAU,CAACU,SAAS,EAAE;MAChE,OAAO,IAAIZ,SAAS,CAACS,KAAmB,CAAC;IAC3C,CAAC,MAAM,IAAIT,SAAS,CAACa,WAAW,CAACJ,KAAK,CAAC,EAAE;MACvC,OAAO,IAAIT,SAAS,CAACS,KAAK,CAACK,IAAI,CAAC;IAClC;IAEA,MAAM,IAAIC,KAAK,CAAC,yBAAyBC,IAAI,CAACC,SAAS,CAACR,KAAK,CAAC,gBAAgB,CAAC;EACjF;EAEO,OAAOS,OAAOA,CAACC,GAAW;IAC/B,OAAO,IAAI,IAAI,CAACxB,UAAU,CAACwB,GAAG,CAAC,CAAC;EAClC;EAEO,OAAOf,QAAQA,CAACgB,IAAY;IACjC,IAAIC,cAAc,GAAGD,IAAI;IACzB;IACA,IAAIA,IAAI,CAACE,QAAQ,CAAC1B,kBAAkB,CAAC,EAAE;MACrC,MAAM2B,GAAG,GAAGP,IAAI,CAACQ,KAAK,CAACJ,IAAI,CAAC;MAC5B,IAAIxB,kBAAkB,IAAI2B,GAAG,EAAE;QAC7BF,cAAc,GAAGE,GAAG,CAAC3B,kBAAkB,CAAC;MAC1C;IACF;IAEA,MAAM6B,gBAAgB,GAAGJ,cAAc,CAACK,WAAW,EAAE,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;IAEvE,IAAIC,GAAG,GAAGtC,MAAM,CAACmC,gBAAgB,CAAC;IAClCG,GAAG,GAAGA,GAAG,CAACC,KAAK,CAAC,CAAC,EAAED,GAAG,CAACE,MAAM,CAAC;IAE9B,MAAMC,SAAS,GAAG,IAAI,IAAI,CAACH,GAAG,CAAC;IAC/B,IAAIG,SAAS,CAACC,MAAM,EAAE,KAAKX,cAAc,EAAE;MACzC,MAAM,IAAIN,KAAK,CACb,cAAcgB,SAAS,CAACC,MAAM,EAAE,qDAAqDX,cAAc,qCAAqC,CACzI;IACH;IAEA,OAAOU,SAAS;EAClB;EAEO,OAAOE,cAAcA,CAACL,GAAe;IAC1C,OAAO,IAAI,IAAI,CAACA,GAAG,CAAC;EACtB;EAEO,OAAOf,WAAWA,CAACJ,KAAc;IACtC,OACEA,KAAK,YAAYT,SAAS,IACzB,OAAOS,KAAK,KAAK,QAAQ,IACxBA,KAAK,KAAK,IAAI,IACd,cAAc,IAAIA,KAAK,IACtBA,KAAmC,CAAC,cAAc,CAAC,KAAK,IAAI,IAC7D,MAAM,IAAIA,KAAK,IACdA,KAA8B,CAAC,MAAM,CAAC,YAAYP,UAAW;EAEpE;EAIAgC,YAA8BpB,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFlB,KAAAqB,YAAY,GAAG,IAAI;EAEc;EAE1CC,WAAWA,CAAA;IAChB,OAAO,IAAI,CAACtB,IAAI,CAACuB,UAAU,KAAK,CAAC,IAAI,IAAI,CAACvB,IAAI,CAAC,CAAC,CAAC,KAAKhB,gBAAgB;EACxE;EAEOwC,YAAYA,CAAA;IACjB,OAAO,IAAI,CAACxB,IAAI;EAClB;EAEOyB,KAAKA,CAAA;IACV,OAAO7C,UAAU,CAAC,IAAI,CAACoB,IAAI,CAAC,CAAC0B,WAAW,EAAE;EAC5C;EAEOR,MAAMA,CAAA;IACX,MAAMS,gBAAgB,GAAG,IAAIC,WAAW,CAAC,CAAC,CAAC;IAC3C,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAACH,gBAAgB,CAAC;IAC3CE,IAAI,CAACE,SAAS,CAAC,CAAC,EAAErD,QAAQ,CAAC,IAAI,CAACsB,IAAI,CAAC,CAAC;IACtC,MAAMgC,QAAQ,GAAG,IAAI5C,UAAU,CAACuC,gBAAgB,CAAC;IAEjD,MAAMM,KAAK,GAAG,IAAI7C,UAAU,CAAC,CAAC,GAAG4C,QAAQ,EAAE,GAAG,IAAI,CAAChC,IAAI,CAAC,CAAC;IAEzD,MAAMkC,MAAM,GAAGzD,MAAM,CAACwD,KAAK,CAAC;IAC5B,MAAME,OAAO,GAAGD,MAAM,CAACE,KAAK,CAAC,SAAS,CAAC;IACvC,IAAI,CAACD,OAAO,EAAE;MACZ;MACA,MAAM,IAAIlC,KAAK,EAAE;IACnB;IACA,OAAOkC,OAAO,CAACE,IAAI,CAAC,GAAG,CAAC;EAC1B;EAEOC,QAAQA,CAAA;IACb,OAAO,IAAI,CAACpB,MAAM,EAAE;EACtB;EAEA;;;;EAIOqB,MAAMA,CAAA;IACX,OAAO;MAAE,CAACzD,kBAAkB,GAAG,IAAI,CAACoC,MAAM;IAAE,CAAE;EAChD;EAEA;;;;;EAKOsB,SAASA,CAAC7C,KAAgB;IAC/B,KAAK,IAAI8C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC3C,IAAI,CAACgB,MAAM,EAAErB,KAAK,CAACK,IAAI,CAACgB,MAAM,CAAC,EAAEyB,CAAC,EAAE,EAAE;MACtE,IAAI,IAAI,CAACzC,IAAI,CAACyC,CAAC,CAAC,GAAG9C,KAAK,CAACK,IAAI,CAACyC,CAAC,CAAC,EAAE,OAAO,IAAI,CAAC,KACzC,IAAI,IAAI,CAACzC,IAAI,CAACyC,CAAC,CAAC,GAAG9C,KAAK,CAACK,IAAI,CAACyC,CAAC,CAAC,EAAE,OAAO,IAAI;IACpD;IACA;IACA,IAAI,IAAI,CAACzC,IAAI,CAACgB,MAAM,GAAGrB,KAAK,CAACK,IAAI,CAACgB,MAAM,EAAE,OAAO,IAAI;IACrD,IAAI,IAAI,CAAChB,IAAI,CAACgB,MAAM,GAAGrB,KAAK,CAACK,IAAI,CAACgB,MAAM,EAAE,OAAO,IAAI;IACrD,OAAO,IAAI;EACb;EAEA;;;;;EAKO4B,IAAIA,CAACjD,KAAgB;IAC1B,MAAMkD,GAAG,GAAG,IAAI,CAACL,SAAS,CAAC7C,KAAK,CAAC;IACjC,OAAOkD,GAAG,IAAI,IAAI,IAAIA,GAAG,IAAI,IAAI;EACnC;EAEA;;;;;EAKOC,IAAIA,CAACnD,KAAgB;IAC1B,MAAMkD,GAAG,GAAG,IAAI,CAACL,SAAS,CAAC7C,KAAK,CAAC;IACjC,OAAOkD,GAAG,IAAI,IAAI,IAAIA,GAAG,IAAI,IAAI;EACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}