{"ast":null,"code":"import { Principal } from '@dfinity/principal';\nimport * as cbor from '@dfinity/cbor';\nimport { CborDecodeErrorCode, CborEncodeErrorCode, InputError } from \"./errors.js\";\nimport { Expiry } from \"./agent/index.js\";\n/**\n * Used to extend classes that need to provide a custom value for the CBOR encoding process.\n */\nexport class ToCborValue {}\nfunction hasCborValueMethod(value) {\n  return typeof value === 'object' && value !== null && 'toCborValue' in value;\n}\n/**\n * Encode a JavaScript value into CBOR. If the value is an instance of {@link ToCborValue},\n * the {@link ToCborValue.toCborValue} method will be called to get the value to encode.\n * @param value The value to encode\n */\nexport function encode(value) {\n  try {\n    return cbor.encodeWithSelfDescribedTag(value, value => {\n      if (Principal.isPrincipal(value)) {\n        return value.toUint8Array();\n      }\n      if (Expiry.isExpiry(value)) {\n        return value.toBigInt();\n      }\n      if (hasCborValueMethod(value)) {\n        return value.toCborValue();\n      }\n      return value;\n    });\n  } catch (error) {\n    throw InputError.fromCode(new CborEncodeErrorCode(error, value));\n  }\n}\n/**\n * Decode a CBOR encoded value into a JavaScript value.\n * @param input The CBOR encoded value\n */\nexport function decode(input) {\n  try {\n    return cbor.decode(input);\n  } catch (error) {\n    throw InputError.fromCode(new CborDecodeErrorCode(error, input));\n  }\n}\n// Not strictly necessary, we're just keeping it for backwards compatibility.\nexport const Cbor = {\n  encode,\n  decode\n};","map":{"version":3,"names":["Principal","cbor","CborDecodeErrorCode","CborEncodeErrorCode","InputError","Expiry","ToCborValue","hasCborValueMethod","value","encode","encodeWithSelfDescribedTag","isPrincipal","toUint8Array","isExpiry","toBigInt","toCborValue","error","fromCode","decode","input","Cbor"],"sources":["D:\\Kshetra\\frontend\\node_modules\\@dfinity\\agent\\src\\cbor.ts"],"sourcesContent":["import { Principal } from '@dfinity/principal';\nimport * as cbor from '@dfinity/cbor';\nimport { CborDecodeErrorCode, CborEncodeErrorCode, InputError } from './errors.ts';\nimport { Expiry } from './agent/index.ts';\n\n/**\n * Used to extend classes that need to provide a custom value for the CBOR encoding process.\n */\nexport abstract class ToCborValue {\n  /**\n   * Returns a value that can be encoded with CBOR. Typically called in the replacer function of the {@link encode} function.\n   */\n  public abstract toCborValue(): cbor.CborValue;\n}\n\nfunction hasCborValueMethod(value: unknown): value is ToCborValue {\n  return typeof value === 'object' && value !== null && 'toCborValue' in value;\n}\n\n/**\n * Encode a JavaScript value into CBOR. If the value is an instance of {@link ToCborValue},\n * the {@link ToCborValue.toCborValue} method will be called to get the value to encode.\n * @param value The value to encode\n */\nexport function encode(value: unknown): Uint8Array {\n  try {\n    return cbor.encodeWithSelfDescribedTag(value, value => {\n      if (Principal.isPrincipal(value)) {\n        return value.toUint8Array();\n      }\n\n      if (Expiry.isExpiry(value)) {\n        return value.toBigInt();\n      }\n\n      if (hasCborValueMethod(value)) {\n        return value.toCborValue();\n      }\n\n      return value;\n    });\n  } catch (error) {\n    throw InputError.fromCode(new CborEncodeErrorCode(error, value));\n  }\n}\n\n/**\n * Decode a CBOR encoded value into a JavaScript value.\n * @param input The CBOR encoded value\n */\nexport function decode<T>(input: Uint8Array): T {\n  try {\n    return cbor.decode(input) as T;\n  } catch (error) {\n    throw InputError.fromCode(new CborDecodeErrorCode(error, input));\n  }\n}\n\n// Not strictly necessary, we're just keeping it for backwards compatibility.\nexport const Cbor = {\n  encode,\n  decode,\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,oBAAoB;AAC9C,OAAO,KAAKC,IAAI,MAAM,eAAe;AACrC,SAASC,mBAAmB,EAAEC,mBAAmB,EAAEC,UAAU,QAAQ,aAAa;AAClF,SAASC,MAAM,QAAQ,kBAAkB;AAEzC;;;AAGA,OAAM,MAAgBC,WAAW;AAOjC,SAASC,kBAAkBA,CAACC,KAAc;EACxC,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,IAAI,aAAa,IAAIA,KAAK;AAC9E;AAEA;;;;;AAKA,OAAM,SAAUC,MAAMA,CAACD,KAAc;EACnC,IAAI;IACF,OAAOP,IAAI,CAACS,0BAA0B,CAACF,KAAK,EAAEA,KAAK,IAAG;MACpD,IAAIR,SAAS,CAACW,WAAW,CAACH,KAAK,CAAC,EAAE;QAChC,OAAOA,KAAK,CAACI,YAAY,EAAE;MAC7B;MAEA,IAAIP,MAAM,CAACQ,QAAQ,CAACL,KAAK,CAAC,EAAE;QAC1B,OAAOA,KAAK,CAACM,QAAQ,EAAE;MACzB;MAEA,IAAIP,kBAAkB,CAACC,KAAK,CAAC,EAAE;QAC7B,OAAOA,KAAK,CAACO,WAAW,EAAE;MAC5B;MAEA,OAAOP,KAAK;IACd,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACd,MAAMZ,UAAU,CAACa,QAAQ,CAAC,IAAId,mBAAmB,CAACa,KAAK,EAAER,KAAK,CAAC,CAAC;EAClE;AACF;AAEA;;;;AAIA,OAAM,SAAUU,MAAMA,CAAIC,KAAiB;EACzC,IAAI;IACF,OAAOlB,IAAI,CAACiB,MAAM,CAACC,KAAK,CAAM;EAChC,CAAC,CAAC,OAAOH,KAAK,EAAE;IACd,MAAMZ,UAAU,CAACa,QAAQ,CAAC,IAAIf,mBAAmB,CAACc,KAAK,EAAEG,KAAK,CAAC,CAAC;EAClE;AACF;AAEA;AACA,OAAO,MAAMC,IAAI,GAAG;EAClBX,MAAM;EACNS;CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}