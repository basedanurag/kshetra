{"ast":null,"code":"import { Actor, HttpAgent } from '@dfinity/agent';\n\n// Types matching your backend canister\n\n// Interface matching your backend canister methods\n\nclass LandRegistryService {\n  constructor() {\n    this.actor = null;\n    this.agent = null;\n    this.canisterId = void 0;\n    this.canisterId = process.env.REACT_APP_LAND_REGISTRY_CANISTER_ID || 'rdmx6-jaaaa-aaaah-qcaiq-cai';\n  }\n  async init(authClient) {\n    try {\n      const host = process.env.REACT_APP_IC_HOST || 'https://ic0.app';\n      this.agent = new HttpAgent({\n        host\n      });\n\n      // Use authenticated identity if available\n      if (authClient) {\n        const identity = authClient.getIdentity();\n        this.agent = new HttpAgent({\n          host,\n          identity\n        });\n      }\n\n      // Fetch root key for local development\n      if (process.env.NODE_ENV === 'development') {\n        await this.agent.fetchRootKey();\n      }\n\n      // Create actor with the canister interface\n      this.actor = Actor.createActor(this.getIDL(), {\n        agent: this.agent,\n        canisterId: this.canisterId\n      });\n    } catch (error) {\n      console.error('Failed to initialize LandRegistryService:', error);\n      throw error;\n    }\n  }\n  getIDL() {\n    // This would normally be generated from your .did file\n    // For now, we'll use a simplified interface\n    return ({\n      IDL\n    }) => {\n      const LandParcel = IDL.Record({\n        id: IDL.Text,\n        owner: IDL.Principal,\n        coordinates: IDL.Record({\n          latitude: IDL.Float64,\n          longitude: IDL.Float64\n        }),\n        area: IDL.Float64,\n        land_use: IDL.Text,\n        zone: IDL.Text,\n        survey_number: IDL.Text,\n        village: IDL.Text,\n        district: IDL.Text,\n        state: IDL.Text,\n        registration_date: IDL.Int,\n        last_updated: IDL.Int,\n        documents: IDL.Vec(IDL.Text),\n        metadata: IDL.Record({})\n      });\n      const TransferRequest = IDL.Record({\n        parcel_id: IDL.Text,\n        new_owner: IDL.Principal,\n        transfer_fee: IDL.Nat,\n        documents: IDL.Vec(IDL.Text),\n        reason: IDL.Text\n      });\n      const UserProfile = IDL.Record({\n        principal: IDL.Principal,\n        name: IDL.Text,\n        role: IDL.Variant({\n          Admin: IDL.Null,\n          User: IDL.Null\n        }),\n        registration_date: IDL.Int,\n        contact_info: IDL.Record({})\n      });\n      const Result = IDL.Variant({\n        Ok: IDL.Text,\n        Err: IDL.Text\n      });\n      return IDL.Service({\n        // Query methods\n        get_parcel: IDL.Func([IDL.Text], [IDL.Opt(LandParcel)], ['query']),\n        get_parcels_by_owner: IDL.Func([IDL.Principal], [IDL.Vec(LandParcel)], ['query']),\n        get_all_parcels: IDL.Func([], [IDL.Vec(LandParcel)], ['query']),\n        search_parcels: IDL.Func([IDL.Record({})], [IDL.Vec(LandParcel)], ['query']),\n        get_user_profile: IDL.Func([IDL.Principal], [IDL.Opt(UserProfile)], ['query']),\n        get_transfer_requests: IDL.Func([], [IDL.Vec(TransferRequest)], ['query']),\n        get_pending_transfers: IDL.Func([], [IDL.Vec(TransferRequest)], ['query']),\n        verify_ownership: IDL.Func([IDL.Text, IDL.Principal], [IDL.Bool], ['query']),\n        // Update methods\n        register_parcel: IDL.Func([LandParcel], [Result], []),\n        transfer_ownership: IDL.Func([TransferRequest], [Result], []),\n        approve_transfer: IDL.Func([IDL.Text, IDL.Principal], [Result], []),\n        reject_transfer: IDL.Func([IDL.Text, IDL.Text], [Result], []),\n        update_parcel: IDL.Func([IDL.Text, LandParcel], [Result], []),\n        create_user_profile: IDL.Func([UserProfile], [Result], []),\n        update_user_profile: IDL.Func([UserProfile], [Result], [])\n      });\n    };\n  }\n\n  // Parcel management methods\n  async getParcel(id) {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.get_parcel(id);\n  }\n  async getParcelsByOwner(owner) {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.get_parcels_by_owner(owner);\n  }\n  async getAllParcels() {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.get_all_parcels();\n  }\n  async searchParcels(filters) {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.search_parcels(filters);\n  }\n  async registerParcel(parcel) {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.register_parcel(parcel);\n  }\n  async updateParcel(id, updates) {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.update_parcel(id, updates);\n  }\n\n  // Transfer management methods\n  async transferOwnership(request) {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.transfer_ownership(request);\n  }\n  async approveTransfer(parcelId, newOwner) {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.approve_transfer(parcelId, newOwner);\n  }\n  async rejectTransfer(parcelId, reason) {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.reject_transfer(parcelId, reason);\n  }\n  async getTransferRequests() {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.get_transfer_requests();\n  }\n  async getPendingTransfers() {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.get_pending_transfers();\n  }\n\n  // User management methods\n  async getUserProfile(principal) {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.get_user_profile(principal);\n  }\n  async createUserProfile(profile) {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.create_user_profile(profile);\n  }\n  async updateUserProfile(updates) {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.update_user_profile(updates);\n  }\n\n  // Utility methods\n  async verifyOwnership(parcelId, owner) {\n    if (!this.actor) throw new Error('Service not initialized');\n    return await this.actor.verify_ownership(parcelId, owner);\n  }\n\n  // Helper method to format area in different units\n  formatArea(area, unit = 'sqm') {\n    switch (unit) {\n      case 'acre':\n        return `${(area * 0.000247105).toFixed(2)} acres`;\n      case 'hectare':\n        return `${(area * 0.0001).toFixed(2)} hectares`;\n      default:\n        return `${area.toFixed(2)} sq.m`;\n    }\n  }\n\n  // Helper method to format dates\n  formatDate(timestamp) {\n    return new Date(Number(timestamp) / 1000000).toLocaleDateString();\n  }\n\n  // Helper method to generate parcel display ID\n  getParcelDisplayId(parcel) {\n    return `${parcel.state.substring(0, 2).toUpperCase()}-${parcel.district.substring(0, 3).toUpperCase()}-${parcel.survey_number}`;\n  }\n}\n\n// Export singleton instance\nexport const landRegistryService = new LandRegistryService();\nexport default landRegistryService;","map":{"version":3,"names":["Actor","HttpAgent","LandRegistryService","constructor","actor","agent","canisterId","process","env","REACT_APP_LAND_REGISTRY_CANISTER_ID","init","authClient","host","REACT_APP_IC_HOST","identity","getIdentity","NODE_ENV","fetchRootKey","createActor","getIDL","error","console","IDL","LandParcel","Record","id","Text","owner","Principal","coordinates","latitude","Float64","longitude","area","land_use","zone","survey_number","village","district","state","registration_date","Int","last_updated","documents","Vec","metadata","TransferRequest","parcel_id","new_owner","transfer_fee","Nat","reason","UserProfile","principal","name","role","Variant","Admin","Null","User","contact_info","Result","Ok","Err","Service","get_parcel","Func","Opt","get_parcels_by_owner","get_all_parcels","search_parcels","get_user_profile","get_transfer_requests","get_pending_transfers","verify_ownership","Bool","register_parcel","transfer_ownership","approve_transfer","reject_transfer","update_parcel","create_user_profile","update_user_profile","getParcel","Error","getParcelsByOwner","getAllParcels","searchParcels","filters","registerParcel","parcel","updateParcel","updates","transferOwnership","request","approveTransfer","parcelId","newOwner","rejectTransfer","getTransferRequests","getPendingTransfers","getUserProfile","createUserProfile","profile","updateUserProfile","verifyOwnership","formatArea","unit","toFixed","formatDate","timestamp","Date","Number","toLocaleDateString","getParcelDisplayId","substring","toUpperCase","landRegistryService"],"sources":["D:/Kshetra/frontend/src/services/LandRegistryService.ts"],"sourcesContent":["import { Actor, HttpAgent } from '@dfinity/agent';\r\nimport Principal from '@dfinity/principal';\r\nimport { AuthClient } from '@dfinity/auth-client';\r\n\r\n// Types matching your backend canister\r\nexport interface LandParcel {\r\n  id: string;\r\n  owner: Principal;\r\n  coordinates: {\r\n    latitude: number;\r\n    longitude: number;\r\n  };\r\n  area: number;\r\n  land_use: string;\r\n  zone: string;\r\n  survey_number: string;\r\n  village: string;\r\n  district: string;\r\n  state: string;\r\n  registration_date: bigint;\r\n  last_updated: bigint;\r\n  documents: string[]; // IPFS hashes\r\n  metadata: Record<string, string>;\r\n}\r\n\r\nexport interface TransferRequest {\r\n  parcel_id: string;\r\n  new_owner: Principal;\r\n  transfer_fee: bigint;\r\n  documents: string[];\r\n  reason: string;\r\n}\r\n\r\nexport interface UserProfile {\r\n  principal: Principal;\r\n  name: string;\r\n  role: 'Admin' | 'User';\r\n  registration_date: bigint;\r\n  contact_info: Record<string, string>;\r\n}\r\n\r\n// Interface matching your backend canister methods\r\nexport interface LandRegistryActor {\r\n  // Query methods\r\n  get_parcel: (id: string) => Promise<LandParcel | null>;\r\n  get_parcels_by_owner: (owner: Principal) => Promise<LandParcel[]>;\r\n  get_all_parcels: () => Promise<LandParcel[]>;\r\n  search_parcels: (filters: Record<string, string>) => Promise<LandParcel[]>;\r\n  get_user_profile: (principal: Principal) => Promise<UserProfile | null>;\r\n  get_transfer_requests: () => Promise<TransferRequest[]>;\r\n  get_pending_transfers: () => Promise<TransferRequest[]>;\r\n  verify_ownership: (parcel_id: string, owner: Principal) => Promise<boolean>;\r\n  \r\n  // Update methods\r\n  register_parcel: (parcel: Omit<LandParcel, 'id' | 'registration_date' | 'last_updated'>) => Promise<{ Ok: string } | { Err: string }>;\r\n  transfer_ownership: (request: TransferRequest) => Promise<{ Ok: string } | { Err: string }>;\r\n  approve_transfer: (parcel_id: string, new_owner: Principal) => Promise<{ Ok: string } | { Err: string }>;\r\n  reject_transfer: (parcel_id: string, reason: string) => Promise<{ Ok: string } | { Err: string }>;\r\n  update_parcel: (id: string, updates: Partial<LandParcel>) => Promise<{ Ok: string } | { Err: string }>;\r\n  create_user_profile: (profile: Omit<UserProfile, 'principal' | 'registration_date'>) => Promise<{ Ok: string } | { Err: string }>;\r\n  update_user_profile: (updates: Partial<UserProfile>) => Promise<{ Ok: string } | { Err: string }>;\r\n}\r\n\r\nclass LandRegistryService {\r\n  private actor: LandRegistryActor | null = null;\r\n  private agent: HttpAgent | null = null;\r\n  private canisterId: string;\r\n\r\n  constructor() {\r\n    this.canisterId = process.env.REACT_APP_LAND_REGISTRY_CANISTER_ID || 'rdmx6-jaaaa-aaaah-qcaiq-cai';\r\n  }\r\n\r\n  async init(authClient?: AuthClient): Promise<void> {\r\n    try {\r\n      const host = process.env.REACT_APP_IC_HOST || 'https://ic0.app';\r\n      \r\n      this.agent = new HttpAgent({ host });\r\n      \r\n      // Use authenticated identity if available\r\n      if (authClient) {\r\n        const identity = authClient.getIdentity();\r\n        this.agent = new HttpAgent({ host, identity });\r\n      }\r\n\r\n      // Fetch root key for local development\r\n      if (process.env.NODE_ENV === 'development') {\r\n        await this.agent.fetchRootKey();\r\n      }\r\n\r\n      // Create actor with the canister interface\r\n      this.actor = Actor.createActor<LandRegistryActor>(this.getIDL(), {\r\n        agent: this.agent,\r\n        canisterId: this.canisterId,\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Failed to initialize LandRegistryService:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private getIDL() {\r\n    // This would normally be generated from your .did file\r\n    // For now, we'll use a simplified interface\r\n    return ({ IDL }: any) => {\r\n      const LandParcel = IDL.Record({\r\n        id: IDL.Text,\r\n        owner: IDL.Principal,\r\n        coordinates: IDL.Record({\r\n          latitude: IDL.Float64,\r\n          longitude: IDL.Float64,\r\n        }),\r\n        area: IDL.Float64,\r\n        land_use: IDL.Text,\r\n        zone: IDL.Text,\r\n        survey_number: IDL.Text,\r\n        village: IDL.Text,\r\n        district: IDL.Text,\r\n        state: IDL.Text,\r\n        registration_date: IDL.Int,\r\n        last_updated: IDL.Int,\r\n        documents: IDL.Vec(IDL.Text),\r\n        metadata: IDL.Record({}),\r\n      });\r\n\r\n      const TransferRequest = IDL.Record({\r\n        parcel_id: IDL.Text,\r\n        new_owner: IDL.Principal,\r\n        transfer_fee: IDL.Nat,\r\n        documents: IDL.Vec(IDL.Text),\r\n        reason: IDL.Text,\r\n      });\r\n\r\n      const UserProfile = IDL.Record({\r\n        principal: IDL.Principal,\r\n        name: IDL.Text,\r\n        role: IDL.Variant({ Admin: IDL.Null, User: IDL.Null }),\r\n        registration_date: IDL.Int,\r\n        contact_info: IDL.Record({}),\r\n      });\r\n\r\n      const Result = IDL.Variant({\r\n        Ok: IDL.Text,\r\n        Err: IDL.Text,\r\n      });\r\n\r\n      return IDL.Service({\r\n        // Query methods\r\n        get_parcel: IDL.Func([IDL.Text], [IDL.Opt(LandParcel)], ['query']),\r\n        get_parcels_by_owner: IDL.Func([IDL.Principal], [IDL.Vec(LandParcel)], ['query']),\r\n        get_all_parcels: IDL.Func([], [IDL.Vec(LandParcel)], ['query']),\r\n        search_parcels: IDL.Func([IDL.Record({})], [IDL.Vec(LandParcel)], ['query']),\r\n        get_user_profile: IDL.Func([IDL.Principal], [IDL.Opt(UserProfile)], ['query']),\r\n        get_transfer_requests: IDL.Func([], [IDL.Vec(TransferRequest)], ['query']),\r\n        get_pending_transfers: IDL.Func([], [IDL.Vec(TransferRequest)], ['query']),\r\n        verify_ownership: IDL.Func([IDL.Text, IDL.Principal], [IDL.Bool], ['query']),\r\n        \r\n        // Update methods\r\n        register_parcel: IDL.Func([LandParcel], [Result], []),\r\n        transfer_ownership: IDL.Func([TransferRequest], [Result], []),\r\n        approve_transfer: IDL.Func([IDL.Text, IDL.Principal], [Result], []),\r\n        reject_transfer: IDL.Func([IDL.Text, IDL.Text], [Result], []),\r\n        update_parcel: IDL.Func([IDL.Text, LandParcel], [Result], []),\r\n        create_user_profile: IDL.Func([UserProfile], [Result], []),\r\n        update_user_profile: IDL.Func([UserProfile], [Result], []),\r\n      });\r\n    };\r\n  }\r\n\r\n  // Parcel management methods\r\n  async getParcel(id: string): Promise<LandParcel | null> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.get_parcel(id);\r\n  }\r\n\r\n  async getParcelsByOwner(owner: Principal): Promise<LandParcel[]> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.get_parcels_by_owner(owner);\r\n  }\r\n\r\n  async getAllParcels(): Promise<LandParcel[]> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.get_all_parcels();\r\n  }\r\n\r\n  async searchParcels(filters: Record<string, string>): Promise<LandParcel[]> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.search_parcels(filters);\r\n  }\r\n\r\n  async registerParcel(parcel: Omit<LandParcel, 'id' | 'registration_date' | 'last_updated'>): Promise<{ Ok: string } | { Err: string }> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.register_parcel(parcel);\r\n  }\r\n\r\n  async updateParcel(id: string, updates: Partial<LandParcel>): Promise<{ Ok: string } | { Err: string }> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.update_parcel(id, updates);\r\n  }\r\n\r\n  // Transfer management methods\r\n  async transferOwnership(request: TransferRequest): Promise<{ Ok: string } | { Err: string }> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.transfer_ownership(request);\r\n  }\r\n\r\n  async approveTransfer(parcelId: string, newOwner: Principal): Promise<{ Ok: string } | { Err: string }> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.approve_transfer(parcelId, newOwner);\r\n  }\r\n\r\n  async rejectTransfer(parcelId: string, reason: string): Promise<{ Ok: string } | { Err: string }> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.reject_transfer(parcelId, reason);\r\n  }\r\n\r\n  async getTransferRequests(): Promise<TransferRequest[]> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.get_transfer_requests();\r\n  }\r\n\r\n  async getPendingTransfers(): Promise<TransferRequest[]> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.get_pending_transfers();\r\n  }\r\n\r\n  // User management methods\r\n  async getUserProfile(principal: Principal): Promise<UserProfile | null> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.get_user_profile(principal);\r\n  }\r\n\r\n  async createUserProfile(profile: Omit<UserProfile, 'principal' | 'registration_date'>): Promise<{ Ok: string } | { Err: string }> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.create_user_profile(profile);\r\n  }\r\n\r\n  async updateUserProfile(updates: Partial<UserProfile>): Promise<{ Ok: string } | { Err: string }> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.update_user_profile(updates);\r\n  }\r\n\r\n  // Utility methods\r\n  async verifyOwnership(parcelId: string, owner: Principal): Promise<boolean> {\r\n    if (!this.actor) throw new Error('Service not initialized');\r\n    return await this.actor.verify_ownership(parcelId, owner);\r\n  }\r\n\r\n  // Helper method to format area in different units\r\n  formatArea(area: number, unit: 'sqm' | 'acre' | 'hectare' = 'sqm'): string {\r\n    switch (unit) {\r\n      case 'acre':\r\n        return `${(area * 0.000247105).toFixed(2)} acres`;\r\n      case 'hectare':\r\n        return `${(area * 0.0001).toFixed(2)} hectares`;\r\n      default:\r\n        return `${area.toFixed(2)} sq.m`;\r\n    }\r\n  }\r\n\r\n  // Helper method to format dates\r\n  formatDate(timestamp: bigint): string {\r\n    return new Date(Number(timestamp) / 1000000).toLocaleDateString();\r\n  }\r\n\r\n  // Helper method to generate parcel display ID\r\n  getParcelDisplayId(parcel: LandParcel): string {\r\n    return `${parcel.state.substring(0, 2).toUpperCase()}-${parcel.district.substring(0, 3).toUpperCase()}-${parcel.survey_number}`;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const landRegistryService = new LandRegistryService();\r\nexport default landRegistryService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}