{"ast":null,"code":"// Mock backend declarations - replace with generated ones when dfx is available\n\n// Mock IDL factory - this should be generated by dfx\nexport const idlFactory = ({\n  IDL\n}) => {\n  const UserRole = IDL.Variant({\n    Admin: IDL.Null,\n    LandRegistrar: IDL.Null\n  });\n  const Coordinates = IDL.Record({\n    latitude: IDL.Float64,\n    longitude: IDL.Float64\n  });\n  const Result = IDL.Variant({\n    Ok: IDL.Null,\n    Err: IDL.Text\n  });\n  const Result_1 = IDL.Variant({\n    Ok: IDL.Nat64,\n    Err: IDL.Text\n  });\n  return IDL.Service({\n    get_user_roles: IDL.Func([IDL.Principal], [IDL.Vec(UserRole)], ['query']),\n    assign_role: IDL.Func([IDL.Principal, UserRole], [Result], []),\n    get_land_parcel: IDL.Func([IDL.Nat64], [IDL.Opt(IDL.Record({}))], ['query']),\n    get_parcels_by_owner: IDL.Func([IDL.Principal], [IDL.Vec(IDL.Record({}))], ['query']),\n    register_land_parcel: IDL.Func([IDL.Text, IDL.Float64, Coordinates, IDL.Vec(IDL.Text)], [Result_1], [])\n  });\n};\nexport const init = ({\n  IDL\n}) => {\n  return [];\n};","map":{"version":3,"names":["idlFactory","IDL","UserRole","Variant","Admin","Null","LandRegistrar","Coordinates","Record","latitude","Float64","longitude","Result","Ok","Err","Text","Result_1","Nat64","Service","get_user_roles","Func","Principal","Vec","assign_role","get_land_parcel","Opt","get_parcels_by_owner","register_land_parcel","init"],"sources":["D:/Kshetra/frontend/src/declarations/backend/index.ts"],"sourcesContent":["// Mock backend declarations - replace with generated ones when dfx is available\r\nimport { Principal } from '@dfinity/principal';\r\n\r\nexport interface BackendService {\r\n  get_user_roles: (principal: Principal) => Promise<string[]>;\r\n  assign_role: (principal: Principal, role: string) => Promise<{ Ok?: null; Err?: string }>;\r\n  get_land_parcel: (tokenId: bigint) => Promise<any>;\r\n  get_parcels_by_owner: (owner: Principal) => Promise<any[]>;\r\n  register_land_parcel: (\r\n    location: string,\r\n    sizeSqMeters: number,\r\n    coordinates: { latitude: number; longitude: number },\r\n    documentHashes: string[]\r\n  ) => Promise<{ Ok?: bigint; Err?: string }>;\r\n}\r\n\r\n// Mock IDL factory - this should be generated by dfx\r\nexport const idlFactory = ({ IDL }: any) => {\r\n  const UserRole = IDL.Variant({ \r\n    Admin: IDL.Null, \r\n    LandRegistrar: IDL.Null \r\n  });\r\n  \r\n  const Coordinates = IDL.Record({\r\n    latitude: IDL.Float64,\r\n    longitude: IDL.Float64,\r\n  });\r\n  \r\n  const Result = IDL.Variant({ \r\n    Ok: IDL.Null, \r\n    Err: IDL.Text \r\n  });\r\n  \r\n  const Result_1 = IDL.Variant({ \r\n    Ok: IDL.Nat64, \r\n    Err: IDL.Text \r\n  });\r\n\r\n  return IDL.Service({\r\n    get_user_roles: IDL.Func([IDL.Principal], [IDL.Vec(UserRole)], ['query']),\r\n    assign_role: IDL.Func([IDL.Principal, UserRole], [Result], []),\r\n    get_land_parcel: IDL.Func([IDL.Nat64], [IDL.Opt(IDL.Record({}))], ['query']),\r\n    get_parcels_by_owner: IDL.Func([IDL.Principal], [IDL.Vec(IDL.Record({}))], ['query']),\r\n    register_land_parcel: IDL.Func([IDL.Text, IDL.Float64, Coordinates, IDL.Vec(IDL.Text)], [Result_1], []),\r\n  });\r\n};\r\n\r\nexport const init = ({ IDL }: any) => { return []; };\r\n"],"mappings":"AAAA;;AAgBA;AACA,OAAO,MAAMA,UAAU,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAC1C,MAAMC,QAAQ,GAAGD,GAAG,CAACE,OAAO,CAAC;IAC3BC,KAAK,EAAEH,GAAG,CAACI,IAAI;IACfC,aAAa,EAAEL,GAAG,CAACI;EACrB,CAAC,CAAC;EAEF,MAAME,WAAW,GAAGN,GAAG,CAACO,MAAM,CAAC;IAC7BC,QAAQ,EAAER,GAAG,CAACS,OAAO;IACrBC,SAAS,EAAEV,GAAG,CAACS;EACjB,CAAC,CAAC;EAEF,MAAME,MAAM,GAAGX,GAAG,CAACE,OAAO,CAAC;IACzBU,EAAE,EAAEZ,GAAG,CAACI,IAAI;IACZS,GAAG,EAAEb,GAAG,CAACc;EACX,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAGf,GAAG,CAACE,OAAO,CAAC;IAC3BU,EAAE,EAAEZ,GAAG,CAACgB,KAAK;IACbH,GAAG,EAAEb,GAAG,CAACc;EACX,CAAC,CAAC;EAEF,OAAOd,GAAG,CAACiB,OAAO,CAAC;IACjBC,cAAc,EAAElB,GAAG,CAACmB,IAAI,CAAC,CAACnB,GAAG,CAACoB,SAAS,CAAC,EAAE,CAACpB,GAAG,CAACqB,GAAG,CAACpB,QAAQ,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;IACzEqB,WAAW,EAAEtB,GAAG,CAACmB,IAAI,CAAC,CAACnB,GAAG,CAACoB,SAAS,EAAEnB,QAAQ,CAAC,EAAE,CAACU,MAAM,CAAC,EAAE,EAAE,CAAC;IAC9DY,eAAe,EAAEvB,GAAG,CAACmB,IAAI,CAAC,CAACnB,GAAG,CAACgB,KAAK,CAAC,EAAE,CAAChB,GAAG,CAACwB,GAAG,CAACxB,GAAG,CAACO,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;IAC5EkB,oBAAoB,EAAEzB,GAAG,CAACmB,IAAI,CAAC,CAACnB,GAAG,CAACoB,SAAS,CAAC,EAAE,CAACpB,GAAG,CAACqB,GAAG,CAACrB,GAAG,CAACO,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;IACrFmB,oBAAoB,EAAE1B,GAAG,CAACmB,IAAI,CAAC,CAACnB,GAAG,CAACc,IAAI,EAAEd,GAAG,CAACS,OAAO,EAAEH,WAAW,EAAEN,GAAG,CAACqB,GAAG,CAACrB,GAAG,CAACc,IAAI,CAAC,CAAC,EAAE,CAACC,QAAQ,CAAC,EAAE,EAAE;EACxG,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMY,IAAI,GAAGA,CAAC;EAAE3B;AAAS,CAAC,KAAK;EAAE,OAAO,EAAE;AAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}