{"ast":null,"code":"/**\n * Concatenate multiple Uint8Arrays.\n * @param uint8Arrays The Uint8Arrays to concatenate.\n */\nexport function concat() {\n  for (var _len = arguments.length, uint8Arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    uint8Arrays[_key] = arguments[_key];\n  }\n  const result = new Uint8Array(uint8Arrays.reduce((acc, curr) => acc + curr.byteLength, 0));\n  let index = 0;\n  for (const b of uint8Arrays) {\n    result.set(b, index);\n    index += b.byteLength;\n  }\n  return result;\n}\n/**\n * A class that abstracts a pipe-like Uint8Array.\n */\nexport class PipeArrayBuffer {\n  /**\n   * Save a checkpoint of the reading view (for backtracking)\n   */\n  save() {\n    return this._view;\n  }\n  /**\n   * Restore a checkpoint of the reading view (for backtracking)\n   * @param checkPoint a previously saved checkpoint\n   */\n  restore(checkPoint) {\n    if (!(checkPoint instanceof Uint8Array)) {\n      throw new Error('Checkpoint must be a Uint8Array');\n    }\n    this._view = checkPoint;\n  }\n  /**\n   * Creates a new instance of a pipe\n   * @param buffer an optional buffer to start with\n   * @param length an optional amount of bytes to use for the length.\n   */\n  constructor(buffer) {\n    let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : buffer?.byteLength || 0;\n    if (buffer && !(buffer instanceof Uint8Array)) {\n      try {\n        buffer = uint8FromBufLike(buffer);\n      } catch {\n        throw new Error('Buffer must be a Uint8Array');\n      }\n    }\n    if (length < 0 || !Number.isInteger(length)) {\n      throw new Error('Length must be a non-negative integer');\n    }\n    if (buffer && length > buffer.byteLength) {\n      throw new Error('Length cannot exceed buffer length');\n    }\n    this._buffer = buffer || new Uint8Array(0);\n    this._view = new Uint8Array(this._buffer.buffer, 0, length);\n  }\n  get buffer() {\n    // Return a copy of the buffer.\n    return this._view.slice();\n  }\n  get byteLength() {\n    return this._view.byteLength;\n  }\n  /**\n   * Read `num` number of bytes from the front of the pipe.\n   * @param num The number of bytes to read.\n   */\n  read(num) {\n    const result = this._view.subarray(0, num);\n    this._view = this._view.subarray(num);\n    return result.slice();\n  }\n  readUint8() {\n    if (this._view.byteLength === 0) {\n      return undefined;\n    }\n    const result = this._view[0];\n    this._view = this._view.subarray(1);\n    return result;\n  }\n  /**\n   * Write a buffer to the end of the pipe.\n   * @param buf The bytes to write.\n   */\n  write(buf) {\n    if (!(buf instanceof Uint8Array)) {\n      throw new Error('Buffer must be a Uint8Array');\n    }\n    const offset = this._view.byteLength;\n    if (this._view.byteOffset + this._view.byteLength + buf.byteLength >= this._buffer.byteLength) {\n      // Alloc grow the view to include the new bytes.\n      this.alloc(buf.byteLength);\n    } else {\n      // Update the view to include the new bytes.\n      this._view = new Uint8Array(this._buffer.buffer, this._view.byteOffset, this._view.byteLength + buf.byteLength);\n    }\n    this._view.set(buf, offset);\n  }\n  /**\n   * Whether or not there is more data to read from the buffer\n   */\n  get end() {\n    return this._view.byteLength === 0;\n  }\n  /**\n   * Allocate a fixed amount of memory in the buffer. This does not affect the view.\n   * @param amount A number of bytes to add to the buffer.\n   */\n  alloc(amount) {\n    if (amount <= 0 || !Number.isInteger(amount)) {\n      throw new Error('Amount must be a positive integer');\n    }\n    // Add a little bit of exponential growth.\n    const b = new Uint8Array((this._buffer.byteLength + amount) * 1.2 | 0);\n    const v = new Uint8Array(b.buffer, 0, this._view.byteLength + amount);\n    v.set(this._view);\n    this._buffer = b;\n    this._view = v;\n  }\n}\n/**\n * Returns a true Uint8Array from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns Uint8Array\n */\nexport function uint8FromBufLike(bufLike) {\n  if (!bufLike) {\n    throw new Error('Input cannot be null or undefined');\n  }\n  if (bufLike instanceof Uint8Array) {\n    return bufLike;\n  }\n  if (bufLike instanceof ArrayBuffer) {\n    return new Uint8Array(bufLike);\n  }\n  if (Array.isArray(bufLike)) {\n    return new Uint8Array(bufLike);\n  }\n  if ('buffer' in bufLike) {\n    return uint8FromBufLike(bufLike.buffer);\n  }\n  return new Uint8Array(bufLike);\n}\n/**\n *\n * @param u1 uint8Array 1\n * @param u2 uint8Array 2\n * @returns number - negative if u1 < u2, positive if u1 > u2, 0 if u1 === u2\n */\nexport function compare(u1, u2) {\n  if (u1.byteLength !== u2.byteLength) {\n    return u1.byteLength - u2.byteLength;\n  }\n  for (let i = 0; i < u1.length; i++) {\n    if (u1[i] !== u2[i]) {\n      return u1[i] - u2[i];\n    }\n  }\n  return 0;\n}\n/**\n * Checks two uint8Arrays for equality.\n * @param u1 uint8Array 1\n * @param u2 uint8Array 2\n * @returns boolean\n */\nexport function uint8Equals(u1, u2) {\n  return compare(u1, u2) === 0;\n}\n/**\n * Helpers to convert a Uint8Array to a DataView.\n * @param uint8 Uint8Array\n * @returns DataView\n */\nexport function uint8ToDataView(uint8) {\n  if (!(uint8 instanceof Uint8Array)) {\n    throw new Error('Input must be a Uint8Array');\n  }\n  return new DataView(uint8.buffer, uint8.byteOffset, uint8.byteLength);\n}","map":{"version":3,"names":["concat","_len","arguments","length","uint8Arrays","Array","_key","result","Uint8Array","reduce","acc","curr","byteLength","index","b","set","PipeArrayBuffer","save","_view","restore","checkPoint","Error","constructor","buffer","undefined","uint8FromBufLike","Number","isInteger","_buffer","slice","read","num","subarray","readUint8","write","buf","offset","byteOffset","alloc","end","amount","v","bufLike","ArrayBuffer","isArray","compare","u1","u2","i","uint8Equals","uint8ToDataView","uint8","DataView"],"sources":["D:\\Kshetra\\frontend\\node_modules\\@dfinity\\candid\\src\\utils\\buffer.ts"],"sourcesContent":["/**\n * Concatenate multiple Uint8Arrays.\n * @param uint8Arrays The Uint8Arrays to concatenate.\n */\nexport function concat(...uint8Arrays: Uint8Array[]): Uint8Array {\n  const result = new Uint8Array(uint8Arrays.reduce((acc, curr) => acc + curr.byteLength, 0));\n  let index = 0;\n  for (const b of uint8Arrays) {\n    result.set(b, index);\n    index += b.byteLength;\n  }\n  return result;\n}\n\n/**\n * A class that abstracts a pipe-like Uint8Array.\n */\nexport class PipeArrayBuffer {\n  /**\n   * The reading view. It's a sliding window as we read and write, pointing to the buffer.\n   * @private\n   */\n  private _view: Uint8Array;\n\n  /**\n   * Save a checkpoint of the reading view (for backtracking)\n   */\n  public save(): Uint8Array {\n    return this._view;\n  }\n\n  /**\n   * Restore a checkpoint of the reading view (for backtracking)\n   * @param checkPoint a previously saved checkpoint\n   */\n  public restore(checkPoint: Uint8Array) {\n    if (!(checkPoint instanceof Uint8Array)) {\n      throw new Error('Checkpoint must be a Uint8Array');\n    }\n    this._view = checkPoint;\n  }\n\n  /**\n   * The actual buffer containing the bytes.\n   * @private\n   */\n  private _buffer: Uint8Array;\n\n  /**\n   * Creates a new instance of a pipe\n   * @param buffer an optional buffer to start with\n   * @param length an optional amount of bytes to use for the length.\n   */\n  constructor(buffer?: Uint8Array, length = buffer?.byteLength || 0) {\n    if (buffer && !(buffer instanceof Uint8Array)) {\n      try {\n        buffer = uint8FromBufLike(buffer);\n      } catch {\n        throw new Error('Buffer must be a Uint8Array');\n      }\n    }\n    if (length < 0 || !Number.isInteger(length)) {\n      throw new Error('Length must be a non-negative integer');\n    }\n    if (buffer && length > buffer.byteLength) {\n      throw new Error('Length cannot exceed buffer length');\n    }\n    this._buffer = buffer || new Uint8Array(0);\n    this._view = new Uint8Array(this._buffer.buffer, 0, length);\n  }\n\n  get buffer(): Uint8Array {\n    // Return a copy of the buffer.\n    return this._view.slice();\n  }\n\n  get byteLength(): number {\n    return this._view.byteLength;\n  }\n\n  /**\n   * Read `num` number of bytes from the front of the pipe.\n   * @param num The number of bytes to read.\n   */\n  public read(num: number): Uint8Array {\n    const result = this._view.subarray(0, num);\n    this._view = this._view.subarray(num);\n    return result.slice();\n  }\n\n  public readUint8(): number | undefined {\n    if (this._view.byteLength === 0) {\n      return undefined;\n    }\n    const result = this._view[0];\n    this._view = this._view.subarray(1);\n    return result;\n  }\n\n  /**\n   * Write a buffer to the end of the pipe.\n   * @param buf The bytes to write.\n   */\n  public write(buf: Uint8Array): void {\n    if (!(buf instanceof Uint8Array)) {\n      throw new Error('Buffer must be a Uint8Array');\n    }\n    const offset = this._view.byteLength;\n    if (this._view.byteOffset + this._view.byteLength + buf.byteLength >= this._buffer.byteLength) {\n      // Alloc grow the view to include the new bytes.\n      this.alloc(buf.byteLength);\n    } else {\n      // Update the view to include the new bytes.\n      this._view = new Uint8Array(\n        this._buffer.buffer,\n        this._view.byteOffset,\n        this._view.byteLength + buf.byteLength,\n      );\n    }\n\n    this._view.set(buf, offset);\n  }\n\n  /**\n   * Whether or not there is more data to read from the buffer\n   */\n  public get end(): boolean {\n    return this._view.byteLength === 0;\n  }\n\n  /**\n   * Allocate a fixed amount of memory in the buffer. This does not affect the view.\n   * @param amount A number of bytes to add to the buffer.\n   */\n  public alloc(amount: number) {\n    if (amount <= 0 || !Number.isInteger(amount)) {\n      throw new Error('Amount must be a positive integer');\n    }\n    // Add a little bit of exponential growth.\n    const b = new Uint8Array(((this._buffer.byteLength + amount) * 1.2) | 0);\n    const v = new Uint8Array(b.buffer, 0, this._view.byteLength + amount);\n    v.set(this._view);\n    this._buffer = b;\n    this._view = v;\n  }\n}\n\n/**\n * Returns a true Uint8Array from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns Uint8Array\n */\nexport function uint8FromBufLike(\n  bufLike:\n    | ArrayBuffer\n    | Uint8Array\n    | DataView\n    | ArrayBufferView\n    | ArrayBufferLike\n    | [number]\n    | number[]\n    | { buffer: ArrayBuffer },\n): Uint8Array {\n  if (!bufLike) {\n    throw new Error('Input cannot be null or undefined');\n  }\n\n  if (bufLike instanceof Uint8Array) {\n    return bufLike;\n  }\n  if (bufLike instanceof ArrayBuffer) {\n    return new Uint8Array(bufLike);\n  }\n  if (Array.isArray(bufLike)) {\n    return new Uint8Array(bufLike);\n  }\n  if ('buffer' in bufLike) {\n    return uint8FromBufLike(bufLike.buffer);\n  }\n  return new Uint8Array(bufLike);\n}\n\n/**\n *\n * @param u1 uint8Array 1\n * @param u2 uint8Array 2\n * @returns number - negative if u1 < u2, positive if u1 > u2, 0 if u1 === u2\n */\nexport function compare(u1: Uint8Array, u2: Uint8Array): number {\n  if (u1.byteLength !== u2.byteLength) {\n    return u1.byteLength - u2.byteLength;\n  }\n  for (let i = 0; i < u1.length; i++) {\n    if (u1[i] !== u2[i]) {\n      return u1[i] - u2[i];\n    }\n  }\n  return 0;\n}\n\n/**\n * Checks two uint8Arrays for equality.\n * @param u1 uint8Array 1\n * @param u2 uint8Array 2\n * @returns boolean\n */\nexport function uint8Equals(u1: Uint8Array, u2: Uint8Array): boolean {\n  return compare(u1, u2) === 0;\n}\n\n/**\n * Helpers to convert a Uint8Array to a DataView.\n * @param uint8 Uint8Array\n * @returns DataView\n */\nexport function uint8ToDataView(uint8: Uint8Array): DataView {\n  if (!(uint8 instanceof Uint8Array)) {\n    throw new Error('Input must be a Uint8Array');\n  }\n  return new DataView(uint8.buffer, uint8.byteOffset, uint8.byteLength);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}