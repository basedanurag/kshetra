{"ast":null,"code":"/**\n * Towered extension fields.\n * Rather than implementing a massive 12th-degree extension directly, it is more efficient\n * to build it up from smaller extensions: a tower of extensions.\n *\n * For BLS12-381, the Fp12 field is implemented as a quadratic (degree two) extension,\n * on top of a cubic (degree three) extension, on top of a quadratic extension of Fp.\n *\n * For more info: \"Pairings for beginners\" by Costello, section 7.3.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitGet, bitLen, concatBytes, notImplemented } from \"../utils.js\";\nimport * as mod from \"./modular.js\";\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3);\nfunction calcFrobeniusCoefficients(Fp, nonResidue, modulus, degree) {\n  let num = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  let divisor = arguments.length > 5 ? arguments[5] : undefined;\n  const _divisor = BigInt(divisor === undefined ? degree : divisor);\n  const towerModulus = modulus ** BigInt(degree);\n  const res = [];\n  for (let i = 0; i < num; i++) {\n    const a = BigInt(i + 1);\n    const powers = [];\n    for (let j = 0, qPower = _1n; j < degree; j++) {\n      const power = (a * qPower - a) / _divisor % towerModulus;\n      powers.push(Fp.pow(nonResidue, power));\n      qPower *= modulus;\n    }\n    res.push(powers);\n  }\n  return res;\n}\n// This works same at least for bls12-381, bn254 and bls12-377\nexport function psiFrobenius(Fp, Fp2, base) {\n  // GLV endomorphism Ψ(P)\n  const PSI_X = Fp2.pow(base, (Fp.ORDER - _1n) / _3n); // u^((p-1)/3)\n  const PSI_Y = Fp2.pow(base, (Fp.ORDER - _1n) / _2n); // u^((p-1)/2)\n  function psi(x, y) {\n    // This x10 faster than previous version in bls12-381\n    const x2 = Fp2.mul(Fp2.frobeniusMap(x, 1), PSI_X);\n    const y2 = Fp2.mul(Fp2.frobeniusMap(y, 1), PSI_Y);\n    return [x2, y2];\n  }\n  // Ψ²(P) endomorphism (psi2(x) = psi(psi(x)))\n  const PSI2_X = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _3n); // u^((p^2 - 1)/3)\n  // This equals -1, which causes y to be Fp2.neg(y).\n  // But not sure if there are case when this is not true?\n  const PSI2_Y = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _2n); // u^((p^2 - 1)/3)\n  if (!Fp2.eql(PSI2_Y, Fp2.neg(Fp2.ONE))) throw new Error('psiFrobenius: PSI2_Y!==-1');\n  function psi2(x, y) {\n    return [Fp2.mul(x, PSI2_X), Fp2.neg(y)];\n  }\n  // Map points\n  const mapAffine = fn => (c, P) => {\n    const affine = P.toAffine();\n    const p = fn(affine.x, affine.y);\n    return c.fromAffine({\n      x: p[0],\n      y: p[1]\n    });\n  };\n  const G2psi = mapAffine(psi);\n  const G2psi2 = mapAffine(psi2);\n  return {\n    psi,\n    psi2,\n    G2psi,\n    G2psi2,\n    PSI_X,\n    PSI_Y,\n    PSI2_X,\n    PSI2_Y\n  };\n}\nconst Fp2fromBigTuple = (Fp, tuple) => {\n  if (tuple.length !== 2) throw new Error('invalid tuple');\n  const fps = tuple.map(n => Fp.create(n));\n  return {\n    c0: fps[0],\n    c1: fps[1]\n  };\n};\nclass _Field2 {\n  constructor(Fp) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.MASK = _1n;\n    const ORDER = Fp.ORDER;\n    const FP2_ORDER = ORDER * ORDER;\n    this.Fp = Fp;\n    this.ORDER = FP2_ORDER;\n    this.BITS = bitLen(FP2_ORDER);\n    this.BYTES = Math.ceil(bitLen(FP2_ORDER) / 8);\n    this.isLE = Fp.isLE;\n    this.ZERO = {\n      c0: Fp.ZERO,\n      c1: Fp.ZERO\n    };\n    this.ONE = {\n      c0: Fp.ONE,\n      c1: Fp.ZERO\n    };\n    this.Fp_NONRESIDUE = Fp.create(opts.NONRESIDUE || BigInt(-1));\n    this.Fp_div2 = Fp.div(Fp.ONE, _2n); // 1/2\n    this.NONRESIDUE = Fp2fromBigTuple(Fp, opts.FP2_NONRESIDUE);\n    // const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);\n    this.FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp, this.Fp_NONRESIDUE, Fp.ORDER, 2)[0];\n    this.mulByB = opts.Fp2mulByB;\n    Object.seal(this);\n  }\n  fromBigTuple(tuple) {\n    return Fp2fromBigTuple(this.Fp, tuple);\n  }\n  create(num) {\n    return num;\n  }\n  isValid(_ref) {\n    let {\n      c0,\n      c1\n    } = _ref;\n    function isValidC(num, ORDER) {\n      return typeof num === 'bigint' && _0n <= num && num < ORDER;\n    }\n    return isValidC(c0, this.ORDER) && isValidC(c1, this.ORDER);\n  }\n  is0(_ref2) {\n    let {\n      c0,\n      c1\n    } = _ref2;\n    return this.Fp.is0(c0) && this.Fp.is0(c1);\n  }\n  isValidNot0(num) {\n    return !this.is0(num) && this.isValid(num);\n  }\n  eql(_ref3, _ref4) {\n    let {\n      c0,\n      c1\n    } = _ref3;\n    let {\n      c0: r0,\n      c1: r1\n    } = _ref4;\n    return this.Fp.eql(c0, r0) && this.Fp.eql(c1, r1);\n  }\n  neg(_ref5) {\n    let {\n      c0,\n      c1\n    } = _ref5;\n    return {\n      c0: this.Fp.neg(c0),\n      c1: this.Fp.neg(c1)\n    };\n  }\n  pow(num, power) {\n    return mod.FpPow(this, num, power);\n  }\n  invertBatch(nums) {\n    return mod.FpInvertBatch(this, nums);\n  }\n  // Normalized\n  add(f1, f2) {\n    const {\n      c0,\n      c1\n    } = f1;\n    const {\n      c0: r0,\n      c1: r1\n    } = f2;\n    return {\n      c0: this.Fp.add(c0, r0),\n      c1: this.Fp.add(c1, r1)\n    };\n  }\n  sub(_ref6, _ref7) {\n    let {\n      c0,\n      c1\n    } = _ref6;\n    let {\n      c0: r0,\n      c1: r1\n    } = _ref7;\n    return {\n      c0: this.Fp.sub(c0, r0),\n      c1: this.Fp.sub(c1, r1)\n    };\n  }\n  mul(_ref8, rhs) {\n    let {\n      c0,\n      c1\n    } = _ref8;\n    const {\n      Fp\n    } = this;\n    if (typeof rhs === 'bigint') return {\n      c0: Fp.mul(c0, rhs),\n      c1: Fp.mul(c1, rhs)\n    };\n    // (a+bi)(c+di) = (ac−bd) + (ad+bc)i\n    const {\n      c0: r0,\n      c1: r1\n    } = rhs;\n    let t1 = Fp.mul(c0, r0); // c0 * o0\n    let t2 = Fp.mul(c1, r1); // c1 * o1\n    // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\n    const o0 = Fp.sub(t1, t2);\n    const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\n    return {\n      c0: o0,\n      c1: o1\n    };\n  }\n  sqr(_ref9) {\n    let {\n      c0,\n      c1\n    } = _ref9;\n    const {\n      Fp\n    } = this;\n    const a = Fp.add(c0, c1);\n    const b = Fp.sub(c0, c1);\n    const c = Fp.add(c0, c0);\n    return {\n      c0: Fp.mul(a, b),\n      c1: Fp.mul(c, c1)\n    };\n  }\n  // NonNormalized stuff\n  addN(a, b) {\n    return this.add(a, b);\n  }\n  subN(a, b) {\n    return this.sub(a, b);\n  }\n  mulN(a, b) {\n    return this.mul(a, b);\n  }\n  sqrN(a) {\n    return this.sqr(a);\n  }\n  // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\n  div(lhs, rhs) {\n    const {\n      Fp\n    } = this;\n    // @ts-ignore\n    return this.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : this.inv(rhs));\n  }\n  inv(_ref0) {\n    let {\n      c0: a,\n      c1: b\n    } = _ref0;\n    // We wish to find the multiplicative inverse of a nonzero\n    // element a + bu in Fp2. We leverage an identity\n    //\n    // (a + bu)(a - bu) = a² + b²\n    //\n    // which holds because u² = -1. This can be rewritten as\n    //\n    // (a + bu)(a - bu)/(a² + b²) = 1\n    //\n    // because a² + b² = 0 has no nonzero solutions for (a, b).\n    // This gives that (a - bu)/(a² + b²) is the inverse\n    // of (a + bu). Importantly, this can be computing using\n    // only a single inversion in Fp.\n    const {\n      Fp\n    } = this;\n    const factor = Fp.inv(Fp.create(a * a + b * b));\n    return {\n      c0: Fp.mul(factor, Fp.create(a)),\n      c1: Fp.mul(factor, Fp.create(-b))\n    };\n  }\n  sqrt(num) {\n    // This is generic for all quadratic extensions (Fp2)\n    const {\n      Fp\n    } = this;\n    const Fp2 = this;\n    const {\n      c0,\n      c1\n    } = num;\n    if (Fp.is0(c1)) {\n      // if c0 is quadratic residue\n      if (mod.FpLegendre(Fp, c0) === 1) return Fp2.create({\n        c0: Fp.sqrt(c0),\n        c1: Fp.ZERO\n      });else return Fp2.create({\n        c0: Fp.ZERO,\n        c1: Fp.sqrt(Fp.div(c0, this.Fp_NONRESIDUE))\n      });\n    }\n    const a = Fp.sqrt(Fp.sub(Fp.sqr(c0), Fp.mul(Fp.sqr(c1), this.Fp_NONRESIDUE)));\n    let d = Fp.mul(Fp.add(a, c0), this.Fp_div2);\n    const legendre = mod.FpLegendre(Fp, d);\n    // -1, Quadratic non residue\n    if (legendre === -1) d = Fp.sub(d, a);\n    const a0 = Fp.sqrt(d);\n    const candidateSqrt = Fp2.create({\n      c0: a0,\n      c1: Fp.div(Fp.mul(c1, this.Fp_div2), a0)\n    });\n    if (!Fp2.eql(Fp2.sqr(candidateSqrt), num)) throw new Error('Cannot find square root');\n    // Normalize root: at this point candidateSqrt ** 2 = num, but also -candidateSqrt ** 2 = num\n    const x1 = candidateSqrt;\n    const x2 = Fp2.neg(x1);\n    const {\n      re: re1,\n      im: im1\n    } = Fp2.reim(x1);\n    const {\n      re: re2,\n      im: im2\n    } = Fp2.reim(x2);\n    if (im1 > im2 || im1 === im2 && re1 > re2) return x1;\n    return x2;\n  }\n  // Same as sgn0_m_eq_2 in RFC 9380\n  isOdd(x) {\n    const {\n      re: x0,\n      im: x1\n    } = this.reim(x);\n    const sign_0 = x0 % _2n;\n    const zero_0 = x0 === _0n;\n    const sign_1 = x1 % _2n;\n    return BigInt(sign_0 || zero_0 && sign_1) == _1n;\n  }\n  // Bytes util\n  fromBytes(b) {\n    const {\n      Fp\n    } = this;\n    if (b.length !== this.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n    return {\n      c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)),\n      c1: Fp.fromBytes(b.subarray(Fp.BYTES))\n    };\n  }\n  toBytes(_ref1) {\n    let {\n      c0,\n      c1\n    } = _ref1;\n    return concatBytes(this.Fp.toBytes(c0), this.Fp.toBytes(c1));\n  }\n  cmov(_ref10, _ref11, c) {\n    let {\n      c0,\n      c1\n    } = _ref10;\n    let {\n      c0: r0,\n      c1: r1\n    } = _ref11;\n    return {\n      c0: this.Fp.cmov(c0, r0, c),\n      c1: this.Fp.cmov(c1, r1, c)\n    };\n  }\n  reim(_ref12) {\n    let {\n      c0,\n      c1\n    } = _ref12;\n    return {\n      re: c0,\n      im: c1\n    };\n  }\n  Fp4Square(a, b) {\n    const Fp2 = this;\n    const a2 = Fp2.sqr(a);\n    const b2 = Fp2.sqr(b);\n    return {\n      first: Fp2.add(Fp2.mulByNonresidue(b2), a2),\n      // b² * Nonresidue + a²\n      second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2) // (a + b)² - a² - b²\n    };\n  }\n  // multiply by u + 1\n  mulByNonresidue(_ref13) {\n    let {\n      c0,\n      c1\n    } = _ref13;\n    return this.mul({\n      c0,\n      c1\n    }, this.NONRESIDUE);\n  }\n  frobeniusMap(_ref14, power) {\n    let {\n      c0,\n      c1\n    } = _ref14;\n    return {\n      c0,\n      c1: this.Fp.mul(c1, this.FROBENIUS_COEFFICIENTS[power % 2])\n    };\n  }\n}\nclass _Field6 {\n  constructor(Fp2) {\n    this.MASK = _1n;\n    this.Fp2 = Fp2;\n    this.ORDER = Fp2.ORDER; // TODO: unused, but need to verify\n    this.BITS = 3 * Fp2.BITS;\n    this.BYTES = 3 * Fp2.BYTES;\n    this.isLE = Fp2.isLE;\n    this.ZERO = {\n      c0: Fp2.ZERO,\n      c1: Fp2.ZERO,\n      c2: Fp2.ZERO\n    };\n    this.ONE = {\n      c0: Fp2.ONE,\n      c1: Fp2.ZERO,\n      c2: Fp2.ZERO\n    };\n    const {\n      Fp\n    } = Fp2;\n    const frob = calcFrobeniusCoefficients(Fp2, Fp2.NONRESIDUE, Fp.ORDER, 6, 2, 3);\n    this.FROBENIUS_COEFFICIENTS_1 = frob[0];\n    this.FROBENIUS_COEFFICIENTS_2 = frob[1];\n    Object.seal(this);\n  }\n  add(_ref15, _ref16) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref15;\n    let {\n      c0: r0,\n      c1: r1,\n      c2: r2\n    } = _ref16;\n    const {\n      Fp2\n    } = this;\n    return {\n      c0: Fp2.add(c0, r0),\n      c1: Fp2.add(c1, r1),\n      c2: Fp2.add(c2, r2)\n    };\n  }\n  sub(_ref17, _ref18) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref17;\n    let {\n      c0: r0,\n      c1: r1,\n      c2: r2\n    } = _ref18;\n    const {\n      Fp2\n    } = this;\n    return {\n      c0: Fp2.sub(c0, r0),\n      c1: Fp2.sub(c1, r1),\n      c2: Fp2.sub(c2, r2)\n    };\n  }\n  mul(_ref19, rhs) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref19;\n    const {\n      Fp2\n    } = this;\n    if (typeof rhs === 'bigint') {\n      return {\n        c0: Fp2.mul(c0, rhs),\n        c1: Fp2.mul(c1, rhs),\n        c2: Fp2.mul(c2, rhs)\n      };\n    }\n    const {\n      c0: r0,\n      c1: r1,\n      c2: r2\n    } = rhs;\n    const t0 = Fp2.mul(c0, r0); // c0 * o0\n    const t1 = Fp2.mul(c1, r1); // c1 * o1\n    const t2 = Fp2.mul(c2, r2); // c2 * o2\n    return {\n      // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\n      c0: Fp2.add(t0, Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))),\n      // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\n      c1: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)), Fp2.mulByNonresidue(t2)),\n      // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\n      c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2))\n    };\n  }\n  sqr(_ref20) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref20;\n    const {\n      Fp2\n    } = this;\n    let t0 = Fp2.sqr(c0); // c0²\n    let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\n    let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\n    let t4 = Fp2.sqr(c2); // c2²\n    return {\n      c0: Fp2.add(Fp2.mulByNonresidue(t3), t0),\n      // T3 * (u + 1) + T0\n      c1: Fp2.add(Fp2.mulByNonresidue(t4), t1),\n      // T4 * (u + 1) + T1\n      // T1 + (c0 - c1 + c2)² + T3 - T0 - T4\n      c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4)\n    };\n  }\n  addN(a, b) {\n    return this.add(a, b);\n  }\n  subN(a, b) {\n    return this.sub(a, b);\n  }\n  mulN(a, b) {\n    return this.mul(a, b);\n  }\n  sqrN(a) {\n    return this.sqr(a);\n  }\n  create(num) {\n    return num;\n  }\n  isValid(_ref21) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref21;\n    const {\n      Fp2\n    } = this;\n    return Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2);\n  }\n  is0(_ref22) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref22;\n    const {\n      Fp2\n    } = this;\n    return Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2);\n  }\n  isValidNot0(num) {\n    return !this.is0(num) && this.isValid(num);\n  }\n  neg(_ref23) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref23;\n    const {\n      Fp2\n    } = this;\n    return {\n      c0: Fp2.neg(c0),\n      c1: Fp2.neg(c1),\n      c2: Fp2.neg(c2)\n    };\n  }\n  eql(_ref24, _ref25) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref24;\n    let {\n      c0: r0,\n      c1: r1,\n      c2: r2\n    } = _ref25;\n    const {\n      Fp2\n    } = this;\n    return Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2);\n  }\n  sqrt(_) {\n    return notImplemented();\n  }\n  // Do we need division by bigint at all? Should be done via order:\n  div(lhs, rhs) {\n    const {\n      Fp2\n    } = this;\n    const {\n      Fp\n    } = Fp2;\n    return this.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : this.inv(rhs));\n  }\n  pow(num, power) {\n    return mod.FpPow(this, num, power);\n  }\n  invertBatch(nums) {\n    return mod.FpInvertBatch(this, nums);\n  }\n  inv(_ref26) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref26;\n    const {\n      Fp2\n    } = this;\n    let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0² - c2 * c1 * (u + 1)\n    let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2² * (u + 1) - c0 * c1\n    let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1² - c0 * c2\n    // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\n    let t4 = Fp2.inv(Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0)));\n    return {\n      c0: Fp2.mul(t4, t0),\n      c1: Fp2.mul(t4, t1),\n      c2: Fp2.mul(t4, t2)\n    };\n  }\n  // Bytes utils\n  fromBytes(b) {\n    const {\n      Fp2\n    } = this;\n    if (b.length !== this.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n    const B2 = Fp2.BYTES;\n    return {\n      c0: Fp2.fromBytes(b.subarray(0, B2)),\n      c1: Fp2.fromBytes(b.subarray(B2, B2 * 2)),\n      c2: Fp2.fromBytes(b.subarray(2 * B2))\n    };\n  }\n  toBytes(_ref27) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref27;\n    const {\n      Fp2\n    } = this;\n    return concatBytes(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2));\n  }\n  cmov(_ref28, _ref29, c) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref28;\n    let {\n      c0: r0,\n      c1: r1,\n      c2: r2\n    } = _ref29;\n    const {\n      Fp2\n    } = this;\n    return {\n      c0: Fp2.cmov(c0, r0, c),\n      c1: Fp2.cmov(c1, r1, c),\n      c2: Fp2.cmov(c2, r2, c)\n    };\n  }\n  fromBigSix(t) {\n    const {\n      Fp2\n    } = this;\n    if (!Array.isArray(t) || t.length !== 6) throw new Error('invalid Fp6 usage');\n    return {\n      c0: Fp2.fromBigTuple(t.slice(0, 2)),\n      c1: Fp2.fromBigTuple(t.slice(2, 4)),\n      c2: Fp2.fromBigTuple(t.slice(4, 6))\n    };\n  }\n  frobeniusMap(_ref30, power) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref30;\n    const {\n      Fp2\n    } = this;\n    return {\n      c0: Fp2.frobeniusMap(c0, power),\n      c1: Fp2.mul(Fp2.frobeniusMap(c1, power), this.FROBENIUS_COEFFICIENTS_1[power % 6]),\n      c2: Fp2.mul(Fp2.frobeniusMap(c2, power), this.FROBENIUS_COEFFICIENTS_2[power % 6])\n    };\n  }\n  mulByFp2(_ref31, rhs) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref31;\n    const {\n      Fp2\n    } = this;\n    return {\n      c0: Fp2.mul(c0, rhs),\n      c1: Fp2.mul(c1, rhs),\n      c2: Fp2.mul(c2, rhs)\n    };\n  }\n  mulByNonresidue(_ref32) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref32;\n    const {\n      Fp2\n    } = this;\n    return {\n      c0: Fp2.mulByNonresidue(c2),\n      c1: c0,\n      c2: c1\n    };\n  }\n  // Sparse multiplication\n  mul1(_ref33, b1) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref33;\n    const {\n      Fp2\n    } = this;\n    return {\n      c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\n      c1: Fp2.mul(c0, b1),\n      c2: Fp2.mul(c1, b1)\n    };\n  }\n  // Sparse multiplication\n  mul01(_ref34, b0, b1) {\n    let {\n      c0,\n      c1,\n      c2\n    } = _ref34;\n    const {\n      Fp2\n    } = this;\n    let t0 = Fp2.mul(c0, b0); // c0 * b0\n    let t1 = Fp2.mul(c1, b1); // c1 * b1\n    return {\n      // ((c1 + c2) * b1 - T1) * (u + 1) + T0\n      c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\n      // (b0 + b1) * (c0 + c1) - T0 - T1\n      c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\n      // (c0 + c2) * b0 - T0 + T1\n      c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1)\n    };\n  }\n}\nclass _Field12 {\n  constructor(Fp6, opts) {\n    this.MASK = _1n;\n    const {\n      Fp2\n    } = Fp6;\n    const {\n      Fp\n    } = Fp2;\n    this.Fp6 = Fp6;\n    this.ORDER = Fp2.ORDER; // TODO: verify if it's unuesd\n    this.BITS = 2 * Fp6.BITS;\n    this.BYTES = 2 * Fp6.BYTES;\n    this.isLE = Fp6.isLE;\n    this.ZERO = {\n      c0: Fp6.ZERO,\n      c1: Fp6.ZERO\n    };\n    this.ONE = {\n      c0: Fp6.ONE,\n      c1: Fp6.ZERO\n    };\n    this.FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp2, Fp2.NONRESIDUE, Fp.ORDER, 12, 1, 6)[0];\n    this.X_LEN = opts.X_LEN;\n    this.finalExponentiate = opts.Fp12finalExponentiate;\n  }\n  create(num) {\n    return num;\n  }\n  isValid(_ref35) {\n    let {\n      c0,\n      c1\n    } = _ref35;\n    const {\n      Fp6\n    } = this;\n    return Fp6.isValid(c0) && Fp6.isValid(c1);\n  }\n  is0(_ref36) {\n    let {\n      c0,\n      c1\n    } = _ref36;\n    const {\n      Fp6\n    } = this;\n    return Fp6.is0(c0) && Fp6.is0(c1);\n  }\n  isValidNot0(num) {\n    return !this.is0(num) && this.isValid(num);\n  }\n  neg(_ref37) {\n    let {\n      c0,\n      c1\n    } = _ref37;\n    const {\n      Fp6\n    } = this;\n    return {\n      c0: Fp6.neg(c0),\n      c1: Fp6.neg(c1)\n    };\n  }\n  eql(_ref38, _ref39) {\n    let {\n      c0,\n      c1\n    } = _ref38;\n    let {\n      c0: r0,\n      c1: r1\n    } = _ref39;\n    const {\n      Fp6\n    } = this;\n    return Fp6.eql(c0, r0) && Fp6.eql(c1, r1);\n  }\n  sqrt(_) {\n    notImplemented();\n  }\n  inv(_ref40) {\n    let {\n      c0,\n      c1\n    } = _ref40;\n    const {\n      Fp6\n    } = this;\n    let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0² - c1² * v)\n    return {\n      c0: Fp6.mul(c0, t),\n      c1: Fp6.neg(Fp6.mul(c1, t))\n    }; // ((C0 * T) * T) + (-C1 * T) * w\n  }\n  div(lhs, rhs) {\n    const {\n      Fp6\n    } = this;\n    const {\n      Fp2\n    } = Fp6;\n    const {\n      Fp\n    } = Fp2;\n    return this.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : this.inv(rhs));\n  }\n  pow(num, power) {\n    return mod.FpPow(this, num, power);\n  }\n  invertBatch(nums) {\n    return mod.FpInvertBatch(this, nums);\n  }\n  // Normalized\n  add(_ref41, _ref42) {\n    let {\n      c0,\n      c1\n    } = _ref41;\n    let {\n      c0: r0,\n      c1: r1\n    } = _ref42;\n    const {\n      Fp6\n    } = this;\n    return {\n      c0: Fp6.add(c0, r0),\n      c1: Fp6.add(c1, r1)\n    };\n  }\n  sub(_ref43, _ref44) {\n    let {\n      c0,\n      c1\n    } = _ref43;\n    let {\n      c0: r0,\n      c1: r1\n    } = _ref44;\n    const {\n      Fp6\n    } = this;\n    return {\n      c0: Fp6.sub(c0, r0),\n      c1: Fp6.sub(c1, r1)\n    };\n  }\n  mul(_ref45, rhs) {\n    let {\n      c0,\n      c1\n    } = _ref45;\n    const {\n      Fp6\n    } = this;\n    if (typeof rhs === 'bigint') return {\n      c0: Fp6.mul(c0, rhs),\n      c1: Fp6.mul(c1, rhs)\n    };\n    let {\n      c0: r0,\n      c1: r1\n    } = rhs;\n    let t1 = Fp6.mul(c0, r0); // c0 * r0\n    let t2 = Fp6.mul(c1, r1); // c1 * r1\n    return {\n      c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)),\n      // T1 + T2 * v\n      // (c0 + c1) * (r0 + r1) - (T1 + T2)\n      c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2))\n    };\n  }\n  sqr(_ref46) {\n    let {\n      c0,\n      c1\n    } = _ref46;\n    const {\n      Fp6\n    } = this;\n    let ab = Fp6.mul(c0, c1); // c0 * c1\n    return {\n      // (c1 * v + c0) * (c0 + c1) - AB - AB * v\n      c0: Fp6.sub(Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab), Fp6.mulByNonresidue(ab)),\n      c1: Fp6.add(ab, ab)\n    }; // AB + AB\n  }\n  // NonNormalized stuff\n  addN(a, b) {\n    return this.add(a, b);\n  }\n  subN(a, b) {\n    return this.sub(a, b);\n  }\n  mulN(a, b) {\n    return this.mul(a, b);\n  }\n  sqrN(a) {\n    return this.sqr(a);\n  }\n  // Bytes utils\n  fromBytes(b) {\n    const {\n      Fp6\n    } = this;\n    if (b.length !== this.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n    return {\n      c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\n      c1: Fp6.fromBytes(b.subarray(Fp6.BYTES))\n    };\n  }\n  toBytes(_ref47) {\n    let {\n      c0,\n      c1\n    } = _ref47;\n    const {\n      Fp6\n    } = this;\n    return concatBytes(Fp6.toBytes(c0), Fp6.toBytes(c1));\n  }\n  cmov(_ref48, _ref49, c) {\n    let {\n      c0,\n      c1\n    } = _ref48;\n    let {\n      c0: r0,\n      c1: r1\n    } = _ref49;\n    const {\n      Fp6\n    } = this;\n    return {\n      c0: Fp6.cmov(c0, r0, c),\n      c1: Fp6.cmov(c1, r1, c)\n    };\n  }\n  // Utils\n  // toString() {\n  //   return '' + 'Fp12(' + this.c0 + this.c1 + '* w');\n  // },\n  // fromTuple(c: [Fp6, Fp6]) {\n  //   return new Fp12(...c);\n  // }\n  fromBigTwelve(t) {\n    const {\n      Fp6\n    } = this;\n    return {\n      c0: Fp6.fromBigSix(t.slice(0, 6)),\n      c1: Fp6.fromBigSix(t.slice(6, 12))\n    };\n  }\n  // Raises to q**i -th power\n  frobeniusMap(lhs, power) {\n    const {\n      Fp6\n    } = this;\n    const {\n      Fp2\n    } = Fp6;\n    const {\n      c0,\n      c1,\n      c2\n    } = Fp6.frobeniusMap(lhs.c1, power);\n    const coeff = this.FROBENIUS_COEFFICIENTS[power % 12];\n    return {\n      c0: Fp6.frobeniusMap(lhs.c0, power),\n      c1: Fp6.create({\n        c0: Fp2.mul(c0, coeff),\n        c1: Fp2.mul(c1, coeff),\n        c2: Fp2.mul(c2, coeff)\n      })\n    };\n  }\n  mulByFp2(_ref50, rhs) {\n    let {\n      c0,\n      c1\n    } = _ref50;\n    const {\n      Fp6\n    } = this;\n    return {\n      c0: Fp6.mulByFp2(c0, rhs),\n      c1: Fp6.mulByFp2(c1, rhs)\n    };\n  }\n  conjugate(_ref51) {\n    let {\n      c0,\n      c1\n    } = _ref51;\n    return {\n      c0,\n      c1: this.Fp6.neg(c1)\n    };\n  }\n  // Sparse multiplication\n  mul014(_ref52, o0, o1, o4) {\n    let {\n      c0,\n      c1\n    } = _ref52;\n    const {\n      Fp6\n    } = this;\n    const {\n      Fp2\n    } = Fp6;\n    let t0 = Fp6.mul01(c0, o0, o1);\n    let t1 = Fp6.mul1(c1, o4);\n    return {\n      c0: Fp6.add(Fp6.mulByNonresidue(t1), t0),\n      // T1 * v + T0\n      // (c1 + c0) * [o0, o1+o4] - T0 - T1\n      c1: Fp6.sub(Fp6.sub(Fp6.mul01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1)\n    };\n  }\n  mul034(_ref53, o0, o3, o4) {\n    let {\n      c0,\n      c1\n    } = _ref53;\n    const {\n      Fp6\n    } = this;\n    const {\n      Fp2\n    } = Fp6;\n    const a = Fp6.create({\n      c0: Fp2.mul(c0.c0, o0),\n      c1: Fp2.mul(c0.c1, o0),\n      c2: Fp2.mul(c0.c2, o0)\n    });\n    const b = Fp6.mul01(c1, o3, o4);\n    const e = Fp6.mul01(Fp6.add(c0, c1), Fp2.add(o0, o3), o4);\n    return {\n      c0: Fp6.add(Fp6.mulByNonresidue(b), a),\n      c1: Fp6.sub(e, Fp6.add(a, b))\n    };\n  }\n  // A cyclotomic group is a subgroup of Fp^n defined by\n  //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n  // The result of any pairing is in a cyclotomic subgroup\n  // https://eprint.iacr.org/2009/565.pdf\n  // https://eprint.iacr.org/2010/354.pdf\n  _cyclotomicSquare(_ref54) {\n    let {\n      c0,\n      c1\n    } = _ref54;\n    const {\n      Fp6\n    } = this;\n    const {\n      Fp2\n    } = Fp6;\n    const {\n      c0: c0c0,\n      c1: c0c1,\n      c2: c0c2\n    } = c0;\n    const {\n      c0: c1c0,\n      c1: c1c1,\n      c2: c1c2\n    } = c1;\n    const {\n      first: t3,\n      second: t4\n    } = Fp2.Fp4Square(c0c0, c1c1);\n    const {\n      first: t5,\n      second: t6\n    } = Fp2.Fp4Square(c1c0, c0c2);\n    const {\n      first: t7,\n      second: t8\n    } = Fp2.Fp4Square(c0c1, c1c2);\n    const t9 = Fp2.mulByNonresidue(t8); // T8 * (u + 1)\n    return {\n      c0: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n), t3),\n        // 2 * (T3 - c0c0)  + T3\n        c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n), t5),\n        // 2 * (T5 - c0c1)  + T5\n        c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n), t7)\n      }),\n      // 2 * (T7 - c0c2)  + T7\n      c1: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n), t9),\n        // 2 * (T9 + c1c0) + T9\n        c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n), t4),\n        // 2 * (T4 + c1c1) + T4\n        c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n), t6)\n      })\n    }; // 2 * (T6 + c1c2) + T6\n  }\n  // https://eprint.iacr.org/2009/565.pdf\n  _cyclotomicExp(num, n) {\n    let z = this.ONE;\n    for (let i = this.X_LEN - 1; i >= 0; i--) {\n      z = this._cyclotomicSquare(z);\n      if (bitGet(n, i)) z = this.mul(z, num);\n    }\n    return z;\n  }\n}\nexport function tower12(opts) {\n  const Fp = mod.Field(opts.ORDER);\n  const Fp2 = new _Field2(Fp, opts);\n  const Fp6 = new _Field6(Fp2);\n  const Fp12 = new _Field12(Fp6, opts);\n  return {\n    Fp,\n    Fp2,\n    Fp6,\n    Fp12\n  };\n}","map":{"version":3,"names":["bitGet","bitLen","concatBytes","notImplemented","mod","_0n","BigInt","_1n","_2n","_3n","calcFrobeniusCoefficients","Fp","nonResidue","modulus","degree","num","arguments","length","undefined","divisor","_divisor","towerModulus","res","i","a","powers","j","qPower","power","push","pow","psiFrobenius","Fp2","base","PSI_X","ORDER","PSI_Y","psi","x","y","x2","mul","frobeniusMap","y2","PSI2_X","PSI2_Y","eql","neg","ONE","Error","psi2","mapAffine","fn","c","P","affine","toAffine","p","fromAffine","G2psi","G2psi2","Fp2fromBigTuple","tuple","fps","map","n","create","c0","c1","_Field2","constructor","opts","MASK","FP2_ORDER","BITS","BYTES","Math","ceil","isLE","ZERO","Fp_NONRESIDUE","NONRESIDUE","Fp_div2","div","FP2_NONRESIDUE","FROBENIUS_COEFFICIENTS","mulByB","Fp2mulByB","Object","seal","fromBigTuple","isValid","_ref","isValidC","is0","_ref2","isValidNot0","_ref3","_ref4","r0","r1","_ref5","FpPow","invertBatch","nums","FpInvertBatch","add","f1","f2","sub","_ref6","_ref7","_ref8","rhs","t1","t2","o0","o1","sqr","_ref9","b","addN","subN","mulN","sqrN","lhs","inv","_ref0","factor","sqrt","FpLegendre","d","legendre","a0","candidateSqrt","x1","re","re1","im","im1","reim","re2","im2","isOdd","x0","sign_0","zero_0","sign_1","fromBytes","subarray","toBytes","_ref1","cmov","_ref10","_ref11","_ref12","Fp4Square","a2","b2","first","mulByNonresidue","second","_ref13","_ref14","_Field6","c2","frob","FROBENIUS_COEFFICIENTS_1","FROBENIUS_COEFFICIENTS_2","_ref15","_ref16","r2","_ref17","_ref18","_ref19","t0","_ref20","t3","t4","_ref21","_ref22","_ref23","_ref24","_ref25","_","_ref26","B2","_ref27","_ref28","_ref29","fromBigSix","t","Array","isArray","slice","_ref30","mulByFp2","_ref31","_ref32","mul1","_ref33","b1","mul01","_ref34","b0","_Field12","Fp6","X_LEN","finalExponentiate","Fp12finalExponentiate","_ref35","_ref36","_ref37","_ref38","_ref39","_ref40","_ref41","_ref42","_ref43","_ref44","_ref45","_ref46","ab","_ref47","_ref48","_ref49","fromBigTwelve","coeff","_ref50","conjugate","_ref51","mul014","_ref52","o4","mul034","_ref53","o3","e","_cyclotomicSquare","_ref54","c0c0","c0c1","c0c2","c1c0","c1c1","c1c2","t5","t6","t7","t8","t9","_cyclotomicExp","z","tower12","Field","Fp12"],"sources":["D:\\Kshetra\\frontend\\node_modules\\@noble\\curves\\src\\abstract\\tower.ts"],"sourcesContent":["/**\n * Towered extension fields.\n * Rather than implementing a massive 12th-degree extension directly, it is more efficient\n * to build it up from smaller extensions: a tower of extensions.\n *\n * For BLS12-381, the Fp12 field is implemented as a quadratic (degree two) extension,\n * on top of a cubic (degree three) extension, on top of a quadratic extension of Fp.\n *\n * For more info: \"Pairings for beginners\" by Costello, section 7.3.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitGet, bitLen, concatBytes, notImplemented } from '../utils.ts';\nimport * as mod from './modular.ts';\nimport type { WeierstrassPoint, WeierstrassPointCons } from './weierstrass.ts';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n\n// Fp₂ over complex plane\nexport type BigintTuple = [bigint, bigint];\nexport type Fp = bigint;\n// Finite extension field over irreducible polynominal.\n// Fp(u) / (u² - β) where β = -1\nexport type Fp2 = { c0: bigint; c1: bigint };\nexport type BigintSix = [bigint, bigint, bigint, bigint, bigint, bigint];\nexport type Fp6 = { c0: Fp2; c1: Fp2; c2: Fp2 };\nexport type Fp12 = { c0: Fp6; c1: Fp6 }; // Fp₁₂ = Fp₆² => Fp₂³, Fp₆(w) / (w² - γ) where γ = v\n// prettier-ignore\nexport type BigintTwelve = [\n  bigint, bigint, bigint, bigint, bigint, bigint,\n  bigint, bigint, bigint, bigint, bigint, bigint\n];\n\nexport type Fp2Bls = mod.IField<Fp2> & {\n  Fp: mod.IField<Fp>;\n  frobeniusMap(num: Fp2, power: number): Fp2;\n  fromBigTuple(num: BigintTuple): Fp2;\n  mulByB: (num: Fp2) => Fp2;\n  mulByNonresidue: (num: Fp2) => Fp2;\n  reim: (num: Fp2) => { re: Fp; im: Fp };\n  Fp4Square: (a: Fp2, b: Fp2) => { first: Fp2; second: Fp2 };\n  NONRESIDUE: Fp2;\n};\n\nexport type Fp6Bls = mod.IField<Fp6> & {\n  Fp2: Fp2Bls;\n  frobeniusMap(num: Fp6, power: number): Fp6;\n  fromBigSix: (tuple: BigintSix) => Fp6;\n  mul1(num: Fp6, b1: Fp2): Fp6;\n  mul01(num: Fp6, b0: Fp2, b1: Fp2): Fp6;\n  mulByFp2(lhs: Fp6, rhs: Fp2): Fp6;\n  mulByNonresidue: (num: Fp6) => Fp6;\n};\n\nexport type Fp12Bls = mod.IField<Fp12> & {\n  Fp6: Fp6Bls;\n  frobeniusMap(num: Fp12, power: number): Fp12;\n  fromBigTwelve: (t: BigintTwelve) => Fp12;\n  mul014(num: Fp12, o0: Fp2, o1: Fp2, o4: Fp2): Fp12;\n  mul034(num: Fp12, o0: Fp2, o3: Fp2, o4: Fp2): Fp12;\n  mulByFp2(lhs: Fp12, rhs: Fp2): Fp12;\n  conjugate(num: Fp12): Fp12;\n  finalExponentiate(num: Fp12): Fp12;\n  _cyclotomicSquare(num: Fp12): Fp12;\n  _cyclotomicExp(num: Fp12, n: bigint): Fp12;\n};\n\nfunction calcFrobeniusCoefficients<T>(\n  Fp: mod.IField<T>,\n  nonResidue: T,\n  modulus: bigint,\n  degree: number,\n  num: number = 1,\n  divisor?: number\n) {\n  const _divisor = BigInt(divisor === undefined ? degree : divisor);\n  const towerModulus: any = modulus ** BigInt(degree);\n  const res: T[][] = [];\n  for (let i = 0; i < num; i++) {\n    const a = BigInt(i + 1);\n    const powers: T[] = [];\n    for (let j = 0, qPower = _1n; j < degree; j++) {\n      const power = ((a * qPower - a) / _divisor) % towerModulus;\n      powers.push(Fp.pow(nonResidue, power));\n      qPower *= modulus;\n    }\n    res.push(powers);\n  }\n  return res;\n}\n\n// This works same at least for bls12-381, bn254 and bls12-377\nexport function psiFrobenius(\n  Fp: mod.IField<Fp>,\n  Fp2: Fp2Bls,\n  base: Fp2\n): {\n  psi: (x: Fp2, y: Fp2) => [Fp2, Fp2];\n  psi2: (x: Fp2, y: Fp2) => [Fp2, Fp2];\n  G2psi: (c: WeierstrassPointCons<Fp2>, P: WeierstrassPoint<Fp2>) => WeierstrassPoint<Fp2>;\n  G2psi2: (c: WeierstrassPointCons<Fp2>, P: WeierstrassPoint<Fp2>) => WeierstrassPoint<Fp2>;\n  PSI_X: Fp2;\n  PSI_Y: Fp2;\n  PSI2_X: Fp2;\n  PSI2_Y: Fp2;\n} {\n  // GLV endomorphism Ψ(P)\n  const PSI_X = Fp2.pow(base, (Fp.ORDER - _1n) / _3n); // u^((p-1)/3)\n  const PSI_Y = Fp2.pow(base, (Fp.ORDER - _1n) / _2n); // u^((p-1)/2)\n  function psi(x: Fp2, y: Fp2): [Fp2, Fp2] {\n    // This x10 faster than previous version in bls12-381\n    const x2 = Fp2.mul(Fp2.frobeniusMap(x, 1), PSI_X);\n    const y2 = Fp2.mul(Fp2.frobeniusMap(y, 1), PSI_Y);\n    return [x2, y2];\n  }\n  // Ψ²(P) endomorphism (psi2(x) = psi(psi(x)))\n  const PSI2_X = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _3n); // u^((p^2 - 1)/3)\n  // This equals -1, which causes y to be Fp2.neg(y).\n  // But not sure if there are case when this is not true?\n  const PSI2_Y = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _2n); // u^((p^2 - 1)/3)\n  if (!Fp2.eql(PSI2_Y, Fp2.neg(Fp2.ONE))) throw new Error('psiFrobenius: PSI2_Y!==-1');\n  function psi2(x: Fp2, y: Fp2): [Fp2, Fp2] {\n    return [Fp2.mul(x, PSI2_X), Fp2.neg(y)];\n  }\n  // Map points\n  const mapAffine =\n    <T>(fn: (x: T, y: T) => [T, T]) =>\n    (c: WeierstrassPointCons<T>, P: WeierstrassPoint<T>) => {\n      const affine = P.toAffine();\n      const p = fn(affine.x, affine.y);\n      return c.fromAffine({ x: p[0], y: p[1] });\n    };\n  const G2psi = mapAffine(psi);\n  const G2psi2 = mapAffine(psi2);\n  return { psi, psi2, G2psi, G2psi2, PSI_X, PSI_Y, PSI2_X, PSI2_Y };\n}\n\nexport type Tower12Opts = {\n  ORDER: bigint;\n  X_LEN: number;\n  NONRESIDUE?: Fp;\n  FP2_NONRESIDUE: BigintTuple;\n  Fp2sqrt?: (num: Fp2) => Fp2;\n  Fp2mulByB: (num: Fp2) => Fp2;\n  Fp12finalExponentiate: (num: Fp12) => Fp12;\n};\n\nconst Fp2fromBigTuple = (Fp: mod.IField<bigint>, tuple: BigintTuple | bigint[]) => {\n  if (tuple.length !== 2) throw new Error('invalid tuple');\n  const fps = tuple.map((n) => Fp.create(n)) as BigintTuple;\n  return { c0: fps[0], c1: fps[1] };\n};\n\nclass _Field2 implements mod.IField<Fp2> {\n  readonly ORDER: bigint;\n  readonly BITS: number;\n  readonly BYTES: number;\n  readonly isLE: boolean;\n  readonly MASK = _1n;\n\n  readonly ZERO: Fp2;\n  readonly ONE: Fp2;\n  readonly Fp: mod.IField<bigint>;\n\n  readonly NONRESIDUE: Fp2;\n  readonly mulByB: Tower12Opts['Fp2mulByB'];\n  readonly Fp_NONRESIDUE: bigint;\n  readonly Fp_div2: bigint;\n  readonly FROBENIUS_COEFFICIENTS: Fp[];\n\n  constructor(\n    Fp: mod.IField<bigint>,\n    opts: Partial<{\n      NONRESIDUE: bigint;\n      FP2_NONRESIDUE: BigintTuple;\n      Fp2mulByB: Tower12Opts['Fp2mulByB'];\n    }> = {}\n  ) {\n    const ORDER = Fp.ORDER;\n    const FP2_ORDER = ORDER * ORDER;\n    this.Fp = Fp;\n    this.ORDER = FP2_ORDER;\n    this.BITS = bitLen(FP2_ORDER);\n    this.BYTES = Math.ceil(bitLen(FP2_ORDER) / 8);\n    this.isLE = Fp.isLE;\n    this.ZERO = { c0: Fp.ZERO, c1: Fp.ZERO };\n    this.ONE = { c0: Fp.ONE, c1: Fp.ZERO };\n\n    this.Fp_NONRESIDUE = Fp.create(opts.NONRESIDUE || BigInt(-1));\n    this.Fp_div2 = Fp.div(Fp.ONE, _2n); // 1/2\n    this.NONRESIDUE = Fp2fromBigTuple(Fp, opts.FP2_NONRESIDUE!);\n    // const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);\n    this.FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp, this.Fp_NONRESIDUE, Fp.ORDER, 2)[0];\n    this.mulByB = opts.Fp2mulByB!;\n    Object.seal(this);\n  }\n  fromBigTuple(tuple: BigintTuple) {\n    return Fp2fromBigTuple(this.Fp, tuple);\n  }\n  create(num: Fp2) {\n    return num;\n  }\n  isValid({ c0, c1 }: Fp2) {\n    function isValidC(num: bigint, ORDER: bigint) {\n      return typeof num === 'bigint' && _0n <= num && num < ORDER;\n    }\n    return isValidC(c0, this.ORDER) && isValidC(c1, this.ORDER);\n  }\n  is0({ c0, c1 }: Fp2) {\n    return this.Fp.is0(c0) && this.Fp.is0(c1);\n  }\n  isValidNot0(num: Fp2) {\n    return !this.is0(num) && this.isValid(num);\n  }\n  eql({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) {\n    return this.Fp.eql(c0, r0) && this.Fp.eql(c1, r1);\n  }\n  neg({ c0, c1 }: Fp2) {\n    return { c0: this.Fp.neg(c0), c1: this.Fp.neg(c1) };\n  }\n  pow(num: Fp2, power: bigint): Fp2 {\n    return mod.FpPow(this, num, power);\n  }\n  invertBatch(nums: Fp2[]): Fp2[] {\n    return mod.FpInvertBatch(this, nums);\n  }\n  // Normalized\n  add(f1: Fp2, f2: Fp2): Fp2 {\n    const { c0, c1 } = f1;\n    const { c0: r0, c1: r1 } = f2;\n    return {\n      c0: this.Fp.add(c0, r0),\n      c1: this.Fp.add(c1, r1),\n    };\n  }\n  sub({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) {\n    return {\n      c0: this.Fp.sub(c0, r0),\n      c1: this.Fp.sub(c1, r1),\n    };\n  }\n  mul({ c0, c1 }: Fp2, rhs: Fp2) {\n    const { Fp } = this;\n    if (typeof rhs === 'bigint') return { c0: Fp.mul(c0, rhs), c1: Fp.mul(c1, rhs) };\n    // (a+bi)(c+di) = (ac−bd) + (ad+bc)i\n    const { c0: r0, c1: r1 } = rhs;\n    let t1 = Fp.mul(c0, r0); // c0 * o0\n    let t2 = Fp.mul(c1, r1); // c1 * o1\n    // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\n    const o0 = Fp.sub(t1, t2);\n    const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\n    return { c0: o0, c1: o1 };\n  }\n  sqr({ c0, c1 }: Fp2) {\n    const { Fp } = this;\n    const a = Fp.add(c0, c1);\n    const b = Fp.sub(c0, c1);\n    const c = Fp.add(c0, c0);\n    return { c0: Fp.mul(a, b), c1: Fp.mul(c, c1) };\n  }\n  // NonNormalized stuff\n  addN(a: Fp2, b: Fp2): Fp2 {\n    return this.add(a, b);\n  }\n  subN(a: Fp2, b: Fp2): Fp2 {\n    return this.sub(a, b);\n  }\n  mulN(a: Fp2, b: Fp2): Fp2 {\n    return this.mul(a, b);\n  }\n  sqrN(a: Fp2): Fp2 {\n    return this.sqr(a);\n  }\n  // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\n  div(lhs: Fp2, rhs: Fp2): Fp2 {\n    const { Fp } = this;\n    // @ts-ignore\n    return this.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : this.inv(rhs));\n  }\n  inv({ c0: a, c1: b }: Fp2): Fp2 {\n    // We wish to find the multiplicative inverse of a nonzero\n    // element a + bu in Fp2. We leverage an identity\n    //\n    // (a + bu)(a - bu) = a² + b²\n    //\n    // which holds because u² = -1. This can be rewritten as\n    //\n    // (a + bu)(a - bu)/(a² + b²) = 1\n    //\n    // because a² + b² = 0 has no nonzero solutions for (a, b).\n    // This gives that (a - bu)/(a² + b²) is the inverse\n    // of (a + bu). Importantly, this can be computing using\n    // only a single inversion in Fp.\n    const { Fp } = this;\n    const factor = Fp.inv(Fp.create(a * a + b * b));\n    return { c0: Fp.mul(factor, Fp.create(a)), c1: Fp.mul(factor, Fp.create(-b)) };\n  }\n  sqrt(num: Fp2) {\n    // This is generic for all quadratic extensions (Fp2)\n    const { Fp } = this;\n    const Fp2 = this;\n    const { c0, c1 } = num;\n    if (Fp.is0(c1)) {\n      // if c0 is quadratic residue\n      if (mod.FpLegendre(Fp, c0) === 1) return Fp2.create({ c0: Fp.sqrt(c0), c1: Fp.ZERO });\n      else return Fp2.create({ c0: Fp.ZERO, c1: Fp.sqrt(Fp.div(c0, this.Fp_NONRESIDUE)) });\n    }\n    const a = Fp.sqrt(Fp.sub(Fp.sqr(c0), Fp.mul(Fp.sqr(c1), this.Fp_NONRESIDUE)));\n    let d = Fp.mul(Fp.add(a, c0), this.Fp_div2);\n    const legendre = mod.FpLegendre(Fp, d);\n    // -1, Quadratic non residue\n    if (legendre === -1) d = Fp.sub(d, a);\n    const a0 = Fp.sqrt(d);\n    const candidateSqrt = Fp2.create({ c0: a0, c1: Fp.div(Fp.mul(c1, this.Fp_div2), a0) });\n    if (!Fp2.eql(Fp2.sqr(candidateSqrt), num)) throw new Error('Cannot find square root');\n    // Normalize root: at this point candidateSqrt ** 2 = num, but also -candidateSqrt ** 2 = num\n    const x1 = candidateSqrt;\n    const x2 = Fp2.neg(x1);\n    const { re: re1, im: im1 } = Fp2.reim(x1);\n    const { re: re2, im: im2 } = Fp2.reim(x2);\n    if (im1 > im2 || (im1 === im2 && re1 > re2)) return x1;\n    return x2;\n  }\n  // Same as sgn0_m_eq_2 in RFC 9380\n  isOdd(x: Fp2) {\n    const { re: x0, im: x1 } = this.reim(x);\n    const sign_0 = x0 % _2n;\n    const zero_0 = x0 === _0n;\n    const sign_1 = x1 % _2n;\n    return BigInt(sign_0 || (zero_0 && sign_1)) == _1n;\n  }\n  // Bytes util\n  fromBytes(b: Uint8Array): Fp2 {\n    const { Fp } = this;\n    if (b.length !== this.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n    return { c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)), c1: Fp.fromBytes(b.subarray(Fp.BYTES)) };\n  }\n  toBytes({ c0, c1 }: Fp2) {\n    return concatBytes(this.Fp.toBytes(c0), this.Fp.toBytes(c1));\n  }\n  cmov({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2, c: boolean) {\n    return {\n      c0: this.Fp.cmov(c0, r0, c),\n      c1: this.Fp.cmov(c1, r1, c),\n    };\n  }\n  reim({ c0, c1 }: Fp2) {\n    return { re: c0, im: c1 };\n  }\n  Fp4Square(a: Fp2, b: Fp2): { first: Fp2; second: Fp2 } {\n    const Fp2 = this;\n    const a2 = Fp2.sqr(a);\n    const b2 = Fp2.sqr(b);\n    return {\n      first: Fp2.add(Fp2.mulByNonresidue(b2), a2), // b² * Nonresidue + a²\n      second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2), // (a + b)² - a² - b²\n    };\n  }\n  // multiply by u + 1\n  mulByNonresidue({ c0, c1 }: Fp2) {\n    return this.mul({ c0, c1 }, this.NONRESIDUE);\n  }\n  frobeniusMap({ c0, c1 }: Fp2, power: number): Fp2 {\n    return {\n      c0,\n      c1: this.Fp.mul(c1, this.FROBENIUS_COEFFICIENTS[power % 2]),\n    };\n  }\n}\n\nclass _Field6 implements Fp6Bls {\n  readonly ORDER: bigint;\n  readonly BITS: number;\n  readonly BYTES: number;\n  readonly isLE: boolean;\n  readonly MASK = _1n;\n\n  readonly ZERO: Fp6;\n  readonly ONE: Fp6;\n  readonly Fp2: Fp2Bls;\n  readonly FROBENIUS_COEFFICIENTS_1: Fp2[];\n  readonly FROBENIUS_COEFFICIENTS_2: Fp2[];\n\n  constructor(Fp2: Fp2Bls) {\n    this.Fp2 = Fp2;\n    this.ORDER = Fp2.ORDER; // TODO: unused, but need to verify\n    this.BITS = 3 * Fp2.BITS;\n    this.BYTES = 3 * Fp2.BYTES;\n    this.isLE = Fp2.isLE;\n    this.ZERO = { c0: Fp2.ZERO, c1: Fp2.ZERO, c2: Fp2.ZERO };\n    this.ONE = { c0: Fp2.ONE, c1: Fp2.ZERO, c2: Fp2.ZERO };\n    const { Fp } = Fp2;\n    const frob = calcFrobeniusCoefficients(Fp2, Fp2.NONRESIDUE, Fp.ORDER, 6, 2, 3);\n    this.FROBENIUS_COEFFICIENTS_1 = frob[0];\n    this.FROBENIUS_COEFFICIENTS_2 = frob[1];\n    Object.seal(this);\n  }\n  add({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) {\n    const { Fp2 } = this;\n    return {\n      c0: Fp2.add(c0, r0),\n      c1: Fp2.add(c1, r1),\n      c2: Fp2.add(c2, r2),\n    };\n  }\n  sub({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) {\n    const { Fp2 } = this;\n    return {\n      c0: Fp2.sub(c0, r0),\n      c1: Fp2.sub(c1, r1),\n      c2: Fp2.sub(c2, r2),\n    };\n  }\n  mul({ c0, c1, c2 }: Fp6, rhs: Fp6 | bigint) {\n    const { Fp2 } = this;\n    if (typeof rhs === 'bigint') {\n      return {\n        c0: Fp2.mul(c0, rhs),\n        c1: Fp2.mul(c1, rhs),\n        c2: Fp2.mul(c2, rhs),\n      };\n    }\n    const { c0: r0, c1: r1, c2: r2 } = rhs;\n    const t0 = Fp2.mul(c0, r0); // c0 * o0\n    const t1 = Fp2.mul(c1, r1); // c1 * o1\n    const t2 = Fp2.mul(c2, r2); // c2 * o2\n    return {\n      // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\n      c0: Fp2.add(\n        t0,\n        Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))\n      ),\n      // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\n      c1: Fp2.add(\n        Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)),\n        Fp2.mulByNonresidue(t2)\n      ),\n      // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\n      c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2)),\n    };\n  }\n  sqr({ c0, c1, c2 }: Fp6) {\n    const { Fp2 } = this;\n    let t0 = Fp2.sqr(c0); // c0²\n    let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\n    let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\n    let t4 = Fp2.sqr(c2); // c2²\n    return {\n      c0: Fp2.add(Fp2.mulByNonresidue(t3), t0), // T3 * (u + 1) + T0\n      c1: Fp2.add(Fp2.mulByNonresidue(t4), t1), // T4 * (u + 1) + T1\n      // T1 + (c0 - c1 + c2)² + T3 - T0 - T4\n      c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4),\n    };\n  }\n  addN(a: Fp6, b: Fp6): Fp6 {\n    return this.add(a, b);\n  }\n  subN(a: Fp6, b: Fp6): Fp6 {\n    return this.sub(a, b);\n  }\n  mulN(a: Fp6, b: Fp6): Fp6 {\n    return this.mul(a, b);\n  }\n  sqrN(a: Fp6): Fp6 {\n    return this.sqr(a);\n  }\n\n  create(num: Fp6) {\n    return num;\n  }\n\n  isValid({ c0, c1, c2 }: Fp6) {\n    const { Fp2 } = this;\n    return Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2);\n  }\n  is0({ c0, c1, c2 }: Fp6) {\n    const { Fp2 } = this;\n    return Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2);\n  }\n  isValidNot0(num: Fp6) {\n    return !this.is0(num) && this.isValid(num);\n  }\n  neg({ c0, c1, c2 }: Fp6) {\n    const { Fp2 } = this;\n    return { c0: Fp2.neg(c0), c1: Fp2.neg(c1), c2: Fp2.neg(c2) };\n  }\n  eql({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) {\n    const { Fp2 } = this;\n    return Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2);\n  }\n  sqrt(_: Fp6) {\n    return notImplemented();\n  }\n  // Do we need division by bigint at all? Should be done via order:\n  div(lhs: Fp6, rhs: Fp6) {\n    const { Fp2 } = this;\n    const { Fp } = Fp2;\n    return this.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : this.inv(rhs));\n  }\n  pow(num: Fp6, power: Fp): Fp6 {\n    return mod.FpPow(this, num, power);\n  }\n  invertBatch(nums: Fp6[]): Fp6[] {\n    return mod.FpInvertBatch(this, nums);\n  }\n\n  inv({ c0, c1, c2 }: Fp6) {\n    const { Fp2 } = this;\n    let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0² - c2 * c1 * (u + 1)\n    let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2² * (u + 1) - c0 * c1\n    let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1² - c0 * c2\n    // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\n    let t4 = Fp2.inv(\n      Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0))\n    );\n    return { c0: Fp2.mul(t4, t0), c1: Fp2.mul(t4, t1), c2: Fp2.mul(t4, t2) };\n  }\n  // Bytes utils\n  fromBytes(b: Uint8Array): Fp6 {\n    const { Fp2 } = this;\n    if (b.length !== this.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n    const B2 = Fp2.BYTES;\n    return {\n      c0: Fp2.fromBytes(b.subarray(0, B2)),\n      c1: Fp2.fromBytes(b.subarray(B2, B2 * 2)),\n      c2: Fp2.fromBytes(b.subarray(2 * B2)),\n    };\n  }\n  toBytes({ c0, c1, c2 }: Fp6): Uint8Array {\n    const { Fp2 } = this;\n    return concatBytes(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2));\n  }\n  cmov({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6, c: boolean) {\n    const { Fp2 } = this;\n    return {\n      c0: Fp2.cmov(c0, r0, c),\n      c1: Fp2.cmov(c1, r1, c),\n      c2: Fp2.cmov(c2, r2, c),\n    };\n  }\n  fromBigSix(t: BigintSix): Fp6 {\n    const { Fp2 } = this;\n    if (!Array.isArray(t) || t.length !== 6) throw new Error('invalid Fp6 usage');\n    return {\n      c0: Fp2.fromBigTuple(t.slice(0, 2) as BigintTuple),\n      c1: Fp2.fromBigTuple(t.slice(2, 4) as BigintTuple),\n      c2: Fp2.fromBigTuple(t.slice(4, 6) as BigintTuple),\n    };\n  }\n  frobeniusMap({ c0, c1, c2 }: Fp6, power: number) {\n    const { Fp2 } = this;\n    return {\n      c0: Fp2.frobeniusMap(c0, power),\n      c1: Fp2.mul(Fp2.frobeniusMap(c1, power), this.FROBENIUS_COEFFICIENTS_1[power % 6]),\n      c2: Fp2.mul(Fp2.frobeniusMap(c2, power), this.FROBENIUS_COEFFICIENTS_2[power % 6]),\n    };\n  }\n  mulByFp2({ c0, c1, c2 }: Fp6, rhs: Fp2): Fp6 {\n    const { Fp2 } = this;\n    return {\n      c0: Fp2.mul(c0, rhs),\n      c1: Fp2.mul(c1, rhs),\n      c2: Fp2.mul(c2, rhs),\n    };\n  }\n  mulByNonresidue({ c0, c1, c2 }: Fp6) {\n    const { Fp2 } = this;\n    return { c0: Fp2.mulByNonresidue(c2), c1: c0, c2: c1 };\n  }\n  // Sparse multiplication\n  mul1({ c0, c1, c2 }: Fp6, b1: Fp2): Fp6 {\n    const { Fp2 } = this;\n    return {\n      c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\n      c1: Fp2.mul(c0, b1),\n      c2: Fp2.mul(c1, b1),\n    };\n  }\n  // Sparse multiplication\n  mul01({ c0, c1, c2 }: Fp6, b0: Fp2, b1: Fp2): Fp6 {\n    const { Fp2 } = this;\n    let t0 = Fp2.mul(c0, b0); // c0 * b0\n    let t1 = Fp2.mul(c1, b1); // c1 * b1\n    return {\n      // ((c1 + c2) * b1 - T1) * (u + 1) + T0\n      c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\n      // (b0 + b1) * (c0 + c1) - T0 - T1\n      c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\n      // (c0 + c2) * b0 - T0 + T1\n      c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1),\n    };\n  }\n}\n\nclass _Field12 implements Fp12Bls {\n  readonly ORDER: bigint;\n  readonly BITS: number;\n  readonly BYTES: number;\n  readonly isLE: boolean;\n  readonly MASK = _1n;\n\n  readonly ZERO: Fp12;\n  readonly ONE: Fp12;\n\n  readonly Fp6: Fp6Bls;\n  readonly FROBENIUS_COEFFICIENTS: Fp2[];\n  readonly X_LEN: number;\n  readonly finalExponentiate: Tower12Opts['Fp12finalExponentiate'];\n\n  constructor(Fp6: Fp6Bls, opts: Tower12Opts) {\n    const { Fp2 } = Fp6;\n    const { Fp } = Fp2;\n    this.Fp6 = Fp6;\n\n    this.ORDER = Fp2.ORDER; // TODO: verify if it's unuesd\n    this.BITS = 2 * Fp6.BITS;\n    this.BYTES = 2 * Fp6.BYTES;\n    this.isLE = Fp6.isLE;\n    this.ZERO = { c0: Fp6.ZERO, c1: Fp6.ZERO };\n    this.ONE = { c0: Fp6.ONE, c1: Fp6.ZERO };\n\n    this.FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(\n      Fp2,\n      Fp2.NONRESIDUE,\n      Fp.ORDER,\n      12,\n      1,\n      6\n    )[0];\n    this.X_LEN = opts.X_LEN;\n    this.finalExponentiate = opts.Fp12finalExponentiate;\n  }\n  create(num: Fp12) {\n    return num;\n  }\n  isValid({ c0, c1 }: Fp12) {\n    const { Fp6 } = this;\n    return Fp6.isValid(c0) && Fp6.isValid(c1);\n  }\n  is0({ c0, c1 }: Fp12) {\n    const { Fp6 } = this;\n    return Fp6.is0(c0) && Fp6.is0(c1);\n  }\n  isValidNot0(num: Fp12) {\n    return !this.is0(num) && this.isValid(num);\n  }\n  neg({ c0, c1 }: Fp12) {\n    const { Fp6 } = this;\n    return { c0: Fp6.neg(c0), c1: Fp6.neg(c1) };\n  }\n  eql({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) {\n    const { Fp6 } = this;\n    return Fp6.eql(c0, r0) && Fp6.eql(c1, r1);\n  }\n  sqrt(_: any): any {\n    notImplemented();\n  }\n  inv({ c0, c1 }: Fp12) {\n    const { Fp6 } = this;\n    let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0² - c1² * v)\n    return { c0: Fp6.mul(c0, t), c1: Fp6.neg(Fp6.mul(c1, t)) }; // ((C0 * T) * T) + (-C1 * T) * w\n  }\n  div(lhs: Fp12, rhs: Fp12) {\n    const { Fp6 } = this;\n    const { Fp2 } = Fp6;\n    const { Fp } = Fp2;\n    return this.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : this.inv(rhs));\n  }\n  pow(num: Fp12, power: bigint): Fp12 {\n    return mod.FpPow(this, num, power);\n  }\n  invertBatch(nums: Fp12[]): Fp12[] {\n    return mod.FpInvertBatch(this, nums);\n  }\n\n  // Normalized\n  add({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) {\n    const { Fp6 } = this;\n    return {\n      c0: Fp6.add(c0, r0),\n      c1: Fp6.add(c1, r1),\n    };\n  }\n  sub({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) {\n    const { Fp6 } = this;\n    return {\n      c0: Fp6.sub(c0, r0),\n      c1: Fp6.sub(c1, r1),\n    };\n  }\n  mul({ c0, c1 }: Fp12, rhs: Fp12 | bigint) {\n    const { Fp6 } = this;\n    if (typeof rhs === 'bigint') return { c0: Fp6.mul(c0, rhs), c1: Fp6.mul(c1, rhs) };\n    let { c0: r0, c1: r1 } = rhs;\n    let t1 = Fp6.mul(c0, r0); // c0 * r0\n    let t2 = Fp6.mul(c1, r1); // c1 * r1\n    return {\n      c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)), // T1 + T2 * v\n      // (c0 + c1) * (r0 + r1) - (T1 + T2)\n      c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2)),\n    };\n  }\n  sqr({ c0, c1 }: Fp12) {\n    const { Fp6 } = this;\n    let ab = Fp6.mul(c0, c1); // c0 * c1\n    return {\n      // (c1 * v + c0) * (c0 + c1) - AB - AB * v\n      c0: Fp6.sub(\n        Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab),\n        Fp6.mulByNonresidue(ab)\n      ),\n      c1: Fp6.add(ab, ab),\n    }; // AB + AB\n  }\n  // NonNormalized stuff\n  addN(a: Fp12, b: Fp12): Fp12 {\n    return this.add(a, b);\n  }\n  subN(a: Fp12, b: Fp12): Fp12 {\n    return this.sub(a, b);\n  }\n  mulN(a: Fp12, b: Fp12): Fp12 {\n    return this.mul(a, b);\n  }\n  sqrN(a: Fp12): Fp12 {\n    return this.sqr(a);\n  }\n\n  // Bytes utils\n  fromBytes(b: Uint8Array): Fp12 {\n    const { Fp6 } = this;\n    if (b.length !== this.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n    return {\n      c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\n      c1: Fp6.fromBytes(b.subarray(Fp6.BYTES)),\n    };\n  }\n  toBytes({ c0, c1 }: Fp12): Uint8Array {\n    const { Fp6 } = this;\n    return concatBytes(Fp6.toBytes(c0), Fp6.toBytes(c1));\n  }\n  cmov({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12, c: boolean) {\n    const { Fp6 } = this;\n    return {\n      c0: Fp6.cmov(c0, r0, c),\n      c1: Fp6.cmov(c1, r1, c),\n    };\n  }\n  // Utils\n  // toString() {\n  //   return '' + 'Fp12(' + this.c0 + this.c1 + '* w');\n  // },\n  // fromTuple(c: [Fp6, Fp6]) {\n  //   return new Fp12(...c);\n  // }\n  fromBigTwelve(t: BigintTwelve): Fp12 {\n    const { Fp6 } = this;\n    return {\n      c0: Fp6.fromBigSix(t.slice(0, 6) as BigintSix),\n      c1: Fp6.fromBigSix(t.slice(6, 12) as BigintSix),\n    };\n  }\n  // Raises to q**i -th power\n  frobeniusMap(lhs: Fp12, power: number) {\n    const { Fp6 } = this;\n    const { Fp2 } = Fp6;\n    const { c0, c1, c2 } = Fp6.frobeniusMap(lhs.c1, power);\n    const coeff = this.FROBENIUS_COEFFICIENTS[power % 12];\n    return {\n      c0: Fp6.frobeniusMap(lhs.c0, power),\n      c1: Fp6.create({\n        c0: Fp2.mul(c0, coeff),\n        c1: Fp2.mul(c1, coeff),\n        c2: Fp2.mul(c2, coeff),\n      }),\n    };\n  }\n  mulByFp2({ c0, c1 }: Fp12, rhs: Fp2): Fp12 {\n    const { Fp6 } = this;\n    return {\n      c0: Fp6.mulByFp2(c0, rhs),\n      c1: Fp6.mulByFp2(c1, rhs),\n    };\n  }\n  conjugate({ c0, c1 }: Fp12): Fp12 {\n    return { c0, c1: this.Fp6.neg(c1) };\n  }\n  // Sparse multiplication\n  mul014({ c0, c1 }: Fp12, o0: Fp2, o1: Fp2, o4: Fp2) {\n    const { Fp6 } = this;\n    const { Fp2 } = Fp6;\n    let t0 = Fp6.mul01(c0, o0, o1);\n    let t1 = Fp6.mul1(c1, o4);\n    return {\n      c0: Fp6.add(Fp6.mulByNonresidue(t1), t0), // T1 * v + T0\n      // (c1 + c0) * [o0, o1+o4] - T0 - T1\n      c1: Fp6.sub(Fp6.sub(Fp6.mul01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1),\n    };\n  }\n  mul034({ c0, c1 }: Fp12, o0: Fp2, o3: Fp2, o4: Fp2) {\n    const { Fp6 } = this;\n    const { Fp2 } = Fp6;\n    const a = Fp6.create({\n      c0: Fp2.mul(c0.c0, o0),\n      c1: Fp2.mul(c0.c1, o0),\n      c2: Fp2.mul(c0.c2, o0),\n    });\n    const b = Fp6.mul01(c1, o3, o4);\n    const e = Fp6.mul01(Fp6.add(c0, c1), Fp2.add(o0, o3), o4);\n    return {\n      c0: Fp6.add(Fp6.mulByNonresidue(b), a),\n      c1: Fp6.sub(e, Fp6.add(a, b)),\n    };\n  }\n\n  // A cyclotomic group is a subgroup of Fp^n defined by\n  //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n  // The result of any pairing is in a cyclotomic subgroup\n  // https://eprint.iacr.org/2009/565.pdf\n  // https://eprint.iacr.org/2010/354.pdf\n  _cyclotomicSquare({ c0, c1 }: Fp12): Fp12 {\n    const { Fp6 } = this;\n    const { Fp2 } = Fp6;\n    const { c0: c0c0, c1: c0c1, c2: c0c2 } = c0;\n    const { c0: c1c0, c1: c1c1, c2: c1c2 } = c1;\n    const { first: t3, second: t4 } = Fp2.Fp4Square(c0c0, c1c1);\n    const { first: t5, second: t6 } = Fp2.Fp4Square(c1c0, c0c2);\n    const { first: t7, second: t8 } = Fp2.Fp4Square(c0c1, c1c2);\n    const t9 = Fp2.mulByNonresidue(t8); // T8 * (u + 1)\n    return {\n      c0: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n), t3), // 2 * (T3 - c0c0)  + T3\n        c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n), t5), // 2 * (T5 - c0c1)  + T5\n        c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n), t7),\n      }), // 2 * (T7 - c0c2)  + T7\n      c1: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n), t9), // 2 * (T9 + c1c0) + T9\n        c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n), t4), // 2 * (T4 + c1c1) + T4\n        c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n), t6),\n      }),\n    }; // 2 * (T6 + c1c2) + T6\n  }\n  // https://eprint.iacr.org/2009/565.pdf\n  _cyclotomicExp(num: Fp12, n: bigint): Fp12 {\n    let z = this.ONE;\n    for (let i = this.X_LEN - 1; i >= 0; i--) {\n      z = this._cyclotomicSquare(z);\n      if (bitGet(n, i)) z = this.mul(z, num);\n    }\n    return z;\n  }\n}\n\nexport function tower12(opts: Tower12Opts): {\n  Fp: Readonly<mod.IField<bigint> & Required<Pick<mod.IField<bigint>, 'isOdd'>>>;\n  Fp2: Fp2Bls;\n  Fp6: Fp6Bls;\n  Fp12: Fp12Bls;\n} {\n  const Fp = mod.Field(opts.ORDER);\n  const Fp2 = new _Field2(Fp, opts);\n  const Fp6 = new _Field6(Fp2);\n  const Fp12 = new _Field12(Fp6, opts);\n  return { Fp, Fp2, Fp6, Fp12 };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}