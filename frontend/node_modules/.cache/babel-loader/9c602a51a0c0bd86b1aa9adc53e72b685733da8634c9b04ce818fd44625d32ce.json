{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from './useAuth';\nimport landRegistryService from '../services/LandRegistryService';\nexport const useLandRegistry = () => {\n  _s();\n  // State\n  const [parcels, setParcels] = useState([]);\n  const [userParcels, setUserParcels] = useState([]);\n  const [transferRequests, setTransferRequests] = useState([]);\n  const [pendingTransfers, setPendingTransfers] = useState([]);\n  const [userProfile, setUserProfile] = useState(null);\n  const [selectedParcel, setSelectedParcel] = useState(null);\n\n  // Loading states\n  const [loading, setLoading] = useState(false);\n  const [parcelsLoading, setParcelsLoading] = useState(false);\n  const [transfersLoading, setTransfersLoading] = useState(false);\n  const [profileLoading, setProfileLoading] = useState(false);\n\n  // Error states\n  const [error, setError] = useState(null);\n  const [parcelsError, setParcelsError] = useState(null);\n  const [transfersError, setTransfersError] = useState(null);\n  const [profileError, setProfileError] = useState(null);\n  const {\n    authClient,\n    principal,\n    isAuthenticated\n  } = useAuth();\n\n  // Initialize service when auth state changes\n  useEffect(() => {\n    const initializeService = async () => {\n      if (authClient) {\n        try {\n          await landRegistryService.init(authClient);\n        } catch (err) {\n          console.error('Failed to initialize land registry service:', err);\n          setError('Failed to initialize service');\n        }\n      }\n    };\n    initializeService();\n  }, [authClient]);\n\n  // Load initial data when authenticated\n  useEffect(() => {\n    if (isAuthenticated && principal) {\n      loadUserProfile();\n      loadUserParcels();\n      if ((userProfile === null || userProfile === void 0 ? void 0 : userProfile.role) === 'Admin') {\n        loadAllParcels();\n        loadTransferRequests();\n      }\n    }\n  }, [isAuthenticated, principal, userProfile === null || userProfile === void 0 ? void 0 : userProfile.role]);\n  const handleError = useCallback((err, setter) => {\n    const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';\n    console.error('Land Registry Error:', err);\n    setter(errorMessage);\n    setError(errorMessage);\n  }, []);\n  const clearError = useCallback(() => {\n    setError(null);\n    setParcelsError(null);\n    setTransfersError(null);\n    setProfileError(null);\n  }, []);\n\n  // Load all parcels (admin only)\n  const loadAllParcels = useCallback(async () => {\n    setParcelsLoading(true);\n    setParcelsError(null);\n    try {\n      const allParcels = await landRegistryService.getAllParcels();\n      setParcels(allParcels);\n    } catch (err) {\n      handleError(err, setParcelsError);\n    } finally {\n      setParcelsLoading(false);\n    }\n  }, [handleError]);\n\n  // Load user's parcels\n  const loadUserParcels = useCallback(async () => {\n    if (!principal) return;\n    setParcelsLoading(true);\n    setParcelsError(null);\n    try {\n      const userParcelsList = await landRegistryService.getParcelsByOwner(principal);\n      setUserParcels(userParcelsList);\n    } catch (err) {\n      handleError(err, setParcelsError);\n    } finally {\n      setParcelsLoading(false);\n    }\n  }, [principal, handleError]);\n\n  // Load transfer requests\n  const loadTransferRequests = useCallback(async () => {\n    setTransfersLoading(true);\n    setTransfersError(null);\n    try {\n      const [requests, pending] = await Promise.all([landRegistryService.getTransferRequests(), landRegistryService.getPendingTransfers()]);\n      setTransferRequests(requests);\n      setPendingTransfers(pending);\n    } catch (err) {\n      handleError(err, setTransfersError);\n    } finally {\n      setTransfersLoading(false);\n    }\n  }, [handleError]);\n\n  // Load user profile\n  const loadUserProfile = useCallback(async () => {\n    if (!principal) return;\n    setProfileLoading(true);\n    setProfileError(null);\n    try {\n      const profile = await landRegistryService.getUserProfile(principal);\n      setUserProfile(profile);\n    } catch (err) {\n      handleError(err, setProfileError);\n    } finally {\n      setProfileLoading(false);\n    }\n  }, [principal, handleError]);\n\n  // Search parcels\n  const searchParcels = useCallback(async filters => {\n    try {\n      return await landRegistryService.searchParcels(filters);\n    } catch (err) {\n      handleError(err, setParcelsError);\n      return [];\n    }\n  }, [handleError]);\n\n  // Get single parcel\n  const getParcel = useCallback(async id => {\n    try {\n      return await landRegistryService.getParcel(id);\n    } catch (err) {\n      handleError(err, setParcelsError);\n      return null;\n    }\n  }, [handleError]);\n\n  // Register new parcel\n  const registerParcel = useCallback(async parcel => {\n    setLoading(true);\n    try {\n      const result = await landRegistryService.registerParcel(parcel);\n      if ('Ok' in result) {\n        await loadUserParcels();\n        if ((userProfile === null || userProfile === void 0 ? void 0 : userProfile.role) === 'Admin') {\n          await loadAllParcels();\n        }\n        return true;\n      } else {\n        throw new Error(result.Err);\n      }\n    } catch (err) {\n      handleError(err, setError);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [loadUserParcels, loadAllParcels, userProfile === null || userProfile === void 0 ? void 0 : userProfile.role, handleError]);\n\n  // Update parcel\n  const updateParcel = useCallback(async (id, updates) => {\n    setLoading(true);\n    try {\n      const result = await landRegistryService.updateParcel(id, updates);\n      if ('Ok' in result) {\n        await loadUserParcels();\n        if ((userProfile === null || userProfile === void 0 ? void 0 : userProfile.role) === 'Admin') {\n          await loadAllParcels();\n        }\n        // Update selected parcel if it's the one being updated\n        if ((selectedParcel === null || selectedParcel === void 0 ? void 0 : selectedParcel.id) === id) {\n          const updatedParcel = await landRegistryService.getParcel(id);\n          setSelectedParcel(updatedParcel);\n        }\n        return true;\n      } else {\n        throw new Error(result.Err);\n      }\n    } catch (err) {\n      handleError(err, setError);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [loadUserParcels, loadAllParcels, selectedParcel, userProfile === null || userProfile === void 0 ? void 0 : userProfile.role, handleError]);\n\n  // Transfer ownership\n  const transferOwnership = useCallback(async request => {\n    setLoading(true);\n    try {\n      const result = await landRegistryService.transferOwnership(request);\n      if ('Ok' in result) {\n        await loadTransferRequests();\n        await loadUserParcels();\n        return true;\n      } else {\n        throw new Error(result.Err);\n      }\n    } catch (err) {\n      handleError(err, setError);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [loadTransferRequests, loadUserParcels, handleError]);\n\n  // Approve transfer (admin only)\n  const approveTransfer = useCallback(async (parcelId, newOwner) => {\n    setLoading(true);\n    try {\n      const result = await landRegistryService.approveTransfer(parcelId, newOwner);\n      if ('Ok' in result) {\n        await loadTransferRequests();\n        await loadAllParcels();\n        return true;\n      } else {\n        throw new Error(result.Err);\n      }\n    } catch (err) {\n      handleError(err, setError);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [loadTransferRequests, loadAllParcels, handleError]);\n\n  // Reject transfer (admin only)\n  const rejectTransfer = useCallback(async (parcelId, reason) => {\n    setLoading(true);\n    try {\n      const result = await landRegistryService.rejectTransfer(parcelId, reason);\n      if ('Ok' in result) {\n        await loadTransferRequests();\n        return true;\n      } else {\n        throw new Error(result.Err);\n      }\n    } catch (err) {\n      handleError(err, setError);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [loadTransferRequests, handleError]);\n\n  // Create user profile\n  const createUserProfile = useCallback(async profile => {\n    setLoading(true);\n    try {\n      const result = await landRegistryService.createUserProfile(profile);\n      if ('Ok' in result) {\n        await loadUserProfile();\n        return true;\n      } else {\n        throw new Error(result.Err);\n      }\n    } catch (err) {\n      handleError(err, setProfileError);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [loadUserProfile, handleError]);\n\n  // Update user profile\n  const updateUserProfile = useCallback(async updates => {\n    setLoading(true);\n    try {\n      const result = await landRegistryService.updateUserProfile(updates);\n      if ('Ok' in result) {\n        await loadUserProfile();\n        return true;\n      } else {\n        throw new Error(result.Err);\n      }\n    } catch (err) {\n      handleError(err, setProfileError);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, [loadUserProfile, handleError]);\n\n  // Select parcel for detailed view\n  const selectParcel = useCallback(parcel => {\n    setSelectedParcel(parcel);\n  }, []);\n\n  // Refresh all data\n  const refresh = useCallback(async () => {\n    if (isAuthenticated && principal) {\n      await Promise.all([loadUserProfile(), loadUserParcels(), (userProfile === null || userProfile === void 0 ? void 0 : userProfile.role) === 'Admin' ? loadAllParcels() : Promise.resolve(), (userProfile === null || userProfile === void 0 ? void 0 : userProfile.role) === 'Admin' ? loadTransferRequests() : Promise.resolve()]);\n    }\n  }, [isAuthenticated, principal, userProfile === null || userProfile === void 0 ? void 0 : userProfile.role, loadUserProfile, loadUserParcels, loadAllParcels, loadTransferRequests]);\n  return {\n    // State\n    parcels,\n    userParcels,\n    transferRequests,\n    pendingTransfers,\n    userProfile,\n    selectedParcel,\n    // Loading states\n    loading,\n    parcelsLoading,\n    transfersLoading,\n    profileLoading,\n    // Error states\n    error,\n    parcelsError,\n    transfersError,\n    profileError,\n    // Actions\n    loadAllParcels,\n    loadUserParcels,\n    loadTransferRequests,\n    loadUserProfile,\n    searchParcels,\n    getParcel,\n    registerParcel,\n    updateParcel,\n    transferOwnership,\n    approveTransfer,\n    rejectTransfer,\n    createUserProfile,\n    updateUserProfile,\n    selectParcel,\n    clearError,\n    refresh\n  };\n};\n_s(useLandRegistry, \"XwKQPSvYDDg6IIBYturyQoFcJHM=\", false, function () {\n  return [useAuth];\n});\nexport default useLandRegistry;","map":{"version":3,"names":["useState","useEffect","useCallback","useAuth","landRegistryService","useLandRegistry","_s","parcels","setParcels","userParcels","setUserParcels","transferRequests","setTransferRequests","pendingTransfers","setPendingTransfers","userProfile","setUserProfile","selectedParcel","setSelectedParcel","loading","setLoading","parcelsLoading","setParcelsLoading","transfersLoading","setTransfersLoading","profileLoading","setProfileLoading","error","setError","parcelsError","setParcelsError","transfersError","setTransfersError","profileError","setProfileError","authClient","principal","isAuthenticated","initializeService","init","err","console","loadUserProfile","loadUserParcels","role","loadAllParcels","loadTransferRequests","handleError","setter","errorMessage","Error","message","clearError","allParcels","getAllParcels","userParcelsList","getParcelsByOwner","requests","pending","Promise","all","getTransferRequests","getPendingTransfers","profile","getUserProfile","searchParcels","filters","getParcel","id","registerParcel","parcel","result","Err","updateParcel","updates","updatedParcel","transferOwnership","request","approveTransfer","parcelId","newOwner","rejectTransfer","reason","createUserProfile","updateUserProfile","selectParcel","refresh","resolve"],"sources":["D:/Kshetra/frontend/src/hooks/useLandRegistry.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport Principal from '@dfinity/principal';\r\nimport { useAuth } from './useAuth';\r\nimport landRegistryService, { LandParcel, TransferRequest, UserProfile } from '../services/LandRegistryService';\r\n\r\ninterface UseLandRegistryReturn {\r\n  // State\r\n  parcels: LandParcel[];\r\n  userParcels: LandParcel[];\r\n  transferRequests: TransferRequest[];\r\n  pendingTransfers: TransferRequest[];\r\n  userProfile: UserProfile | null;\r\n  selectedParcel: LandParcel | null;\r\n  \r\n  // Loading states\r\n  loading: boolean;\r\n  parcelsLoading: boolean;\r\n  transfersLoading: boolean;\r\n  profileLoading: boolean;\r\n  \r\n  // Error states\r\n  error: string | null;\r\n  parcelsError: string | null;\r\n  transfersError: string | null;\r\n  profileError: string | null;\r\n  \r\n  // Actions\r\n  loadAllParcels: () => Promise<void>;\r\n  loadUserParcels: () => Promise<void>;\r\n  loadTransferRequests: () => Promise<void>;\r\n  loadUserProfile: () => Promise<void>;\r\n  searchParcels: (filters: Record<string, string>) => Promise<LandParcel[]>;\r\n  getParcel: (id: string) => Promise<LandParcel | null>;\r\n  registerParcel: (parcel: Omit<LandParcel, 'id' | 'registration_date' | 'last_updated'>) => Promise<boolean>;\r\n  updateParcel: (id: string, updates: Partial<LandParcel>) => Promise<boolean>;\r\n  transferOwnership: (request: TransferRequest) => Promise<boolean>;\r\n  approveTransfer: (parcelId: string, newOwner: Principal) => Promise<boolean>;\r\n  rejectTransfer: (parcelId: string, reason: string) => Promise<boolean>;\r\n  createUserProfile: (profile: Omit<UserProfile, 'principal' | 'registration_date'>) => Promise<boolean>;\r\n  updateUserProfile: (updates: Partial<UserProfile>) => Promise<boolean>;\r\n  selectParcel: (parcel: LandParcel | null) => void;\r\n  clearError: () => void;\r\n  refresh: () => Promise<void>;\r\n}\r\n\r\nexport const useLandRegistry = (): UseLandRegistryReturn => {\r\n  // State\r\n  const [parcels, setParcels] = useState<LandParcel[]>([]);\r\n  const [userParcels, setUserParcels] = useState<LandParcel[]>([]);\r\n  const [transferRequests, setTransferRequests] = useState<TransferRequest[]>([]);\r\n  const [pendingTransfers, setPendingTransfers] = useState<TransferRequest[]>([]);\r\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\r\n  const [selectedParcel, setSelectedParcel] = useState<LandParcel | null>(null);\r\n  \r\n  // Loading states\r\n  const [loading, setLoading] = useState(false);\r\n  const [parcelsLoading, setParcelsLoading] = useState(false);\r\n  const [transfersLoading, setTransfersLoading] = useState(false);\r\n  const [profileLoading, setProfileLoading] = useState(false);\r\n  \r\n  // Error states\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [parcelsError, setParcelsError] = useState<string | null>(null);\r\n  const [transfersError, setTransfersError] = useState<string | null>(null);\r\n  const [profileError, setProfileError] = useState<string | null>(null);\r\n\r\n  const { authClient, principal, isAuthenticated } = useAuth();\r\n\r\n  // Initialize service when auth state changes\r\n  useEffect(() => {\r\n    const initializeService = async () => {\r\n      if (authClient) {\r\n        try {\r\n          await landRegistryService.init(authClient);\r\n        } catch (err) {\r\n          console.error('Failed to initialize land registry service:', err);\r\n          setError('Failed to initialize service');\r\n        }\r\n      }\r\n    };\r\n\r\n    initializeService();\r\n  }, [authClient]);\r\n\r\n  // Load initial data when authenticated\r\n  useEffect(() => {\r\n    if (isAuthenticated && principal) {\r\n      loadUserProfile();\r\n      loadUserParcels();\r\n      if (userProfile?.role === 'Admin') {\r\n        loadAllParcels();\r\n        loadTransferRequests();\r\n      }\r\n    }\r\n  }, [isAuthenticated, principal, userProfile?.role]);\r\n\r\n  const handleError = useCallback((err: any, setter: (error: string | null) => void) => {\r\n    const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';\r\n    console.error('Land Registry Error:', err);\r\n    setter(errorMessage);\r\n    setError(errorMessage);\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n    setParcelsError(null);\r\n    setTransfersError(null);\r\n    setProfileError(null);\r\n  }, []);\r\n\r\n  // Load all parcels (admin only)\r\n  const loadAllParcels = useCallback(async () => {\r\n    setParcelsLoading(true);\r\n    setParcelsError(null);\r\n    try {\r\n      const allParcels = await landRegistryService.getAllParcels();\r\n      setParcels(allParcels);\r\n    } catch (err) {\r\n      handleError(err, setParcelsError);\r\n    } finally {\r\n      setParcelsLoading(false);\r\n    }\r\n  }, [handleError]);\r\n\r\n  // Load user's parcels\r\n  const loadUserParcels = useCallback(async () => {\r\n    if (!principal) return;\r\n    \r\n    setParcelsLoading(true);\r\n    setParcelsError(null);\r\n    try {\r\n      const userParcelsList = await landRegistryService.getParcelsByOwner(principal);\r\n      setUserParcels(userParcelsList);\r\n    } catch (err) {\r\n      handleError(err, setParcelsError);\r\n    } finally {\r\n      setParcelsLoading(false);\r\n    }\r\n  }, [principal, handleError]);\r\n\r\n  // Load transfer requests\r\n  const loadTransferRequests = useCallback(async () => {\r\n    setTransfersLoading(true);\r\n    setTransfersError(null);\r\n    try {\r\n      const [requests, pending] = await Promise.all([\r\n        landRegistryService.getTransferRequests(),\r\n        landRegistryService.getPendingTransfers()\r\n      ]);\r\n      setTransferRequests(requests);\r\n      setPendingTransfers(pending);\r\n    } catch (err) {\r\n      handleError(err, setTransfersError);\r\n    } finally {\r\n      setTransfersLoading(false);\r\n    }\r\n  }, [handleError]);\r\n\r\n  // Load user profile\r\n  const loadUserProfile = useCallback(async () => {\r\n    if (!principal) return;\r\n    \r\n    setProfileLoading(true);\r\n    setProfileError(null);\r\n    try {\r\n      const profile = await landRegistryService.getUserProfile(principal);\r\n      setUserProfile(profile);\r\n    } catch (err) {\r\n      handleError(err, setProfileError);\r\n    } finally {\r\n      setProfileLoading(false);\r\n    }\r\n  }, [principal, handleError]);\r\n\r\n  // Search parcels\r\n  const searchParcels = useCallback(async (filters: Record<string, string>): Promise<LandParcel[]> => {\r\n    try {\r\n      return await landRegistryService.searchParcels(filters);\r\n    } catch (err) {\r\n      handleError(err, setParcelsError);\r\n      return [];\r\n    }\r\n  }, [handleError]);\r\n\r\n  // Get single parcel\r\n  const getParcel = useCallback(async (id: string): Promise<LandParcel | null> => {\r\n    try {\r\n      return await landRegistryService.getParcel(id);\r\n    } catch (err) {\r\n      handleError(err, setParcelsError);\r\n      return null;\r\n    }\r\n  }, [handleError]);\r\n\r\n  // Register new parcel\r\n  const registerParcel = useCallback(async (parcel: Omit<LandParcel, 'id' | 'registration_date' | 'last_updated'>): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await landRegistryService.registerParcel(parcel);\r\n      if ('Ok' in result) {\r\n        await loadUserParcels();\r\n        if (userProfile?.role === 'Admin') {\r\n          await loadAllParcels();\r\n        }\r\n        return true;\r\n      } else {\r\n        throw new Error(result.Err);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, setError);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loadUserParcels, loadAllParcels, userProfile?.role, handleError]);\r\n\r\n  // Update parcel\r\n  const updateParcel = useCallback(async (id: string, updates: Partial<LandParcel>): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await landRegistryService.updateParcel(id, updates);\r\n      if ('Ok' in result) {\r\n        await loadUserParcels();\r\n        if (userProfile?.role === 'Admin') {\r\n          await loadAllParcels();\r\n        }\r\n        // Update selected parcel if it's the one being updated\r\n        if (selectedParcel?.id === id) {\r\n          const updatedParcel = await landRegistryService.getParcel(id);\r\n          setSelectedParcel(updatedParcel);\r\n        }\r\n        return true;\r\n      } else {\r\n        throw new Error(result.Err);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, setError);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loadUserParcels, loadAllParcels, selectedParcel, userProfile?.role, handleError]);\r\n\r\n  // Transfer ownership\r\n  const transferOwnership = useCallback(async (request: TransferRequest): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await landRegistryService.transferOwnership(request);\r\n      if ('Ok' in result) {\r\n        await loadTransferRequests();\r\n        await loadUserParcels();\r\n        return true;\r\n      } else {\r\n        throw new Error(result.Err);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, setError);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loadTransferRequests, loadUserParcels, handleError]);\r\n\r\n  // Approve transfer (admin only)\r\n  const approveTransfer = useCallback(async (parcelId: string, newOwner: Principal): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await landRegistryService.approveTransfer(parcelId, newOwner);\r\n      if ('Ok' in result) {\r\n        await loadTransferRequests();\r\n        await loadAllParcels();\r\n        return true;\r\n      } else {\r\n        throw new Error(result.Err);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, setError);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loadTransferRequests, loadAllParcels, handleError]);\r\n\r\n  // Reject transfer (admin only)\r\n  const rejectTransfer = useCallback(async (parcelId: string, reason: string): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await landRegistryService.rejectTransfer(parcelId, reason);\r\n      if ('Ok' in result) {\r\n        await loadTransferRequests();\r\n        return true;\r\n      } else {\r\n        throw new Error(result.Err);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, setError);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loadTransferRequests, handleError]);\r\n\r\n  // Create user profile\r\n  const createUserProfile = useCallback(async (profile: Omit<UserProfile, 'principal' | 'registration_date'>): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await landRegistryService.createUserProfile(profile);\r\n      if ('Ok' in result) {\r\n        await loadUserProfile();\r\n        return true;\r\n      } else {\r\n        throw new Error(result.Err);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, setProfileError);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loadUserProfile, handleError]);\r\n\r\n  // Update user profile\r\n  const updateUserProfile = useCallback(async (updates: Partial<UserProfile>): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await landRegistryService.updateUserProfile(updates);\r\n      if ('Ok' in result) {\r\n        await loadUserProfile();\r\n        return true;\r\n      } else {\r\n        throw new Error(result.Err);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, setProfileError);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loadUserProfile, handleError]);\r\n\r\n  // Select parcel for detailed view\r\n  const selectParcel = useCallback((parcel: LandParcel | null) => {\r\n    setSelectedParcel(parcel);\r\n  }, []);\r\n\r\n  // Refresh all data\r\n  const refresh = useCallback(async () => {\r\n    if (isAuthenticated && principal) {\r\n      await Promise.all([\r\n        loadUserProfile(),\r\n        loadUserParcels(),\r\n        userProfile?.role === 'Admin' ? loadAllParcels() : Promise.resolve(),\r\n        userProfile?.role === 'Admin' ? loadTransferRequests() : Promise.resolve(),\r\n      ]);\r\n    }\r\n  }, [isAuthenticated, principal, userProfile?.role, loadUserProfile, loadUserParcels, loadAllParcels, loadTransferRequests]);\r\n\r\n  return {\r\n    // State\r\n    parcels,\r\n    userParcels,\r\n    transferRequests,\r\n    pendingTransfers,\r\n    userProfile,\r\n    selectedParcel,\r\n    \r\n    // Loading states\r\n    loading,\r\n    parcelsLoading,\r\n    transfersLoading,\r\n    profileLoading,\r\n    \r\n    // Error states\r\n    error,\r\n    parcelsError,\r\n    transfersError,\r\n    profileError,\r\n    \r\n    // Actions\r\n    loadAllParcels,\r\n    loadUserParcels,\r\n    loadTransferRequests,\r\n    loadUserProfile,\r\n    searchParcels,\r\n    getParcel,\r\n    registerParcel,\r\n    updateParcel,\r\n    transferOwnership,\r\n    approveTransfer,\r\n    rejectTransfer,\r\n    createUserProfile,\r\n    updateUserProfile,\r\n    selectParcel,\r\n    clearError,\r\n    refresh,\r\n  };\r\n};\r\n\r\nexport default useLandRegistry;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}