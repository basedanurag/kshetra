{"ast":null,"code":"import{AuthClient}from'@dfinity/auth-client';import{HttpAgent}from'@dfinity/agent';class AuthService{constructor(){this.authClient=null;this.agent=null;this.actor=null;this.DEFAULT_MAX_TIME_TO_LIVE=BigInt(8*60*60*1000*1000*1000);}// 8 hours in nanoseconds\nasync init(){if(!this.authClient){this.authClient=await AuthClient.create();}}async login(){await this.init();return new Promise((resolve,reject)=>{this.authClient.login({identityProvider:process.env.REACT_APP_II_URL||'https://identity.ic0.app',onSuccess:()=>{this.setupAgent();resolve();},onError:error=>{console.error('Login failed:',error);reject(error);}});});}async logout(){await this.init();await this.authClient.logout();this.agent=null;this.actor=null;}async checkAuth(){await this.init();const isAuthenticated=await this.authClient.isAuthenticated();if(isAuthenticated){const identity=this.authClient.getIdentity();const principal=identity.getPrincipal();// Setup agent and actor if not already done\nif(!this.agent){this.setupAgent();}// Get user roles from backend\nlet roles=[];try{if(this.actor){roles=await this.actor.get_user_roles(principal);}}catch(error){console.error('Failed to fetch user roles:',error);roles=['User'];// Default role\n}return{isAuthenticated:true,principal,roles:roles.map(role=>role.toString())};}return{isAuthenticated:false,roles:[]};}setupAgent(){const identity=this.authClient.getIdentity();this.agent=new HttpAgent({identity,host:process.env.REACT_APP_IC_HOST||'https://ic0.app'});// Only fetch root key in development\nif(process.env.NODE_ENV==='development'){this.agent.fetchRootKey().catch(err=>{console.warn('Unable to fetch root key. Check to ensure that your local replica is running');console.error(err);});}// Create actor for backend canister\n// Note: You'll need to import the generated declarations\n// this.actor = Actor.createActor(idlFactory, {\n//   agent: this.agent,\n//   canisterId: process.env.REACT_APP_BACKEND_CANISTER_ID || 'your-canister-id',\n// });\n}getAgent(){return this.agent;}getActor(){return this.actor;}getPrincipal(){if(this.authClient){const identity=this.authClient.getIdentity();return identity.getPrincipal();}return null;}}const authService=new AuthService();export default authService;","map":{"version":3,"names":["AuthClient","HttpAgent","AuthService","constructor","authClient","agent","actor","DEFAULT_MAX_TIME_TO_LIVE","BigInt","init","create","login","Promise","resolve","reject","identityProvider","process","env","REACT_APP_II_URL","onSuccess","setupAgent","onError","error","console","logout","checkAuth","isAuthenticated","identity","getIdentity","principal","getPrincipal","roles","get_user_roles","map","role","toString","host","REACT_APP_IC_HOST","NODE_ENV","fetchRootKey","catch","err","warn","getAgent","getActor","authService"],"sources":["D:/Kshetra/frontend/src/services/AuthService.ts"],"sourcesContent":["import { AuthClient } from '@dfinity/auth-client';\r\nimport { HttpAgent, ActorSubclass } from '@dfinity/agent';\r\nimport Principal from '@dfinity/principal';\r\n\r\nexport interface AuthStatus {\r\n  isAuthenticated: boolean;\r\n  principal?: Principal;\r\n  roles: string[];\r\n  error?: string;\r\n}\r\n\r\nexport interface LoginOptions {\r\n  identityProvider?: string;\r\n  maxTimeToLive?: bigint;\r\n  derivationOrigin?: string;\r\n}\r\n\r\nexport interface BackendActor {\r\n  get_user_roles: (principal: Principal) => Promise<string[]>;\r\n  // Add other backend methods as needed\r\n}\r\n\r\nclass AuthService {\r\n  private authClient: AuthClient | null = null;\r\n  private agent: HttpAgent | null = null;\r\n  private actor: ActorSubclass<BackendActor> | null = null;\r\n  private readonly DEFAULT_MAX_TIME_TO_LIVE: bigint = BigInt(8 * 60 * 60 * 1000 * 1000 * 1000); // 8 hours in nanoseconds\r\n\r\n  async init(): Promise<void> {\r\n    if (!this.authClient) {\r\n      this.authClient = await AuthClient.create();\r\n    }\r\n  }\r\n\r\n  async login(): Promise<void> {\r\n    await this.init();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      this.authClient!.login({\r\n        identityProvider: process.env.REACT_APP_II_URL || 'https://identity.ic0.app',\r\n        onSuccess: () => {\r\n          this.setupAgent();\r\n          resolve();\r\n        },\r\n        onError: (error) => {\r\n          console.error('Login failed:', error);\r\n          reject(error);\r\n        },\r\n      });\r\n    });\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    await this.init();\r\n    await this.authClient!.logout();\r\n    this.agent = null;\r\n    this.actor = null;\r\n  }\r\n\r\n  async checkAuth(): Promise<AuthStatus> {\r\n    await this.init();\r\n    \r\n    const isAuthenticated = await this.authClient!.isAuthenticated();\r\n    \r\n    if (isAuthenticated) {\r\n      const identity = this.authClient!.getIdentity();\r\n      const principal = identity.getPrincipal();\r\n      \r\n      // Setup agent and actor if not already done\r\n      if (!this.agent) {\r\n        this.setupAgent();\r\n      }\r\n      \r\n      // Get user roles from backend\r\n      let roles: string[] = [];\r\n      try {\r\n        if (this.actor) {\r\n          roles = await this.actor.get_user_roles(principal);\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to fetch user roles:', error);\r\n        roles = ['User']; // Default role\r\n      }\r\n      \r\n      return {\r\n        isAuthenticated: true,\r\n        principal,\r\n        roles: roles.map(role => role.toString()),\r\n      };\r\n    }\r\n    \r\n    return {\r\n      isAuthenticated: false,\r\n      roles: [],\r\n    };\r\n  }\r\n\r\n  private setupAgent(): void {\r\n    const identity = this.authClient!.getIdentity();\r\n    \r\n    this.agent = new HttpAgent({\r\n      identity,\r\n      host: process.env.REACT_APP_IC_HOST || 'https://ic0.app'\r\n    });\r\n\r\n    // Only fetch root key in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      this.agent.fetchRootKey().catch(err => {\r\n        console.warn('Unable to fetch root key. Check to ensure that your local replica is running');\r\n        console.error(err);\r\n      });\r\n    }\r\n\r\n    // Create actor for backend canister\r\n    // Note: You'll need to import the generated declarations\r\n    // this.actor = Actor.createActor(idlFactory, {\r\n    //   agent: this.agent,\r\n    //   canisterId: process.env.REACT_APP_BACKEND_CANISTER_ID || 'your-canister-id',\r\n    // });\r\n  }\r\n\r\n  getAgent(): HttpAgent | null {\r\n    return this.agent;\r\n  }\r\n\r\n  getActor(): any {\r\n    return this.actor;\r\n  }\r\n\r\n  getPrincipal(): Principal | null {\r\n    if (this.authClient) {\r\n      const identity = this.authClient.getIdentity();\r\n      return identity.getPrincipal();\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nconst authService = new AuthService();\r\nexport default authService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}