{"ast":null,"code":"import { AuthClient } from '@dfinity/auth-client';\nimport { HttpAgent, Actor } from '@dfinity/agent';\nimport { idlFactory } from '../declarations/backend'; // Mock declarations\n\n// Authentication status interface\n\n// User session interface\n\n// Login options interface\n\n// User roles enum (matching backend - from .did file)\nexport let UserRole = /*#__PURE__*/function (UserRole) {\n  UserRole[\"Admin\"] = \"Admin\";\n  UserRole[\"LandRegistrar\"] = \"LandRegistrar\";\n  UserRole[\"User\"] = \"User\"; // Default role for authenticated users\n  return UserRole;\n}({});\n\n// Backend actor interface\n\nclass AuthService {\n  constructor() {\n    this.authClient = null;\n    this.agent = null;\n    this.actor = null;\n    this.DEFAULT_MAX_TIME_TO_LIVE = BigInt(8 * 60 * 60 * 1000 * 1000 * 1000);\n  }\n  // 8 hours in nanoseconds\n\n  async init() {\n    console.log('üîß AuthService: Initializing...');\n    if (!this.authClient) {\n      try {\n        this.authClient = await AuthClient.create();\n        console.log('‚úÖ AuthService: AuthClient created successfully');\n      } catch (error) {\n        console.error('‚ùå AuthService: Failed to create AuthClient:', error);\n        throw error;\n      }\n    } else {\n      console.log('üîÑ AuthService: AuthClient already exists');\n    }\n  }\n  async login() {\n    console.log('üîë AuthService: Starting login process...');\n    await this.init();\n    const identityProvider = process.env.REACT_APP_II_URL || 'https://identity.ic0.app';\n    console.log('üåê AuthService: Using identity provider:', identityProvider);\n    return new Promise((resolve, reject) => {\n      this.authClient.login({\n        identityProvider,\n        onSuccess: () => {\n          console.log('‚úÖ AuthService: Login successful');\n          try {\n            this.setupAgent();\n            console.log('‚úÖ AuthService: Agent setup completed');\n            resolve();\n          } catch (error) {\n            console.error('‚ùå AuthService: Agent setup failed:', error);\n            reject(error);\n          }\n        },\n        onError: error => {\n          console.error('‚ùå AuthService: Login failed:', error);\n          reject(error);\n        }\n      });\n    });\n  }\n  async logout() {\n    await this.init();\n    await this.authClient.logout();\n    this.agent = null;\n    this.actor = null;\n  }\n  async checkAuth() {\n    console.log('üîç AuthService: Checking authentication status...');\n    await this.init();\n    const isAuthenticated = await this.authClient.isAuthenticated();\n    console.log('üîç AuthService: Is authenticated:', isAuthenticated);\n    if (isAuthenticated) {\n      const identity = this.authClient.getIdentity();\n      const principal = identity.getPrincipal();\n      console.log('üë§ AuthService: Principal:', principal.toString());\n\n      // Setup agent and actor if not already done\n      if (!this.agent) {\n        console.log('üîß AuthService: Setting up agent...');\n        this.setupAgent();\n      } else {\n        console.log('üîÑ AuthService: Agent already exists');\n      }\n\n      // Get user roles from backend\n      let roles = [];\n      try {\n        if (this.actor) {\n          console.log('üé≠ AuthService: Fetching user roles from backend...');\n          roles = await this.actor.get_user_roles(principal);\n          console.log('‚úÖ AuthService: User roles fetched:', roles);\n        } else {\n          console.warn('‚ö†Ô∏è AuthService: No actor available, cannot fetch roles');\n          roles = ['User']; // Default role\n        }\n      } catch (error) {\n        console.error('‚ùå AuthService: Failed to fetch user roles:', error);\n        console.error('‚ùå AuthService: Error details:', {\n          message: error.message,\n          stack: error.stack,\n          name: error.name\n        });\n        roles = ['User']; // Default role\n      }\n      const authStatus = {\n        isAuthenticated: true,\n        principal,\n        roles: roles.map(role => role.toString())\n      };\n      console.log('‚úÖ AuthService: Final auth status:', authStatus);\n      return authStatus;\n    }\n    console.log('‚ùå AuthService: User not authenticated');\n    return {\n      isAuthenticated: false,\n      roles: []\n    };\n  }\n  setupAgent() {\n    console.log('üîß AuthService: Setting up HTTP agent...');\n    const identity = this.authClient.getIdentity();\n    const host = process.env.REACT_APP_IC_HOST || 'https://ic0.app';\n    console.log('üåê AuthService: Using host:', host);\n    console.log('üåç AuthService: Environment:', process.env.NODE_ENV);\n    this.agent = new HttpAgent({\n      identity,\n      host\n    });\n    console.log('‚úÖ AuthService: HTTP Agent created');\n\n    // Only fetch root key in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log('üîë AuthService: Fetching root key for development...');\n      this.agent.fetchRootKey().then(() => {\n        console.log('‚úÖ AuthService: Root key fetched successfully');\n      }).catch(err => {\n        console.warn('‚ö†Ô∏è AuthService: Unable to fetch root key. Check to ensure that your local replica is running');\n        console.error('‚ùå AuthService: Root key fetch error:', err);\n      });\n    }\n\n    // Create actor for backend canister\n    const canisterId = process.env.REACT_APP_BACKEND_CANISTER_ID;\n    console.log('üéØ AuthService: Backend canister ID:', canisterId || 'NOT SET');\n    if (!canisterId) {\n      console.error('‚ùå AuthService: REACT_APP_BACKEND_CANISTER_ID not set in environment');\n      console.log('üìã AuthService: Available environment variables:', Object.keys(process.env).filter(key => key.startsWith('REACT_APP')));\n      return;\n    }\n    try {\n      // Import declarations check\n      console.log('üì¶ AuthService: Attempting to create actor...');\n\n      // Create actor with mock declarations (replace with real ones when available)\n      this.actor = Actor.createActor(idlFactory, {\n        agent: this.agent,\n        canisterId\n      });\n      console.log('‚úÖ AuthService: Actor created successfully');\n    } catch (error) {\n      console.error('‚ùå AuthService: Failed to create actor:', error);\n      console.error('‚ùå AuthService: Actor creation error details:', error);\n    }\n  }\n  getAgent() {\n    return this.agent;\n  }\n  getActor() {\n    return this.actor;\n  }\n  getPrincipal() {\n    if (this.authClient) {\n      const identity = this.authClient.getIdentity();\n      return identity.getPrincipal();\n    }\n    return null;\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["AuthClient","HttpAgent","Actor","idlFactory","UserRole","AuthService","constructor","authClient","agent","actor","DEFAULT_MAX_TIME_TO_LIVE","BigInt","init","console","log","create","error","login","identityProvider","process","env","REACT_APP_II_URL","Promise","resolve","reject","onSuccess","setupAgent","onError","logout","checkAuth","isAuthenticated","identity","getIdentity","principal","getPrincipal","toString","roles","get_user_roles","warn","message","stack","name","authStatus","map","role","host","REACT_APP_IC_HOST","NODE_ENV","fetchRootKey","then","catch","err","canisterId","REACT_APP_BACKEND_CANISTER_ID","Object","keys","filter","key","startsWith","createActor","getAgent","getActor","authService"],"sources":["D:/Kshetra/frontend/src/services/AuthService.ts"],"sourcesContent":["import { AuthClient } from '@dfinity/auth-client';\r\nimport { HttpAgent, ActorSubclass, Actor } from '@dfinity/agent';\r\nimport { Principal } from '@dfinity/principal';\r\nimport { idlFactory } from '../declarations/backend'; // Mock declarations\r\n\r\n// Authentication status interface\r\nexport interface AuthStatus {\r\n  isAuthenticated: boolean;\r\n  principal?: Principal;\r\n  roles: UserRole[];\r\n  error?: string;\r\n  sessionExpiry?: Date;\r\n}\r\n\r\n// User session interface\r\nexport interface UserSession {\r\n  principal: Principal;\r\n  roles: UserRole[];\r\n  createdAt: Date;\r\n  expiresAt: Date;\r\n  lastActivity: Date;\r\n}\r\n\r\n// Login options interface\r\nexport interface LoginOptions {\r\n  identityProvider?: string;\r\n  maxTimeToLive?: bigint;\r\n  derivationOrigin?: string;\r\n  windowOpenerFeatures?: string;\r\n  onSuccess?: () => void;\r\n  onError?: (error?: string) => void;\r\n}\r\n\r\n// User roles enum (matching backend - from .did file)\r\nexport enum UserRole {\r\n  Admin = 'Admin',\r\n  LandRegistrar = 'LandRegistrar',\r\n  User = 'User' // Default role for authenticated users\r\n}\r\n\r\n// Backend actor interface\r\nexport interface BackendActor {\r\n  get_user_roles: (principal: Principal) => Promise<UserRole[]>;\r\n  assign_role: (principal: Principal, role: UserRole) => Promise<{ Ok?: null; Err?: string }>;\r\n  get_land_parcel: (tokenId: bigint) => Promise<any>;\r\n  get_parcels_by_owner: (owner: Principal) => Promise<any[]>;\r\n  register_land_parcel: (\r\n    location: string,\r\n    sizeSqMeters: number,\r\n    coordinates: { latitude: number; longitude: number },\r\n    documentHashes: string[]\r\n  ) => Promise<{ Ok?: bigint; Err?: string }>;\r\n}\r\n\r\nclass AuthService {\r\n  private authClient: AuthClient | null = null;\r\n  private agent: HttpAgent | null = null;\r\n  private actor: ActorSubclass<BackendActor> | null = null;\r\n  private readonly DEFAULT_MAX_TIME_TO_LIVE: bigint = BigInt(8 * 60 * 60 * 1000 * 1000 * 1000); // 8 hours in nanoseconds\r\n\r\n  async init(): Promise<void> {\r\n    console.log('üîß AuthService: Initializing...');\r\n    if (!this.authClient) {\r\n      try {\r\n        this.authClient = await AuthClient.create();\r\n        console.log('‚úÖ AuthService: AuthClient created successfully');\r\n      } catch (error) {\r\n        console.error('‚ùå AuthService: Failed to create AuthClient:', error);\r\n        throw error;\r\n      }\r\n    } else {\r\n      console.log('üîÑ AuthService: AuthClient already exists');\r\n    }\r\n  }\r\n\r\n  async login(): Promise<void> {\r\n    console.log('üîë AuthService: Starting login process...');\r\n    await this.init();\r\n    \r\n    const identityProvider = process.env.REACT_APP_II_URL || 'https://identity.ic0.app';\r\n    console.log('üåê AuthService: Using identity provider:', identityProvider);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      this.authClient!.login({\r\n        identityProvider,\r\n        onSuccess: () => {\r\n          console.log('‚úÖ AuthService: Login successful');\r\n          try {\r\n            this.setupAgent();\r\n            console.log('‚úÖ AuthService: Agent setup completed');\r\n            resolve();\r\n          } catch (error) {\r\n            console.error('‚ùå AuthService: Agent setup failed:', error);\r\n            reject(error);\r\n          }\r\n        },\r\n        onError: (error) => {\r\n          console.error('‚ùå AuthService: Login failed:', error);\r\n          reject(error);\r\n        },\r\n      });\r\n    });\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    await this.init();\r\n    await this.authClient!.logout();\r\n    this.agent = null;\r\n    this.actor = null;\r\n  }\r\n\r\n  async checkAuth(): Promise<AuthStatus> {\r\n    console.log('üîç AuthService: Checking authentication status...');\r\n    await this.init();\r\n    \r\n    const isAuthenticated = await this.authClient!.isAuthenticated();\r\n    console.log('üîç AuthService: Is authenticated:', isAuthenticated);\r\n    \r\n    if (isAuthenticated) {\r\n      const identity = this.authClient!.getIdentity();\r\n      const principal = identity.getPrincipal();\r\n      console.log('üë§ AuthService: Principal:', principal.toString());\r\n      \r\n      // Setup agent and actor if not already done\r\n      if (!this.agent) {\r\n        console.log('üîß AuthService: Setting up agent...');\r\n        this.setupAgent();\r\n      } else {\r\n        console.log('üîÑ AuthService: Agent already exists');\r\n      }\r\n      \r\n      // Get user roles from backend\r\n      let roles: string[] = [];\r\n      try {\r\n        if (this.actor) {\r\n          console.log('üé≠ AuthService: Fetching user roles from backend...');\r\n          roles = await this.actor.get_user_roles(principal);\r\n          console.log('‚úÖ AuthService: User roles fetched:', roles);\r\n        } else {\r\n          console.warn('‚ö†Ô∏è AuthService: No actor available, cannot fetch roles');\r\n          roles = ['User']; // Default role\r\n        }\r\n      } catch (error) {\r\n        console.error('‚ùå AuthService: Failed to fetch user roles:', error);\r\n        console.error('‚ùå AuthService: Error details:', {\r\n          message: error.message,\r\n          stack: error.stack,\r\n          name: error.name\r\n        });\r\n        roles = ['User']; // Default role\r\n      }\r\n      \r\n      const authStatus = {\r\n        isAuthenticated: true,\r\n        principal,\r\n        roles: roles.map(role => role.toString()),\r\n      };\r\n      console.log('‚úÖ AuthService: Final auth status:', authStatus);\r\n      return authStatus;\r\n    }\r\n    \r\n    console.log('‚ùå AuthService: User not authenticated');\r\n    return {\r\n      isAuthenticated: false,\r\n      roles: [],\r\n    };\r\n  }\r\n\r\n  private setupAgent(): void {\r\n    console.log('üîß AuthService: Setting up HTTP agent...');\r\n    const identity = this.authClient!.getIdentity();\r\n    \r\n    const host = process.env.REACT_APP_IC_HOST || 'https://ic0.app';\r\n    console.log('üåê AuthService: Using host:', host);\r\n    console.log('üåç AuthService: Environment:', process.env.NODE_ENV);\r\n    \r\n    this.agent = new HttpAgent({\r\n      identity,\r\n      host\r\n    });\r\n    console.log('‚úÖ AuthService: HTTP Agent created');\r\n\r\n    // Only fetch root key in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('üîë AuthService: Fetching root key for development...');\r\n      this.agent.fetchRootKey().then(() => {\r\n        console.log('‚úÖ AuthService: Root key fetched successfully');\r\n      }).catch(err => {\r\n        console.warn('‚ö†Ô∏è AuthService: Unable to fetch root key. Check to ensure that your local replica is running');\r\n        console.error('‚ùå AuthService: Root key fetch error:', err);\r\n      });\r\n    }\r\n\r\n    // Create actor for backend canister\r\n    const canisterId = process.env.REACT_APP_BACKEND_CANISTER_ID;\r\n    console.log('üéØ AuthService: Backend canister ID:', canisterId || 'NOT SET');\r\n    \r\n    if (!canisterId) {\r\n      console.error('‚ùå AuthService: REACT_APP_BACKEND_CANISTER_ID not set in environment');\r\n      console.log('üìã AuthService: Available environment variables:', Object.keys(process.env).filter(key => key.startsWith('REACT_APP')));\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Import declarations check\r\n      console.log('üì¶ AuthService: Attempting to create actor...');\r\n      \r\n      // Create actor with mock declarations (replace with real ones when available)\r\n      this.actor = Actor.createActor(idlFactory, {\r\n        agent: this.agent,\r\n        canisterId,\r\n      }) as ActorSubclass<BackendActor>;\r\n      \r\n      console.log('‚úÖ AuthService: Actor created successfully');\r\n    } catch (error) {\r\n      console.error('‚ùå AuthService: Failed to create actor:', error);\r\n      console.error('‚ùå AuthService: Actor creation error details:', error);\r\n    }\r\n  }\r\n\r\n  getAgent(): HttpAgent | null {\r\n    return this.agent;\r\n  }\r\n\r\n  getActor(): any {\r\n    return this.actor;\r\n  }\r\n\r\n  getPrincipal(): Principal | null {\r\n    if (this.authClient) {\r\n      const identity = this.authClient.getIdentity();\r\n      return identity.getPrincipal();\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nconst authService = new AuthService();\r\nexport default authService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}