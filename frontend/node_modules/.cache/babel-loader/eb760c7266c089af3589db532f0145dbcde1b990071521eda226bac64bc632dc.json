{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{useAuth}from'./useAuth';import landRegistryService from'../services/LandRegistryService';export const useLandRegistry=()=>{// State\nconst[parcels,setParcels]=useState([]);const[userParcels,setUserParcels]=useState([]);const[transferRequests,setTransferRequests]=useState([]);const[pendingTransfers,setPendingTransfers]=useState([]);const[userProfile,setUserProfile]=useState(null);const[selectedParcel,setSelectedParcel]=useState(null);// Loading states\nconst[loading,setLoading]=useState(false);const[parcelsLoading,setParcelsLoading]=useState(false);const[transfersLoading,setTransfersLoading]=useState(false);const[profileLoading,setProfileLoading]=useState(false);// Error states\nconst[error,setError]=useState(null);const[parcelsError,setParcelsError]=useState(null);const[transfersError,setTransfersError]=useState(null);const[profileError,setProfileError]=useState(null);const{authClient,principal,isAuthenticated}=useAuth();// Initialize service when auth state changes\nuseEffect(()=>{const initializeService=async()=>{if(authClient){try{await landRegistryService.init(authClient);}catch(err){console.error('Failed to initialize land registry service:',err);setError('Failed to initialize service');}}};initializeService();},[authClient]);// Load initial data when authenticated\nuseEffect(()=>{if(isAuthenticated&&principal){loadUserProfile();loadUserParcels();if((userProfile===null||userProfile===void 0?void 0:userProfile.role)==='Admin'){loadAllParcels();loadTransferRequests();}}},[isAuthenticated,principal,userProfile===null||userProfile===void 0?void 0:userProfile.role]);const handleError=useCallback((err,setter)=>{const errorMessage=err instanceof Error?err.message:'An unexpected error occurred';console.error('Land Registry Error:',err);setter(errorMessage);setError(errorMessage);},[]);const clearError=useCallback(()=>{setError(null);setParcelsError(null);setTransfersError(null);setProfileError(null);},[]);// Load all parcels (admin only)\nconst loadAllParcels=useCallback(async()=>{setParcelsLoading(true);setParcelsError(null);try{const allParcels=await landRegistryService.getAllParcels();setParcels(allParcels);}catch(err){handleError(err,setParcelsError);}finally{setParcelsLoading(false);}},[handleError]);// Load user's parcels\nconst loadUserParcels=useCallback(async()=>{if(!principal)return;setParcelsLoading(true);setParcelsError(null);try{const userParcelsList=await landRegistryService.getParcelsByOwner(principal);setUserParcels(userParcelsList);}catch(err){handleError(err,setParcelsError);}finally{setParcelsLoading(false);}},[principal,handleError]);// Load transfer requests\nconst loadTransferRequests=useCallback(async()=>{setTransfersLoading(true);setTransfersError(null);try{const[requests,pending]=await Promise.all([landRegistryService.getTransferRequests(),landRegistryService.getPendingTransfers()]);setTransferRequests(requests);setPendingTransfers(pending);}catch(err){handleError(err,setTransfersError);}finally{setTransfersLoading(false);}},[handleError]);// Load user profile\nconst loadUserProfile=useCallback(async()=>{if(!principal)return;setProfileLoading(true);setProfileError(null);try{const profile=await landRegistryService.getUserProfile(principal);setUserProfile(profile);}catch(err){handleError(err,setProfileError);}finally{setProfileLoading(false);}},[principal,handleError]);// Search parcels\nconst searchParcels=useCallback(async filters=>{try{return await landRegistryService.searchParcels(filters);}catch(err){handleError(err,setParcelsError);return[];}},[handleError]);// Get single parcel\nconst getParcel=useCallback(async id=>{try{return await landRegistryService.getParcel(id);}catch(err){handleError(err,setParcelsError);return null;}},[handleError]);// Register new parcel\nconst registerParcel=useCallback(async parcel=>{setLoading(true);try{const result=await landRegistryService.registerParcel(parcel);if('Ok'in result){await loadUserParcels();if((userProfile===null||userProfile===void 0?void 0:userProfile.role)==='Admin'){await loadAllParcels();}return true;}else{throw new Error(result.Err);}}catch(err){handleError(err,setError);return false;}finally{setLoading(false);}},[loadUserParcels,loadAllParcels,userProfile===null||userProfile===void 0?void 0:userProfile.role,handleError]);// Update parcel\nconst updateParcel=useCallback(async(id,updates)=>{setLoading(true);try{const result=await landRegistryService.updateParcel(id,updates);if('Ok'in result){await loadUserParcels();if((userProfile===null||userProfile===void 0?void 0:userProfile.role)==='Admin'){await loadAllParcels();}// Update selected parcel if it's the one being updated\nif((selectedParcel===null||selectedParcel===void 0?void 0:selectedParcel.id)===id){const updatedParcel=await landRegistryService.getParcel(id);setSelectedParcel(updatedParcel);}return true;}else{throw new Error(result.Err);}}catch(err){handleError(err,setError);return false;}finally{setLoading(false);}},[loadUserParcels,loadAllParcels,selectedParcel,userProfile===null||userProfile===void 0?void 0:userProfile.role,handleError]);// Transfer ownership\nconst transferOwnership=useCallback(async request=>{setLoading(true);try{const result=await landRegistryService.transferOwnership(request);if('Ok'in result){await loadTransferRequests();await loadUserParcels();return true;}else{throw new Error(result.Err);}}catch(err){handleError(err,setError);return false;}finally{setLoading(false);}},[loadTransferRequests,loadUserParcels,handleError]);// Approve transfer (admin only)\nconst approveTransfer=useCallback(async(parcelId,newOwner)=>{setLoading(true);try{const result=await landRegistryService.approveTransfer(parcelId,newOwner);if('Ok'in result){await loadTransferRequests();await loadAllParcels();return true;}else{throw new Error(result.Err);}}catch(err){handleError(err,setError);return false;}finally{setLoading(false);}},[loadTransferRequests,loadAllParcels,handleError]);// Reject transfer (admin only)\nconst rejectTransfer=useCallback(async(parcelId,reason)=>{setLoading(true);try{const result=await landRegistryService.rejectTransfer(parcelId,reason);if('Ok'in result){await loadTransferRequests();return true;}else{throw new Error(result.Err);}}catch(err){handleError(err,setError);return false;}finally{setLoading(false);}},[loadTransferRequests,handleError]);// Create user profile\nconst createUserProfile=useCallback(async profile=>{setLoading(true);try{const result=await landRegistryService.createUserProfile(profile);if('Ok'in result){await loadUserProfile();return true;}else{throw new Error(result.Err);}}catch(err){handleError(err,setProfileError);return false;}finally{setLoading(false);}},[loadUserProfile,handleError]);// Update user profile\nconst updateUserProfile=useCallback(async updates=>{setLoading(true);try{const result=await landRegistryService.updateUserProfile(updates);if('Ok'in result){await loadUserProfile();return true;}else{throw new Error(result.Err);}}catch(err){handleError(err,setProfileError);return false;}finally{setLoading(false);}},[loadUserProfile,handleError]);// Select parcel for detailed view\nconst selectParcel=useCallback(parcel=>{setSelectedParcel(parcel);},[]);// Refresh all data\nconst refresh=useCallback(async()=>{if(isAuthenticated&&principal){await Promise.all([loadUserProfile(),loadUserParcels(),(userProfile===null||userProfile===void 0?void 0:userProfile.role)==='Admin'?loadAllParcels():Promise.resolve(),(userProfile===null||userProfile===void 0?void 0:userProfile.role)==='Admin'?loadTransferRequests():Promise.resolve()]);}},[isAuthenticated,principal,userProfile===null||userProfile===void 0?void 0:userProfile.role,loadUserProfile,loadUserParcels,loadAllParcels,loadTransferRequests]);return{// State\nparcels,userParcels,transferRequests,pendingTransfers,userProfile,selectedParcel,// Loading states\nloading,parcelsLoading,transfersLoading,profileLoading,// Error states\nerror,parcelsError,transfersError,profileError,// Actions\nloadAllParcels,loadUserParcels,loadTransferRequests,loadUserProfile,searchParcels,getParcel,registerParcel,updateParcel,transferOwnership,approveTransfer,rejectTransfer,createUserProfile,updateUserProfile,selectParcel,clearError,refresh};};export default useLandRegistry;","map":{"version":3,"names":["useState","useEffect","useCallback","useAuth","landRegistryService","useLandRegistry","parcels","setParcels","userParcels","setUserParcels","transferRequests","setTransferRequests","pendingTransfers","setPendingTransfers","userProfile","setUserProfile","selectedParcel","setSelectedParcel","loading","setLoading","parcelsLoading","setParcelsLoading","transfersLoading","setTransfersLoading","profileLoading","setProfileLoading","error","setError","parcelsError","setParcelsError","transfersError","setTransfersError","profileError","setProfileError","authClient","principal","isAuthenticated","initializeService","init","err","console","loadUserProfile","loadUserParcels","role","loadAllParcels","loadTransferRequests","handleError","setter","errorMessage","Error","message","clearError","allParcels","getAllParcels","userParcelsList","getParcelsByOwner","requests","pending","Promise","all","getTransferRequests","getPendingTransfers","profile","getUserProfile","searchParcels","filters","getParcel","id","registerParcel","parcel","result","Err","updateParcel","updates","updatedParcel","transferOwnership","request","approveTransfer","parcelId","newOwner","rejectTransfer","reason","createUserProfile","updateUserProfile","selectParcel","refresh","resolve"],"sources":["D:/Kshetra/frontend/src/hooks/useLandRegistry.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport Principal from '@dfinity/principal';\r\nimport { useAuth } from './useAuth';\r\nimport landRegistryService, { LandParcel, TransferRequest, UserProfile } from '../services/LandRegistryService';\r\n\r\ninterface UseLandRegistryReturn {\r\n  // State\r\n  parcels: LandParcel[];\r\n  userParcels: LandParcel[];\r\n  transferRequests: TransferRequest[];\r\n  pendingTransfers: TransferRequest[];\r\n  userProfile: UserProfile | null;\r\n  selectedParcel: LandParcel | null;\r\n  \r\n  // Loading states\r\n  loading: boolean;\r\n  parcelsLoading: boolean;\r\n  transfersLoading: boolean;\r\n  profileLoading: boolean;\r\n  \r\n  // Error states\r\n  error: string | null;\r\n  parcelsError: string | null;\r\n  transfersError: string | null;\r\n  profileError: string | null;\r\n  \r\n  // Actions\r\n  loadAllParcels: () => Promise<void>;\r\n  loadUserParcels: () => Promise<void>;\r\n  loadTransferRequests: () => Promise<void>;\r\n  loadUserProfile: () => Promise<void>;\r\n  searchParcels: (filters: Record<string, string>) => Promise<LandParcel[]>;\r\n  getParcel: (id: string) => Promise<LandParcel | null>;\r\n  registerParcel: (parcel: Omit<LandParcel, 'id' | 'registration_date' | 'last_updated'>) => Promise<boolean>;\r\n  updateParcel: (id: string, updates: Partial<LandParcel>) => Promise<boolean>;\r\n  transferOwnership: (request: TransferRequest) => Promise<boolean>;\r\n  approveTransfer: (parcelId: string, newOwner: Principal) => Promise<boolean>;\r\n  rejectTransfer: (parcelId: string, reason: string) => Promise<boolean>;\r\n  createUserProfile: (profile: Omit<UserProfile, 'principal' | 'registration_date'>) => Promise<boolean>;\r\n  updateUserProfile: (updates: Partial<UserProfile>) => Promise<boolean>;\r\n  selectParcel: (parcel: LandParcel | null) => void;\r\n  clearError: () => void;\r\n  refresh: () => Promise<void>;\r\n}\r\n\r\nexport const useLandRegistry = (): UseLandRegistryReturn => {\r\n  // State\r\n  const [parcels, setParcels] = useState<LandParcel[]>([]);\r\n  const [userParcels, setUserParcels] = useState<LandParcel[]>([]);\r\n  const [transferRequests, setTransferRequests] = useState<TransferRequest[]>([]);\r\n  const [pendingTransfers, setPendingTransfers] = useState<TransferRequest[]>([]);\r\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\r\n  const [selectedParcel, setSelectedParcel] = useState<LandParcel | null>(null);\r\n  \r\n  // Loading states\r\n  const [loading, setLoading] = useState(false);\r\n  const [parcelsLoading, setParcelsLoading] = useState(false);\r\n  const [transfersLoading, setTransfersLoading] = useState(false);\r\n  const [profileLoading, setProfileLoading] = useState(false);\r\n  \r\n  // Error states\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [parcelsError, setParcelsError] = useState<string | null>(null);\r\n  const [transfersError, setTransfersError] = useState<string | null>(null);\r\n  const [profileError, setProfileError] = useState<string | null>(null);\r\n\r\n  const { authClient, principal, isAuthenticated } = useAuth();\r\n\r\n  // Initialize service when auth state changes\r\n  useEffect(() => {\r\n    const initializeService = async () => {\r\n      if (authClient) {\r\n        try {\r\n          await landRegistryService.init(authClient);\r\n        } catch (err) {\r\n          console.error('Failed to initialize land registry service:', err);\r\n          setError('Failed to initialize service');\r\n        }\r\n      }\r\n    };\r\n\r\n    initializeService();\r\n  }, [authClient]);\r\n\r\n  // Load initial data when authenticated\r\n  useEffect(() => {\r\n    if (isAuthenticated && principal) {\r\n      loadUserProfile();\r\n      loadUserParcels();\r\n      if (userProfile?.role === 'Admin') {\r\n        loadAllParcels();\r\n        loadTransferRequests();\r\n      }\r\n    }\r\n  }, [isAuthenticated, principal, userProfile?.role]);\r\n\r\n  const handleError = useCallback((err: any, setter: (error: string | null) => void) => {\r\n    const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';\r\n    console.error('Land Registry Error:', err);\r\n    setter(errorMessage);\r\n    setError(errorMessage);\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n    setParcelsError(null);\r\n    setTransfersError(null);\r\n    setProfileError(null);\r\n  }, []);\r\n\r\n  // Load all parcels (admin only)\r\n  const loadAllParcels = useCallback(async () => {\r\n    setParcelsLoading(true);\r\n    setParcelsError(null);\r\n    try {\r\n      const allParcels = await landRegistryService.getAllParcels();\r\n      setParcels(allParcels);\r\n    } catch (err) {\r\n      handleError(err, setParcelsError);\r\n    } finally {\r\n      setParcelsLoading(false);\r\n    }\r\n  }, [handleError]);\r\n\r\n  // Load user's parcels\r\n  const loadUserParcels = useCallback(async () => {\r\n    if (!principal) return;\r\n    \r\n    setParcelsLoading(true);\r\n    setParcelsError(null);\r\n    try {\r\n      const userParcelsList = await landRegistryService.getParcelsByOwner(principal);\r\n      setUserParcels(userParcelsList);\r\n    } catch (err) {\r\n      handleError(err, setParcelsError);\r\n    } finally {\r\n      setParcelsLoading(false);\r\n    }\r\n  }, [principal, handleError]);\r\n\r\n  // Load transfer requests\r\n  const loadTransferRequests = useCallback(async () => {\r\n    setTransfersLoading(true);\r\n    setTransfersError(null);\r\n    try {\r\n      const [requests, pending] = await Promise.all([\r\n        landRegistryService.getTransferRequests(),\r\n        landRegistryService.getPendingTransfers()\r\n      ]);\r\n      setTransferRequests(requests);\r\n      setPendingTransfers(pending);\r\n    } catch (err) {\r\n      handleError(err, setTransfersError);\r\n    } finally {\r\n      setTransfersLoading(false);\r\n    }\r\n  }, [handleError]);\r\n\r\n  // Load user profile\r\n  const loadUserProfile = useCallback(async () => {\r\n    if (!principal) return;\r\n    \r\n    setProfileLoading(true);\r\n    setProfileError(null);\r\n    try {\r\n      const profile = await landRegistryService.getUserProfile(principal);\r\n      setUserProfile(profile);\r\n    } catch (err) {\r\n      handleError(err, setProfileError);\r\n    } finally {\r\n      setProfileLoading(false);\r\n    }\r\n  }, [principal, handleError]);\r\n\r\n  // Search parcels\r\n  const searchParcels = useCallback(async (filters: Record<string, string>): Promise<LandParcel[]> => {\r\n    try {\r\n      return await landRegistryService.searchParcels(filters);\r\n    } catch (err) {\r\n      handleError(err, setParcelsError);\r\n      return [];\r\n    }\r\n  }, [handleError]);\r\n\r\n  // Get single parcel\r\n  const getParcel = useCallback(async (id: string): Promise<LandParcel | null> => {\r\n    try {\r\n      return await landRegistryService.getParcel(id);\r\n    } catch (err) {\r\n      handleError(err, setParcelsError);\r\n      return null;\r\n    }\r\n  }, [handleError]);\r\n\r\n  // Register new parcel\r\n  const registerParcel = useCallback(async (parcel: Omit<LandParcel, 'id' | 'registration_date' | 'last_updated'>): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await landRegistryService.registerParcel(parcel);\r\n      if ('Ok' in result) {\r\n        await loadUserParcels();\r\n        if (userProfile?.role === 'Admin') {\r\n          await loadAllParcels();\r\n        }\r\n        return true;\r\n      } else {\r\n        throw new Error(result.Err);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, setError);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loadUserParcels, loadAllParcels, userProfile?.role, handleError]);\r\n\r\n  // Update parcel\r\n  const updateParcel = useCallback(async (id: string, updates: Partial<LandParcel>): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await landRegistryService.updateParcel(id, updates);\r\n      if ('Ok' in result) {\r\n        await loadUserParcels();\r\n        if (userProfile?.role === 'Admin') {\r\n          await loadAllParcels();\r\n        }\r\n        // Update selected parcel if it's the one being updated\r\n        if (selectedParcel?.id === id) {\r\n          const updatedParcel = await landRegistryService.getParcel(id);\r\n          setSelectedParcel(updatedParcel);\r\n        }\r\n        return true;\r\n      } else {\r\n        throw new Error(result.Err);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, setError);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loadUserParcels, loadAllParcels, selectedParcel, userProfile?.role, handleError]);\r\n\r\n  // Transfer ownership\r\n  const transferOwnership = useCallback(async (request: TransferRequest): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await landRegistryService.transferOwnership(request);\r\n      if ('Ok' in result) {\r\n        await loadTransferRequests();\r\n        await loadUserParcels();\r\n        return true;\r\n      } else {\r\n        throw new Error(result.Err);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, setError);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loadTransferRequests, loadUserParcels, handleError]);\r\n\r\n  // Approve transfer (admin only)\r\n  const approveTransfer = useCallback(async (parcelId: string, newOwner: Principal): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await landRegistryService.approveTransfer(parcelId, newOwner);\r\n      if ('Ok' in result) {\r\n        await loadTransferRequests();\r\n        await loadAllParcels();\r\n        return true;\r\n      } else {\r\n        throw new Error(result.Err);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, setError);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loadTransferRequests, loadAllParcels, handleError]);\r\n\r\n  // Reject transfer (admin only)\r\n  const rejectTransfer = useCallback(async (parcelId: string, reason: string): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await landRegistryService.rejectTransfer(parcelId, reason);\r\n      if ('Ok' in result) {\r\n        await loadTransferRequests();\r\n        return true;\r\n      } else {\r\n        throw new Error(result.Err);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, setError);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loadTransferRequests, handleError]);\r\n\r\n  // Create user profile\r\n  const createUserProfile = useCallback(async (profile: Omit<UserProfile, 'principal' | 'registration_date'>): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await landRegistryService.createUserProfile(profile);\r\n      if ('Ok' in result) {\r\n        await loadUserProfile();\r\n        return true;\r\n      } else {\r\n        throw new Error(result.Err);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, setProfileError);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loadUserProfile, handleError]);\r\n\r\n  // Update user profile\r\n  const updateUserProfile = useCallback(async (updates: Partial<UserProfile>): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await landRegistryService.updateUserProfile(updates);\r\n      if ('Ok' in result) {\r\n        await loadUserProfile();\r\n        return true;\r\n      } else {\r\n        throw new Error(result.Err);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, setProfileError);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loadUserProfile, handleError]);\r\n\r\n  // Select parcel for detailed view\r\n  const selectParcel = useCallback((parcel: LandParcel | null) => {\r\n    setSelectedParcel(parcel);\r\n  }, []);\r\n\r\n  // Refresh all data\r\n  const refresh = useCallback(async () => {\r\n    if (isAuthenticated && principal) {\r\n      await Promise.all([\r\n        loadUserProfile(),\r\n        loadUserParcels(),\r\n        userProfile?.role === 'Admin' ? loadAllParcels() : Promise.resolve(),\r\n        userProfile?.role === 'Admin' ? loadTransferRequests() : Promise.resolve(),\r\n      ]);\r\n    }\r\n  }, [isAuthenticated, principal, userProfile?.role, loadUserProfile, loadUserParcels, loadAllParcels, loadTransferRequests]);\r\n\r\n  return {\r\n    // State\r\n    parcels,\r\n    userParcels,\r\n    transferRequests,\r\n    pendingTransfers,\r\n    userProfile,\r\n    selectedParcel,\r\n    \r\n    // Loading states\r\n    loading,\r\n    parcelsLoading,\r\n    transfersLoading,\r\n    profileLoading,\r\n    \r\n    // Error states\r\n    error,\r\n    parcelsError,\r\n    transfersError,\r\n    profileError,\r\n    \r\n    // Actions\r\n    loadAllParcels,\r\n    loadUserParcels,\r\n    loadTransferRequests,\r\n    loadUserProfile,\r\n    searchParcels,\r\n    getParcel,\r\n    registerParcel,\r\n    updateParcel,\r\n    transferOwnership,\r\n    approveTransfer,\r\n    rejectTransfer,\r\n    createUserProfile,\r\n    updateUserProfile,\r\n    selectParcel,\r\n    clearError,\r\n    refresh,\r\n  };\r\n};\r\n\r\nexport default useLandRegistry;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}