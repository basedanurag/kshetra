{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport authService from '../services/AuthService';\n/**\r\n * Custom React hook for managing authentication state\r\n * \r\n * This hook provides:\r\n * - Current authentication status\r\n * - Login and logout functions\r\n * - Loading states\r\n * - Error handling\r\n * - Automatic authentication check on mount\r\n */\nexport const useAuth = () => {\n  _s();\n  const [authState, setAuthState] = useState({\n    isAuthenticated: false,\n    loading: true,\n    principal: undefined,\n    roles: [],\n    error: undefined\n  });\n\n  // Check authentication status\n  const checkAuthentication = useCallback(async () => {\n    try {\n      setAuthState(prev => ({\n        ...prev,\n        loading: true,\n        error: undefined\n      }));\n\n      // Initialize the service first\n      await authService.init();\n\n      // Check current authentication status\n      const status = await authService.checkAuth();\n      setAuthState({\n        ...status,\n        loading: false,\n        error: undefined\n      });\n    } catch (error) {\n      console.error('Authentication check failed:', error);\n      setAuthState({\n        isAuthenticated: false,\n        loading: false,\n        principal: undefined,\n        roles: [],\n        error: error instanceof Error ? error.message : 'Authentication check failed'\n      });\n    }\n  }, []);\n\n  // Login function\n  const login = useCallback(async () => {\n    try {\n      setAuthState(prev => ({\n        ...prev,\n        loading: true,\n        error: undefined\n      }));\n\n      // Attempt login\n      await authService.login();\n\n      // Check authentication status after login\n      const status = await authService.checkAuth();\n      setAuthState({\n        ...status,\n        loading: false,\n        error: undefined\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Login failed';\n      console.error('Login failed:', error);\n      setAuthState(prev => ({\n        ...prev,\n        loading: false,\n        error: errorMessage\n      }));\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  }, []);\n\n  // Logout function\n  const logout = useCallback(async () => {\n    try {\n      setAuthState(prev => ({\n        ...prev,\n        loading: true,\n        error: undefined\n      }));\n\n      // Attempt logout\n      await authService.logout();\n\n      // Update state to reflect logout\n      setAuthState({\n        isAuthenticated: false,\n        loading: false,\n        principal: undefined,\n        roles: [],\n        error: undefined\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Logout failed';\n      console.error('Logout failed:', error);\n      setAuthState(prev => ({\n        ...prev,\n        loading: false,\n        error: errorMessage\n      }));\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  }, []);\n\n  // Refresh authentication status\n  const refresh = useCallback(async () => {\n    await checkAuthentication();\n  }, [checkAuthentication]);\n\n  // Check authentication on mount\n  useEffect(() => {\n    checkAuthentication();\n  }, [checkAuthentication]);\n  return {\n    ...authState,\n    login,\n    logout,\n    refresh\n  };\n};\n_s(useAuth, \"Q7NNKi/y0f0lyTTYbBNGiEG7cIg=\");","map":{"version":3,"names":["useState","useEffect","useCallback","authService","useAuth","_s","authState","setAuthState","isAuthenticated","loading","principal","undefined","roles","error","checkAuthentication","prev","init","status","checkAuth","console","Error","message","login","success","errorMessage","logout","refresh"],"sources":["D:/Kshetra/frontend/src/hooks/useAuth.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport authService, { AuthStatus } from '../services/AuthService';\r\n\r\ninterface UseAuthState extends AuthStatus {\r\n  loading: boolean;\r\n  error?: string;\r\n}\r\n\r\ninterface UseAuthReturn extends UseAuthState {\r\n  authClient: any;\r\n  userProfile: any;\r\n  login: () => Promise<{ success: boolean; error?: string }>;\r\n  logout: () => Promise<{ success: boolean; error?: string }>;\r\n  refresh: () => Promise<void>;\r\n}\r\n\r\n/**\r\n * Custom React hook for managing authentication state\r\n * \r\n * This hook provides:\r\n * - Current authentication status\r\n * - Login and logout functions\r\n * - Loading states\r\n * - Error handling\r\n * - Automatic authentication check on mount\r\n */\r\nexport const useAuth = (): UseAuthReturn => {\r\n  const [authState, setAuthState] = useState<UseAuthState>({\r\n    isAuthenticated: false,\r\n    loading: true,\r\n    principal: undefined,\r\n    roles: [],\r\n    error: undefined\r\n  });\r\n\r\n  // Check authentication status\r\n  const checkAuthentication = useCallback(async () => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true, error: undefined }));\r\n      \r\n      // Initialize the service first\r\n      await authService.init();\r\n      \r\n      // Check current authentication status\r\n      const status = await authService.checkAuth();\r\n      \r\n      setAuthState({\r\n        ...status,\r\n        loading: false,\r\n        error: undefined\r\n      });\r\n    } catch (error) {\r\n      console.error('Authentication check failed:', error);\r\n      setAuthState({\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        principal: undefined,\r\n        roles: [],\r\n        error: error instanceof Error ? error.message : 'Authentication check failed'\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = useCallback(async (): Promise<{ success: boolean; error?: string }> => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true, error: undefined }));\r\n      \r\n      // Attempt login\r\n      await authService.login();\r\n      \r\n      // Check authentication status after login\r\n      const status = await authService.checkAuth();\r\n      \r\n      setAuthState({\r\n        ...status,\r\n        loading: false,\r\n        error: undefined\r\n      });\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Login failed';\r\n      console.error('Login failed:', error);\r\n      \r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: errorMessage\r\n      }));\r\n      \r\n      return { \r\n        success: false, \r\n        error: errorMessage\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  // Logout function\r\n  const logout = useCallback(async (): Promise<{ success: boolean; error?: string }> => {\r\n    try {\r\n      setAuthState(prev => ({ ...prev, loading: true, error: undefined }));\r\n      \r\n      // Attempt logout\r\n      await authService.logout();\r\n      \r\n      // Update state to reflect logout\r\n      setAuthState({\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        principal: undefined,\r\n        roles: [],\r\n        error: undefined\r\n      });\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Logout failed';\r\n      console.error('Logout failed:', error);\r\n      \r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: errorMessage\r\n      }));\r\n      \r\n      return { \r\n        success: false, \r\n        error: errorMessage\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  // Refresh authentication status\r\n  const refresh = useCallback(async () => {\r\n    await checkAuthentication();\r\n  }, [checkAuthentication]);\r\n\r\n  // Check authentication on mount\r\n  useEffect(() => {\r\n    checkAuthentication();\r\n  }, [checkAuthentication]);\r\n\r\n  return {\r\n    ...authState,\r\n    login,\r\n    logout,\r\n    refresh\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}