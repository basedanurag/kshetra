{"ast":null,"code":"/**\n * Returns a true Uint8Array from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns Uint8Array\n */\nexport function uint8FromBufLike(bufLike) {\n  if (!bufLike) {\n    throw new Error('Input cannot be null or undefined');\n  }\n  if (bufLike instanceof Uint8Array) {\n    return bufLike;\n  }\n  if (bufLike instanceof ArrayBuffer) {\n    return new Uint8Array(bufLike);\n  }\n  if (Array.isArray(bufLike)) {\n    return new Uint8Array(bufLike);\n  }\n  if ('buffer' in bufLike) {\n    return uint8FromBufLike(bufLike.buffer);\n  }\n  return new Uint8Array(bufLike);\n}\n/**\n * Returns a true ArrayBuffer from a Uint8Array, as Uint8Array.buffer is unsafe.\n * @param {Uint8Array} arr Uint8Array to convert\n * @returns ArrayBuffer\n */\nexport function uint8ToBuf(arr) {\n  const buf = new ArrayBuffer(arr.byteLength);\n  const view = new Uint8Array(buf);\n  view.set(arr);\n  return buf;\n}\n/**\n * Compares two Uint8Arrays for equality.\n * @param a The first Uint8Array.\n * @param b The second Uint8Array.\n * @returns True if the Uint8Arrays are equal, false otherwise.\n */\nexport function uint8Equals(a, b) {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}","map":{"version":3,"names":["uint8FromBufLike","bufLike","Error","Uint8Array","ArrayBuffer","Array","isArray","buffer","uint8ToBuf","arr","buf","byteLength","view","set","uint8Equals","a","b","length","i"],"sources":["D:\\Kshetra\\frontend\\node_modules\\@dfinity\\agent\\src\\utils\\buffer.ts"],"sourcesContent":["/**\n * Returns a true Uint8Array from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns Uint8Array\n */\nexport function uint8FromBufLike(\n  bufLike:\n    | ArrayBuffer\n    | Uint8Array\n    | DataView\n    | ArrayBufferView\n    | ArrayBufferLike\n    | [number]\n    | number[]\n    | { buffer: ArrayBuffer },\n): Uint8Array {\n  if (!bufLike) {\n    throw new Error('Input cannot be null or undefined');\n  }\n\n  if (bufLike instanceof Uint8Array) {\n    return bufLike;\n  }\n  if (bufLike instanceof ArrayBuffer) {\n    return new Uint8Array(bufLike);\n  }\n  if (Array.isArray(bufLike)) {\n    return new Uint8Array(bufLike);\n  }\n  if ('buffer' in bufLike) {\n    return uint8FromBufLike(bufLike.buffer);\n  }\n  return new Uint8Array(bufLike);\n}\n\n/**\n * Returns a true ArrayBuffer from a Uint8Array, as Uint8Array.buffer is unsafe.\n * @param {Uint8Array} arr Uint8Array to convert\n * @returns ArrayBuffer\n */\nexport function uint8ToBuf(arr: Uint8Array): ArrayBuffer {\n  const buf = new ArrayBuffer(arr.byteLength);\n  const view = new Uint8Array(buf);\n  view.set(arr);\n  return buf;\n}\n\n/**\n * Compares two Uint8Arrays for equality.\n * @param a The first Uint8Array.\n * @param b The second Uint8Array.\n * @returns True if the Uint8Arrays are equal, false otherwise.\n */\nexport function uint8Equals(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n"],"mappings":"AAAA;;;;;AAKA,OAAM,SAAUA,gBAAgBA,CAC9BC,OAQ2B;EAE3B,IAAI,CAACA,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;EACtD;EAEA,IAAID,OAAO,YAAYE,UAAU,EAAE;IACjC,OAAOF,OAAO;EAChB;EACA,IAAIA,OAAO,YAAYG,WAAW,EAAE;IAClC,OAAO,IAAID,UAAU,CAACF,OAAO,CAAC;EAChC;EACA,IAAII,KAAK,CAACC,OAAO,CAACL,OAAO,CAAC,EAAE;IAC1B,OAAO,IAAIE,UAAU,CAACF,OAAO,CAAC;EAChC;EACA,IAAI,QAAQ,IAAIA,OAAO,EAAE;IACvB,OAAOD,gBAAgB,CAACC,OAAO,CAACM,MAAM,CAAC;EACzC;EACA,OAAO,IAAIJ,UAAU,CAACF,OAAO,CAAC;AAChC;AAEA;;;;;AAKA,OAAM,SAAUO,UAAUA,CAACC,GAAe;EACxC,MAAMC,GAAG,GAAG,IAAIN,WAAW,CAACK,GAAG,CAACE,UAAU,CAAC;EAC3C,MAAMC,IAAI,GAAG,IAAIT,UAAU,CAACO,GAAG,CAAC;EAChCE,IAAI,CAACC,GAAG,CAACJ,GAAG,CAAC;EACb,OAAOC,GAAG;AACZ;AAEA;;;;;;AAMA,OAAM,SAAUI,WAAWA,CAACC,CAAa,EAAEC,CAAa;EACtD,IAAID,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,EAAE,OAAO,KAAK;EACvC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;IACjC,IAAIH,CAAC,CAACG,CAAC,CAAC,KAAKF,CAAC,CAACE,CAAC,CAAC,EAAE,OAAO,KAAK;EACjC;EACA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}