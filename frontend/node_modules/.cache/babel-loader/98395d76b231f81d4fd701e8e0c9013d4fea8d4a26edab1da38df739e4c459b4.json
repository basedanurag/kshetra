{"ast":null,"code":"import { bytesToHex } from '@noble/hashes/utils';\nexport var ErrorKindEnum;\n(function (ErrorKindEnum) {\n  ErrorKindEnum[\"Trust\"] = \"Trust\";\n  ErrorKindEnum[\"Protocol\"] = \"Protocol\";\n  ErrorKindEnum[\"Reject\"] = \"Reject\";\n  ErrorKindEnum[\"Transport\"] = \"Transport\";\n  ErrorKindEnum[\"External\"] = \"External\";\n  ErrorKindEnum[\"Limit\"] = \"Limit\";\n  ErrorKindEnum[\"Input\"] = \"Input\";\n  ErrorKindEnum[\"Unknown\"] = \"Unknown\";\n})(ErrorKindEnum || (ErrorKindEnum = {}));\nclass ErrorCode {\n  constructor(isCertified = false) {\n    this.isCertified = isCertified;\n  }\n  toString() {\n    let errorMessage = this.toErrorMessage();\n    if (this.requestContext) {\n      errorMessage += `\\nRequest context:\\n` + `  Request ID (hex): ${this.requestContext.requestId ? bytesToHex(this.requestContext.requestId) : 'undefined'}\\n` + `  Sender pubkey (hex): ${bytesToHex(this.requestContext.senderPubKey)}\\n` + `  Sender signature (hex): ${bytesToHex(this.requestContext.senderSignature)}\\n` + `  Ingress expiry: ${this.requestContext.ingressExpiry.toString()}`;\n    }\n    if (this.callContext) {\n      errorMessage += `\\nCall context:\\n` + `  Canister ID: ${this.callContext.canisterId.toText()}\\n` + `  Method name: ${this.callContext.methodName}\\n` + `  HTTP details: ${JSON.stringify(this.callContext.httpDetails, null, 2)}`;\n    }\n    return errorMessage;\n  }\n}\n/**\n * An error that happens in the Agent. This is the root of all errors and should be used\n * everywhere in the Agent code (this package).\n *\n * To know if the error is certified, use the `isCertified` getter.\n */\nexport class AgentError extends Error {\n  get code() {\n    return this.cause.code;\n  }\n  set code(code) {\n    this.cause.code = code;\n  }\n  get kind() {\n    return this.cause.kind;\n  }\n  set kind(kind) {\n    this.cause.kind = kind;\n  }\n  /**\n   * Reads the `isCertified` property of the underlying error code.\n   * @returns `true` if the error is certified, `false` otherwise.\n   */\n  get isCertified() {\n    return this.code.isCertified;\n  }\n  constructor(code, kind) {\n    super(code.toString());\n    this.name = 'AgentError';\n    this.cause = {\n      code,\n      kind\n    };\n    Object.setPrototypeOf(this, AgentError.prototype);\n  }\n  hasCode(code) {\n    return this.code instanceof code;\n  }\n  toString() {\n    return `${this.name} (${this.kind}): ${this.message}`;\n  }\n}\nclass ErrorKind extends AgentError {\n  static fromCode(code) {\n    return new this(code);\n  }\n}\nexport class TrustError extends ErrorKind {\n  constructor(code) {\n    super(code, ErrorKindEnum.Trust);\n    this.name = 'TrustError';\n    Object.setPrototypeOf(this, TrustError.prototype);\n  }\n}\nexport class ProtocolError extends ErrorKind {\n  constructor(code) {\n    super(code, ErrorKindEnum.Protocol);\n    this.name = 'ProtocolError';\n    Object.setPrototypeOf(this, ProtocolError.prototype);\n  }\n}\nexport class RejectError extends ErrorKind {\n  constructor(code) {\n    super(code, ErrorKindEnum.Reject);\n    this.name = 'RejectError';\n    Object.setPrototypeOf(this, RejectError.prototype);\n  }\n}\nexport class TransportError extends ErrorKind {\n  constructor(code) {\n    super(code, ErrorKindEnum.Transport);\n    this.name = 'TransportError';\n    Object.setPrototypeOf(this, TransportError.prototype);\n  }\n}\nexport class ExternalError extends ErrorKind {\n  constructor(code) {\n    super(code, ErrorKindEnum.External);\n    this.name = 'ExternalError';\n    Object.setPrototypeOf(this, ExternalError.prototype);\n  }\n}\nexport class LimitError extends ErrorKind {\n  constructor(code) {\n    super(code, ErrorKindEnum.Limit);\n    this.name = 'LimitError';\n    Object.setPrototypeOf(this, LimitError.prototype);\n  }\n}\nexport class InputError extends ErrorKind {\n  constructor(code) {\n    super(code, ErrorKindEnum.Input);\n    this.name = 'InputError';\n    Object.setPrototypeOf(this, InputError.prototype);\n  }\n}\nexport class UnknownError extends ErrorKind {\n  constructor(code) {\n    super(code, ErrorKindEnum.Unknown);\n    this.name = 'UnknownError';\n    Object.setPrototypeOf(this, UnknownError.prototype);\n  }\n}\nexport class CertificateVerificationErrorCode extends ErrorCode {\n  constructor(reason) {\n    super();\n    this.reason = reason;\n    this.name = 'CertificateVerificationErrorCode';\n    Object.setPrototypeOf(this, CertificateVerificationErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Certificate verification error: \"${this.reason}\"`;\n  }\n}\nexport class CertificateTimeErrorCode extends ErrorCode {\n  constructor(maxAgeInMinutes, certificateTime, currentTime, ageType) {\n    super();\n    this.maxAgeInMinutes = maxAgeInMinutes;\n    this.certificateTime = certificateTime;\n    this.currentTime = currentTime;\n    this.ageType = ageType;\n    this.name = 'CertificateTimeErrorCode';\n    Object.setPrototypeOf(this, CertificateTimeErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Certificate is signed more than ${this.maxAgeInMinutes} minutes in the ${this.ageType}. Certificate time: ${this.certificateTime.toISOString()} Current time: ${this.currentTime.toISOString()}`;\n  }\n}\nexport class CertificateHasTooManyDelegationsErrorCode extends ErrorCode {\n  constructor() {\n    super();\n    this.name = 'CertificateHasTooManyDelegationsErrorCode';\n    Object.setPrototypeOf(this, CertificateHasTooManyDelegationsErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return 'Certificate has too many delegations';\n  }\n}\nexport class CertificateNotAuthorizedErrorCode extends ErrorCode {\n  constructor(canisterId, subnetId) {\n    super();\n    this.canisterId = canisterId;\n    this.subnetId = subnetId;\n    this.name = 'CertificateNotAuthorizedErrorCode';\n    Object.setPrototypeOf(this, CertificateNotAuthorizedErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `The certificate contains a delegation that does not include the canister ${this.canisterId.toText()} in the canister_ranges field. Subnet ID: 0x${bytesToHex(this.subnetId)}`;\n  }\n}\nexport class LookupErrorCode extends ErrorCode {\n  constructor(message, lookupStatus) {\n    super();\n    this.message = message;\n    this.lookupStatus = lookupStatus;\n    this.name = 'LookupErrorCode';\n    Object.setPrototypeOf(this, LookupErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `${this.message}. Lookup status: ${this.lookupStatus}`;\n  }\n}\nexport class MalformedLookupFoundValueErrorCode extends ErrorCode {\n  constructor(message) {\n    super();\n    this.message = message;\n    this.name = 'MalformedLookupFoundValueErrorCode';\n    Object.setPrototypeOf(this, MalformedLookupFoundValueErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return this.message;\n  }\n}\nexport class MissingLookupValueErrorCode extends ErrorCode {\n  constructor(message) {\n    super();\n    this.message = message;\n    this.name = 'MissingLookupValueErrorCode';\n    Object.setPrototypeOf(this, MissingLookupValueErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return this.message;\n  }\n}\nexport class DerKeyLengthMismatchErrorCode extends ErrorCode {\n  constructor(expectedLength, actualLength) {\n    super();\n    this.expectedLength = expectedLength;\n    this.actualLength = actualLength;\n    this.name = 'DerKeyLengthMismatchErrorCode';\n    Object.setPrototypeOf(this, DerKeyLengthMismatchErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `BLS DER-encoded public key must be ${this.expectedLength} bytes long, but is ${this.actualLength} bytes long`;\n  }\n}\nexport class DerPrefixMismatchErrorCode extends ErrorCode {\n  constructor(expectedPrefix, actualPrefix) {\n    super();\n    this.expectedPrefix = expectedPrefix;\n    this.actualPrefix = actualPrefix;\n    this.name = 'DerPrefixMismatchErrorCode';\n    Object.setPrototypeOf(this, DerPrefixMismatchErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `BLS DER-encoded public key is invalid. Expected the following prefix: ${bytesToHex(this.expectedPrefix)}, but got ${bytesToHex(this.actualPrefix)}`;\n  }\n}\nexport class DerDecodeLengthMismatchErrorCode extends ErrorCode {\n  constructor(expectedLength, actualLength) {\n    super();\n    this.expectedLength = expectedLength;\n    this.actualLength = actualLength;\n    this.name = 'DerDecodeLengthMismatchErrorCode';\n    Object.setPrototypeOf(this, DerDecodeLengthMismatchErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `DER payload mismatch: Expected length ${this.expectedLength}, actual length: ${this.actualLength}`;\n  }\n}\nexport class DerDecodeErrorCode extends ErrorCode {\n  constructor(error) {\n    super();\n    this.error = error;\n    this.name = 'DerDecodeErrorCode';\n    Object.setPrototypeOf(this, DerDecodeErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Failed to decode DER: ${this.error}`;\n  }\n}\nexport class DerEncodeErrorCode extends ErrorCode {\n  constructor(error) {\n    super();\n    this.error = error;\n    this.name = 'DerEncodeErrorCode';\n    Object.setPrototypeOf(this, DerEncodeErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Failed to encode DER: ${this.error}`;\n  }\n}\nexport class CborDecodeErrorCode extends ErrorCode {\n  constructor(error, input) {\n    super();\n    this.error = error;\n    this.input = input;\n    this.name = 'CborDecodeErrorCode';\n    Object.setPrototypeOf(this, CborDecodeErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Failed to decode CBOR: ${this.error}, input: ${bytesToHex(this.input)}`;\n  }\n}\nexport class CborEncodeErrorCode extends ErrorCode {\n  constructor(error, value) {\n    super();\n    this.error = error;\n    this.value = value;\n    this.name = 'CborEncodeErrorCode';\n    Object.setPrototypeOf(this, CborEncodeErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Failed to encode CBOR: ${this.error}, input: ${this.value}`;\n  }\n}\nexport class HexDecodeErrorCode extends ErrorCode {\n  constructor(error) {\n    super();\n    this.error = error;\n    this.name = 'HexDecodeErrorCode';\n    Object.setPrototypeOf(this, HexDecodeErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Failed to decode hex: ${this.error}`;\n  }\n}\nexport class TimeoutWaitingForResponseErrorCode extends ErrorCode {\n  constructor(message, requestId, status) {\n    super();\n    this.message = message;\n    this.requestId = requestId;\n    this.status = status;\n    this.name = 'TimeoutWaitingForResponseErrorCode';\n    Object.setPrototypeOf(this, TimeoutWaitingForResponseErrorCode.prototype);\n  }\n  toErrorMessage() {\n    let errorMessage = `${this.message}\\n`;\n    if (this.requestId) {\n      errorMessage += `  Request ID: ${bytesToHex(this.requestId)}\\n`;\n    }\n    if (this.status) {\n      errorMessage += `  Request status: ${this.status}\\n`;\n    }\n    return errorMessage;\n  }\n}\nexport class CertificateOutdatedErrorCode extends ErrorCode {\n  constructor(maxIngressExpiryInMinutes, requestId, retryTimes) {\n    super();\n    this.maxIngressExpiryInMinutes = maxIngressExpiryInMinutes;\n    this.requestId = requestId;\n    this.retryTimes = retryTimes;\n    this.name = 'CertificateOutdatedErrorCode';\n    Object.setPrototypeOf(this, CertificateOutdatedErrorCode.prototype);\n  }\n  toErrorMessage() {\n    let errorMessage = `Certificate is stale (over ${this.maxIngressExpiryInMinutes} minutes). Is the computer's clock synchronized?\\n  Request ID: ${bytesToHex(this.requestId)}\\n`;\n    if (this.retryTimes !== undefined) {\n      errorMessage += `  Retried ${this.retryTimes} times.`;\n    }\n    return errorMessage;\n  }\n}\nexport class CertifiedRejectErrorCode extends ErrorCode {\n  constructor(requestId, rejectCode, rejectMessage, rejectErrorCode) {\n    super(true);\n    this.requestId = requestId;\n    this.rejectCode = rejectCode;\n    this.rejectMessage = rejectMessage;\n    this.rejectErrorCode = rejectErrorCode;\n    this.name = 'CertifiedRejectErrorCode';\n    Object.setPrototypeOf(this, CertifiedRejectErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `The replica returned a rejection error:\\n` + `  Request ID: ${bytesToHex(this.requestId)}\\n` + `  Reject code: ${this.rejectCode}\\n` + `  Reject text: ${this.rejectMessage}\\n` + `  Error code: ${this.rejectErrorCode}\\n`;\n  }\n}\nexport class UncertifiedRejectErrorCode extends ErrorCode {\n  constructor(requestId, rejectCode, rejectMessage, rejectErrorCode, signatures) {\n    super();\n    this.requestId = requestId;\n    this.rejectCode = rejectCode;\n    this.rejectMessage = rejectMessage;\n    this.rejectErrorCode = rejectErrorCode;\n    this.signatures = signatures;\n    this.name = 'UncertifiedRejectErrorCode';\n    Object.setPrototypeOf(this, UncertifiedRejectErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `The replica returned a rejection error:\\n` + `  Request ID: ${bytesToHex(this.requestId)}\\n` + `  Reject code: ${this.rejectCode}\\n` + `  Reject text: ${this.rejectMessage}\\n` + `  Error code: ${this.rejectErrorCode}\\n`;\n  }\n}\nexport class RequestStatusDoneNoReplyErrorCode extends ErrorCode {\n  constructor(requestId) {\n    super();\n    this.requestId = requestId;\n    this.name = 'RequestStatusDoneNoReplyErrorCode';\n    Object.setPrototypeOf(this, RequestStatusDoneNoReplyErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Call was marked as done but we never saw the reply:\\n` + `  Request ID: ${bytesToHex(this.requestId)}\\n`;\n  }\n}\nexport class MissingRootKeyErrorCode extends ErrorCode {\n  constructor(shouldFetchRootKey) {\n    super();\n    this.shouldFetchRootKey = shouldFetchRootKey;\n    this.name = 'MissingRootKeyErrorCode';\n    Object.setPrototypeOf(this, MissingRootKeyErrorCode.prototype);\n  }\n  toErrorMessage() {\n    if (this.shouldFetchRootKey === undefined) {\n      return 'Agent is missing root key';\n    }\n    return `Agent is missing root key and the shouldFetchRootKey value is set to ${this.shouldFetchRootKey}. The root key should only be unknown if you are in local development. Otherwise you should avoid fetching and use the default IC Root Key or the known root key of your environment.`;\n  }\n}\nexport class HashValueErrorCode extends ErrorCode {\n  constructor(value) {\n    super();\n    this.value = value;\n    this.name = 'HashValueErrorCode';\n    Object.setPrototypeOf(this, HashValueErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Attempt to hash a value of unsupported type: ${this.value}`;\n  }\n}\nexport class HttpDefaultFetchErrorCode extends ErrorCode {\n  constructor(error) {\n    super();\n    this.error = error;\n    this.name = 'HttpDefaultFetchErrorCode';\n    Object.setPrototypeOf(this, HttpDefaultFetchErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return this.error;\n  }\n}\nexport class IdentityInvalidErrorCode extends ErrorCode {\n  constructor() {\n    super();\n    this.name = 'IdentityInvalidErrorCode';\n    Object.setPrototypeOf(this, IdentityInvalidErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return \"This identity has expired due this application's security policy. Please refresh your authentication.\";\n  }\n}\nexport class IngressExpiryInvalidErrorCode extends ErrorCode {\n  constructor(message, providedIngressExpiryInMinutes) {\n    super();\n    this.message = message;\n    this.providedIngressExpiryInMinutes = providedIngressExpiryInMinutes;\n    this.name = 'IngressExpiryInvalidErrorCode';\n    Object.setPrototypeOf(this, IngressExpiryInvalidErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `${this.message}. Provided ingress expiry time is ${this.providedIngressExpiryInMinutes} minutes.`;\n  }\n}\nexport class CreateHttpAgentErrorCode extends ErrorCode {\n  constructor() {\n    super();\n    this.name = 'CreateHttpAgentErrorCode';\n    Object.setPrototypeOf(this, CreateHttpAgentErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return 'Failed to create agent from provided agent';\n  }\n}\nexport class MalformedSignatureErrorCode extends ErrorCode {\n  constructor(error) {\n    super();\n    this.error = error;\n    this.name = 'MalformedSignatureErrorCode';\n    Object.setPrototypeOf(this, MalformedSignatureErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Query response contained a malformed signature: ${this.error}`;\n  }\n}\nexport class MissingSignatureErrorCode extends ErrorCode {\n  constructor() {\n    super();\n    this.name = 'MissingSignatureErrorCode';\n    Object.setPrototypeOf(this, MissingSignatureErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return 'Query response did not contain any node signatures';\n  }\n}\nexport class MalformedPublicKeyErrorCode extends ErrorCode {\n  constructor() {\n    super();\n    this.name = 'MalformedPublicKeyErrorCode';\n    Object.setPrototypeOf(this, MalformedPublicKeyErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return 'Read state response contained a malformed public key';\n  }\n}\nexport class QuerySignatureVerificationFailedErrorCode extends ErrorCode {\n  constructor(nodeId) {\n    super();\n    this.nodeId = nodeId;\n    this.name = 'QuerySignatureVerificationFailedErrorCode';\n    Object.setPrototypeOf(this, QuerySignatureVerificationFailedErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Query signature verification failed. Node ID: ${this.nodeId}`;\n  }\n}\nexport class UnexpectedErrorCode extends ErrorCode {\n  constructor(error) {\n    super();\n    this.error = error;\n    this.name = 'UnexpectedErrorCode';\n    Object.setPrototypeOf(this, UnexpectedErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Unexpected error: ${this.error}`;\n  }\n}\nexport class HashTreeDecodeErrorCode extends ErrorCode {\n  constructor(error) {\n    super();\n    this.error = error;\n    this.name = 'HashTreeDecodeErrorCode';\n    Object.setPrototypeOf(this, HashTreeDecodeErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Failed to decode certificate: ${this.error}`;\n  }\n}\nexport class HttpErrorCode extends ErrorCode {\n  constructor(status, statusText, headers, bodyText) {\n    super();\n    this.status = status;\n    this.statusText = statusText;\n    this.headers = headers;\n    this.bodyText = bodyText;\n    this.name = 'HttpErrorCode';\n    Object.setPrototypeOf(this, HttpErrorCode.prototype);\n  }\n  toErrorMessage() {\n    let errorMessage = 'HTTP request failed:\\n' + `  Status: ${this.status} (${this.statusText})\\n` + `  Headers: ${JSON.stringify(this.headers)}\\n`;\n    if (this.bodyText) {\n      errorMessage += `  Body: ${this.bodyText}\\n`;\n    }\n    return errorMessage;\n  }\n}\nexport class HttpV3ApiNotSupportedErrorCode extends ErrorCode {\n  constructor() {\n    super();\n    this.name = 'HttpV3ApiNotSupportedErrorCode';\n    Object.setPrototypeOf(this, HttpV3ApiNotSupportedErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return 'HTTP request failed: v3 API is not supported';\n  }\n}\nexport class HttpFetchErrorCode extends ErrorCode {\n  constructor(error) {\n    super();\n    this.error = error;\n    this.name = 'HttpFetchErrorCode';\n    Object.setPrototypeOf(this, HttpFetchErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Failed to fetch HTTP request: ${this.error}`;\n  }\n}\nexport class MissingCanisterIdErrorCode extends ErrorCode {\n  constructor(receivedCanisterId) {\n    super();\n    this.receivedCanisterId = receivedCanisterId;\n    this.name = 'MissingCanisterIdErrorCode';\n    Object.setPrototypeOf(this, MissingCanisterIdErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Canister ID is required, but received ${typeof this.receivedCanisterId} instead. If you are using automatically generated declarations, this may be because your application is not setting the canister ID in process.env correctly.`;\n  }\n}\nexport class InvalidReadStateRequestErrorCode extends ErrorCode {\n  constructor(request) {\n    super();\n    this.request = request;\n    this.name = 'InvalidReadStateRequestErrorCode';\n    Object.setPrototypeOf(this, InvalidReadStateRequestErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Invalid read state request: ${this.request}`;\n  }\n}\nexport class ExpiryJsonDeserializeErrorCode extends ErrorCode {\n  constructor(error) {\n    super();\n    this.error = error;\n    this.name = 'ExpiryJsonDeserializeErrorCode';\n    Object.setPrototypeOf(this, ExpiryJsonDeserializeErrorCode.prototype);\n  }\n  toErrorMessage() {\n    return `Failed to deserialize expiry: ${this.error}`;\n  }\n}\n/**\n * Special error used to indicate that a code path is unreachable.\n *\n * For internal use only.\n */\nexport const UNREACHABLE_ERROR = new Error('unreachable');","map":{"version":3,"names":["bytesToHex","ErrorKindEnum","ErrorCode","constructor","isCertified","toString","errorMessage","toErrorMessage","requestContext","requestId","senderPubKey","senderSignature","ingressExpiry","callContext","canisterId","toText","methodName","JSON","stringify","httpDetails","AgentError","Error","code","cause","kind","name","Object","setPrototypeOf","prototype","hasCode","message","ErrorKind","fromCode","TrustError","Trust","ProtocolError","Protocol","RejectError","Reject","TransportError","Transport","ExternalError","External","LimitError","Limit","InputError","Input","UnknownError","Unknown","CertificateVerificationErrorCode","reason","CertificateTimeErrorCode","maxAgeInMinutes","certificateTime","currentTime","ageType","toISOString","CertificateHasTooManyDelegationsErrorCode","CertificateNotAuthorizedErrorCode","subnetId","LookupErrorCode","lookupStatus","MalformedLookupFoundValueErrorCode","MissingLookupValueErrorCode","DerKeyLengthMismatchErrorCode","expectedLength","actualLength","DerPrefixMismatchErrorCode","expectedPrefix","actualPrefix","DerDecodeLengthMismatchErrorCode","DerDecodeErrorCode","error","DerEncodeErrorCode","CborDecodeErrorCode","input","CborEncodeErrorCode","value","HexDecodeErrorCode","TimeoutWaitingForResponseErrorCode","status","CertificateOutdatedErrorCode","maxIngressExpiryInMinutes","retryTimes","undefined","CertifiedRejectErrorCode","rejectCode","rejectMessage","rejectErrorCode","UncertifiedRejectErrorCode","signatures","RequestStatusDoneNoReplyErrorCode","MissingRootKeyErrorCode","shouldFetchRootKey","HashValueErrorCode","HttpDefaultFetchErrorCode","IdentityInvalidErrorCode","IngressExpiryInvalidErrorCode","providedIngressExpiryInMinutes","CreateHttpAgentErrorCode","MalformedSignatureErrorCode","MissingSignatureErrorCode","MalformedPublicKeyErrorCode","QuerySignatureVerificationFailedErrorCode","nodeId","UnexpectedErrorCode","HashTreeDecodeErrorCode","HttpErrorCode","statusText","headers","bodyText","HttpV3ApiNotSupportedErrorCode","HttpFetchErrorCode","MissingCanisterIdErrorCode","receivedCanisterId","InvalidReadStateRequestErrorCode","request","ExpiryJsonDeserializeErrorCode","UNREACHABLE_ERROR"],"sources":["D:\\Kshetra\\frontend\\node_modules\\@dfinity\\agent\\src\\errors.ts"],"sourcesContent":["import { Principal } from '@dfinity/principal';\nimport { type HttpDetailsResponse, type NodeSignature, type ReplicaRejectCode } from './agent/api.ts';\nimport { type RequestId } from './request_id.ts';\nimport { type Expiry, type RequestStatusResponseStatus } from './agent/http/index.ts';\nimport { type HttpHeaderField } from './agent/http/types.ts';\nimport { LookupPathStatus, LookupSubtreeStatus } from './certificate.ts';\nimport { bytesToHex } from '@noble/hashes/utils';\n\nexport enum ErrorKindEnum {\n  Trust = 'Trust',\n  Protocol = 'Protocol',\n  Reject = 'Reject',\n  Transport = 'Transport',\n  External = 'External',\n  Limit = 'Limit',\n  Input = 'Input',\n  Unknown = 'Unknown',\n}\n\nexport type RequestContext = {\n  requestId?: RequestId;\n  senderPubKey: Uint8Array;\n  senderSignature: Uint8Array;\n  ingressExpiry: Expiry;\n};\n\nexport type CallContext = {\n  canisterId: Principal;\n  methodName: string;\n  httpDetails: HttpDetailsResponse;\n};\n\nabstract class ErrorCode {\n  public requestContext?: RequestContext;\n  public callContext?: CallContext;\n\n  constructor(public readonly isCertified: boolean = false) {}\n\n  public abstract toErrorMessage(): string;\n\n  public toString(): string {\n    let errorMessage = this.toErrorMessage();\n    if (this.requestContext) {\n      errorMessage +=\n        `\\nRequest context:\\n` +\n        `  Request ID (hex): ${this.requestContext.requestId ? bytesToHex(this.requestContext.requestId) : 'undefined'}\\n` +\n        `  Sender pubkey (hex): ${bytesToHex(this.requestContext.senderPubKey)}\\n` +\n        `  Sender signature (hex): ${bytesToHex(this.requestContext.senderSignature)}\\n` +\n        `  Ingress expiry: ${this.requestContext.ingressExpiry.toString()}`;\n    }\n    if (this.callContext) {\n      errorMessage +=\n        `\\nCall context:\\n` +\n        `  Canister ID: ${this.callContext.canisterId.toText()}\\n` +\n        `  Method name: ${this.callContext.methodName}\\n` +\n        `  HTTP details: ${JSON.stringify(this.callContext.httpDetails, null, 2)}`;\n    }\n    return errorMessage;\n  }\n}\n\n/**\n * An error that happens in the Agent. This is the root of all errors and should be used\n * everywhere in the Agent code (this package).\n *\n * To know if the error is certified, use the `isCertified` getter.\n */\nexport class AgentError extends Error {\n  public name = 'AgentError';\n  // override the Error.cause property\n  public readonly cause: { code: ErrorCode; kind: ErrorKindEnum };\n\n  get code(): ErrorCode {\n    return this.cause.code;\n  }\n  set code(code: ErrorCode) {\n    this.cause.code = code;\n  }\n\n  get kind(): ErrorKindEnum {\n    return this.cause.kind;\n  }\n  set kind(kind: ErrorKindEnum) {\n    this.cause.kind = kind;\n  }\n\n  /**\n   * Reads the `isCertified` property of the underlying error code.\n   * @returns `true` if the error is certified, `false` otherwise.\n   */\n  get isCertified(): boolean {\n    return this.code.isCertified;\n  }\n\n  constructor(code: ErrorCode, kind: ErrorKindEnum) {\n    super(code.toString());\n    this.cause = { code, kind };\n    Object.setPrototypeOf(this, AgentError.prototype);\n  }\n\n  public hasCode<C extends ErrorCode>(code: new (...args: never[]) => C): boolean {\n    return this.code instanceof code;\n  }\n\n  public toString(): string {\n    return `${this.name} (${this.kind}): ${this.message}`;\n  }\n}\n\nclass ErrorKind extends AgentError {\n  public static fromCode<C extends ErrorCode, E extends ErrorKind>(\n    this: new (code: C) => E,\n    code: C,\n  ): E {\n    return new this(code);\n  }\n}\n\nexport class TrustError extends ErrorKind {\n  public name = 'TrustError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.Trust);\n    Object.setPrototypeOf(this, TrustError.prototype);\n  }\n}\n\nexport class ProtocolError extends ErrorKind {\n  public name = 'ProtocolError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.Protocol);\n    Object.setPrototypeOf(this, ProtocolError.prototype);\n  }\n}\n\nexport class RejectError extends ErrorKind {\n  public name = 'RejectError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.Reject);\n    Object.setPrototypeOf(this, RejectError.prototype);\n  }\n}\n\nexport class TransportError extends ErrorKind {\n  public name = 'TransportError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.Transport);\n    Object.setPrototypeOf(this, TransportError.prototype);\n  }\n}\n\nexport class ExternalError extends ErrorKind {\n  public name = 'ExternalError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.External);\n    Object.setPrototypeOf(this, ExternalError.prototype);\n  }\n}\n\nexport class LimitError extends ErrorKind {\n  public name = 'LimitError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.Limit);\n    Object.setPrototypeOf(this, LimitError.prototype);\n  }\n}\n\nexport class InputError extends ErrorKind {\n  public name = 'InputError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.Input);\n    Object.setPrototypeOf(this, InputError.prototype);\n  }\n}\n\nexport class UnknownError extends ErrorKind {\n  public name = 'UnknownError';\n\n  constructor(code: ErrorCode) {\n    super(code, ErrorKindEnum.Unknown);\n    Object.setPrototypeOf(this, UnknownError.prototype);\n  }\n}\n\nexport class CertificateVerificationErrorCode extends ErrorCode {\n  public name = 'CertificateVerificationErrorCode';\n\n  constructor(public readonly reason: string) {\n    super();\n    Object.setPrototypeOf(this, CertificateVerificationErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Certificate verification error: \"${this.reason}\"`;\n  }\n}\n\nexport class CertificateTimeErrorCode extends ErrorCode {\n  public name = 'CertificateTimeErrorCode';\n\n  constructor(\n    public readonly maxAgeInMinutes: number,\n    public readonly certificateTime: Date,\n    public readonly currentTime: Date,\n    public readonly ageType: 'past' | 'future',\n  ) {\n    super();\n    Object.setPrototypeOf(this, CertificateTimeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Certificate is signed more than ${this.maxAgeInMinutes} minutes in the ${this.ageType}. Certificate time: ${this.certificateTime.toISOString()} Current time: ${this.currentTime.toISOString()}`;\n  }\n}\n\nexport class CertificateHasTooManyDelegationsErrorCode extends ErrorCode {\n  public name = 'CertificateHasTooManyDelegationsErrorCode';\n\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, CertificateHasTooManyDelegationsErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return 'Certificate has too many delegations';\n  }\n}\n\nexport class CertificateNotAuthorizedErrorCode extends ErrorCode {\n  public name = 'CertificateNotAuthorizedErrorCode';\n\n  constructor(\n    public readonly canisterId: Principal,\n    public readonly subnetId: Uint8Array,\n  ) {\n    super();\n    Object.setPrototypeOf(this, CertificateNotAuthorizedErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `The certificate contains a delegation that does not include the canister ${this.canisterId.toText()} in the canister_ranges field. Subnet ID: 0x${bytesToHex(this.subnetId)}`;\n  }\n}\n\nexport class LookupErrorCode extends ErrorCode {\n  public name = 'LookupErrorCode';\n\n  constructor(\n    public readonly message: string,\n    public readonly lookupStatus: LookupPathStatus | LookupSubtreeStatus,\n  ) {\n    super();\n    Object.setPrototypeOf(this, LookupErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `${this.message}. Lookup status: ${this.lookupStatus}`;\n  }\n}\n\nexport class MalformedLookupFoundValueErrorCode extends ErrorCode {\n  public name = 'MalformedLookupFoundValueErrorCode';\n\n  constructor(public readonly message: string) {\n    super();\n    Object.setPrototypeOf(this, MalformedLookupFoundValueErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return this.message;\n  }\n}\n\nexport class MissingLookupValueErrorCode extends ErrorCode {\n  public name = 'MissingLookupValueErrorCode';\n\n  constructor(public readonly message: string) {\n    super();\n    Object.setPrototypeOf(this, MissingLookupValueErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return this.message;\n  }\n}\n\nexport class DerKeyLengthMismatchErrorCode extends ErrorCode {\n  public name = 'DerKeyLengthMismatchErrorCode';\n\n  constructor(\n    public readonly expectedLength: number,\n    public readonly actualLength: number,\n  ) {\n    super();\n    Object.setPrototypeOf(this, DerKeyLengthMismatchErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `BLS DER-encoded public key must be ${this.expectedLength} bytes long, but is ${this.actualLength} bytes long`;\n  }\n}\n\nexport class DerPrefixMismatchErrorCode extends ErrorCode {\n  public name = 'DerPrefixMismatchErrorCode';\n\n  constructor(\n    public readonly expectedPrefix: Uint8Array,\n    public readonly actualPrefix: Uint8Array,\n  ) {\n    super();\n    Object.setPrototypeOf(this, DerPrefixMismatchErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `BLS DER-encoded public key is invalid. Expected the following prefix: ${bytesToHex(this.expectedPrefix)}, but got ${bytesToHex(this.actualPrefix)}`;\n  }\n}\n\nexport class DerDecodeLengthMismatchErrorCode extends ErrorCode {\n  public name = 'DerDecodeLengthMismatchErrorCode';\n\n  constructor(\n    public readonly expectedLength: number,\n    public readonly actualLength: number,\n  ) {\n    super();\n    Object.setPrototypeOf(this, DerDecodeLengthMismatchErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `DER payload mismatch: Expected length ${this.expectedLength}, actual length: ${this.actualLength}`;\n  }\n}\n\nexport class DerDecodeErrorCode extends ErrorCode {\n  public name = 'DerDecodeErrorCode';\n\n  constructor(public readonly error: string) {\n    super();\n    Object.setPrototypeOf(this, DerDecodeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to decode DER: ${this.error}`;\n  }\n}\n\nexport class DerEncodeErrorCode extends ErrorCode {\n  public name = 'DerEncodeErrorCode';\n\n  constructor(public readonly error: string) {\n    super();\n    Object.setPrototypeOf(this, DerEncodeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to encode DER: ${this.error}`;\n  }\n}\n\nexport class CborDecodeErrorCode extends ErrorCode {\n  public name = 'CborDecodeErrorCode';\n\n  constructor(\n    public readonly error: unknown,\n    public readonly input: Uint8Array,\n  ) {\n    super();\n    Object.setPrototypeOf(this, CborDecodeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to decode CBOR: ${this.error}, input: ${bytesToHex(this.input)}`;\n  }\n}\n\nexport class CborEncodeErrorCode extends ErrorCode {\n  public name = 'CborEncodeErrorCode';\n\n  constructor(\n    public readonly error: unknown,\n    public readonly value: unknown,\n  ) {\n    super();\n    Object.setPrototypeOf(this, CborEncodeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to encode CBOR: ${this.error}, input: ${this.value}`;\n  }\n}\n\nexport class HexDecodeErrorCode extends ErrorCode {\n  public name = 'HexDecodeErrorCode';\n\n  constructor(public readonly error: string) {\n    super();\n    Object.setPrototypeOf(this, HexDecodeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to decode hex: ${this.error}`;\n  }\n}\n\nexport class TimeoutWaitingForResponseErrorCode extends ErrorCode {\n  public name = 'TimeoutWaitingForResponseErrorCode';\n\n  constructor(\n    public readonly message: string,\n    public readonly requestId?: RequestId,\n    public readonly status?: RequestStatusResponseStatus,\n  ) {\n    super();\n    Object.setPrototypeOf(this, TimeoutWaitingForResponseErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    let errorMessage = `${this.message}\\n`;\n    if (this.requestId) {\n      errorMessage += `  Request ID: ${bytesToHex(this.requestId)}\\n`;\n    }\n    if (this.status) {\n      errorMessage += `  Request status: ${this.status}\\n`;\n    }\n    return errorMessage;\n  }\n}\n\nexport class CertificateOutdatedErrorCode extends ErrorCode {\n  public name = 'CertificateOutdatedErrorCode';\n\n  constructor(\n    public readonly maxIngressExpiryInMinutes: number,\n    public readonly requestId: RequestId,\n    public readonly retryTimes?: number,\n  ) {\n    super();\n    Object.setPrototypeOf(this, CertificateOutdatedErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    let errorMessage = `Certificate is stale (over ${this.maxIngressExpiryInMinutes} minutes). Is the computer's clock synchronized?\\n  Request ID: ${bytesToHex(this.requestId)}\\n`;\n    if (this.retryTimes !== undefined) {\n      errorMessage += `  Retried ${this.retryTimes} times.`;\n    }\n    return errorMessage;\n  }\n}\n\nexport class CertifiedRejectErrorCode extends ErrorCode {\n  public name = 'CertifiedRejectErrorCode';\n\n  constructor(\n    public readonly requestId: RequestId,\n    public readonly rejectCode: ReplicaRejectCode,\n    public readonly rejectMessage: string,\n    public readonly rejectErrorCode: string | undefined,\n  ) {\n    super(true);\n    Object.setPrototypeOf(this, CertifiedRejectErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return (\n      `The replica returned a rejection error:\\n` +\n      `  Request ID: ${bytesToHex(this.requestId)}\\n` +\n      `  Reject code: ${this.rejectCode}\\n` +\n      `  Reject text: ${this.rejectMessage}\\n` +\n      `  Error code: ${this.rejectErrorCode}\\n`\n    );\n  }\n}\n\nexport class UncertifiedRejectErrorCode extends ErrorCode {\n  public name = 'UncertifiedRejectErrorCode';\n\n  constructor(\n    public readonly requestId: RequestId,\n    public readonly rejectCode: ReplicaRejectCode,\n    public readonly rejectMessage: string,\n    public readonly rejectErrorCode: string | undefined,\n    public readonly signatures: NodeSignature[] | undefined,\n  ) {\n    super();\n    Object.setPrototypeOf(this, UncertifiedRejectErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return (\n      `The replica returned a rejection error:\\n` +\n      `  Request ID: ${bytesToHex(this.requestId)}\\n` +\n      `  Reject code: ${this.rejectCode}\\n` +\n      `  Reject text: ${this.rejectMessage}\\n` +\n      `  Error code: ${this.rejectErrorCode}\\n`\n    );\n  }\n}\n\nexport class RequestStatusDoneNoReplyErrorCode extends ErrorCode {\n  public name = 'RequestStatusDoneNoReplyErrorCode';\n\n  constructor(public readonly requestId: RequestId) {\n    super();\n    Object.setPrototypeOf(this, RequestStatusDoneNoReplyErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return (\n      `Call was marked as done but we never saw the reply:\\n` +\n      `  Request ID: ${bytesToHex(this.requestId)}\\n`\n    );\n  }\n}\n\nexport class MissingRootKeyErrorCode extends ErrorCode {\n  public name = 'MissingRootKeyErrorCode';\n\n  constructor(public readonly shouldFetchRootKey?: boolean) {\n    super();\n    Object.setPrototypeOf(this, MissingRootKeyErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    if (this.shouldFetchRootKey === undefined) {\n      return 'Agent is missing root key';\n    }\n    return `Agent is missing root key and the shouldFetchRootKey value is set to ${this.shouldFetchRootKey}. The root key should only be unknown if you are in local development. Otherwise you should avoid fetching and use the default IC Root Key or the known root key of your environment.`;\n  }\n}\n\nexport class HashValueErrorCode extends ErrorCode {\n  public name = 'HashValueErrorCode';\n\n  constructor(public readonly value: unknown) {\n    super();\n    Object.setPrototypeOf(this, HashValueErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Attempt to hash a value of unsupported type: ${this.value}`;\n  }\n}\n\nexport class HttpDefaultFetchErrorCode extends ErrorCode {\n  public name = 'HttpDefaultFetchErrorCode';\n\n  constructor(public readonly error: string) {\n    super();\n    Object.setPrototypeOf(this, HttpDefaultFetchErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return this.error;\n  }\n}\n\nexport class IdentityInvalidErrorCode extends ErrorCode {\n  public name = 'IdentityInvalidErrorCode';\n\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, IdentityInvalidErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return \"This identity has expired due this application's security policy. Please refresh your authentication.\";\n  }\n}\n\nexport class IngressExpiryInvalidErrorCode extends ErrorCode {\n  public name = 'IngressExpiryInvalidErrorCode';\n\n  constructor(\n    public readonly message: string,\n    public readonly providedIngressExpiryInMinutes: number,\n  ) {\n    super();\n    Object.setPrototypeOf(this, IngressExpiryInvalidErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `${this.message}. Provided ingress expiry time is ${this.providedIngressExpiryInMinutes} minutes.`;\n  }\n}\n\nexport class CreateHttpAgentErrorCode extends ErrorCode {\n  public name = 'CreateHttpAgentErrorCode';\n\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, CreateHttpAgentErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return 'Failed to create agent from provided agent';\n  }\n}\n\nexport class MalformedSignatureErrorCode extends ErrorCode {\n  public name = 'MalformedSignatureErrorCode';\n\n  constructor(public readonly error: string) {\n    super();\n    Object.setPrototypeOf(this, MalformedSignatureErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Query response contained a malformed signature: ${this.error}`;\n  }\n}\n\nexport class MissingSignatureErrorCode extends ErrorCode {\n  public name = 'MissingSignatureErrorCode';\n\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, MissingSignatureErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return 'Query response did not contain any node signatures';\n  }\n}\n\nexport class MalformedPublicKeyErrorCode extends ErrorCode {\n  public name = 'MalformedPublicKeyErrorCode';\n\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, MalformedPublicKeyErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return 'Read state response contained a malformed public key';\n  }\n}\n\nexport class QuerySignatureVerificationFailedErrorCode extends ErrorCode {\n  public name = 'QuerySignatureVerificationFailedErrorCode';\n\n  constructor(public readonly nodeId: string) {\n    super();\n    Object.setPrototypeOf(this, QuerySignatureVerificationFailedErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Query signature verification failed. Node ID: ${this.nodeId}`;\n  }\n}\n\nexport class UnexpectedErrorCode extends ErrorCode {\n  public name = 'UnexpectedErrorCode';\n\n  constructor(public readonly error: unknown) {\n    super();\n    Object.setPrototypeOf(this, UnexpectedErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Unexpected error: ${this.error}`;\n  }\n}\n\nexport class HashTreeDecodeErrorCode extends ErrorCode {\n  public name = 'HashTreeDecodeErrorCode';\n\n  constructor(public readonly error: string) {\n    super();\n    Object.setPrototypeOf(this, HashTreeDecodeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to decode certificate: ${this.error}`;\n  }\n}\n\nexport class HttpErrorCode extends ErrorCode {\n  public name = 'HttpErrorCode';\n\n  constructor(\n    public readonly status: number,\n    public readonly statusText: string,\n    public readonly headers: HttpHeaderField[],\n    public readonly bodyText?: string,\n  ) {\n    super();\n    Object.setPrototypeOf(this, HttpErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    let errorMessage =\n      'HTTP request failed:\\n' +\n      `  Status: ${this.status} (${this.statusText})\\n` +\n      `  Headers: ${JSON.stringify(this.headers)}\\n`;\n    if (this.bodyText) {\n      errorMessage += `  Body: ${this.bodyText}\\n`;\n    }\n    return errorMessage;\n  }\n}\n\nexport class HttpV3ApiNotSupportedErrorCode extends ErrorCode {\n  public name = 'HttpV3ApiNotSupportedErrorCode';\n\n  constructor() {\n    super();\n    Object.setPrototypeOf(this, HttpV3ApiNotSupportedErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return 'HTTP request failed: v3 API is not supported';\n  }\n}\n\nexport class HttpFetchErrorCode extends ErrorCode {\n  public name = 'HttpFetchErrorCode';\n\n  constructor(public readonly error: unknown) {\n    super();\n    Object.setPrototypeOf(this, HttpFetchErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to fetch HTTP request: ${this.error}`;\n  }\n}\n\nexport class MissingCanisterIdErrorCode extends ErrorCode {\n  public name = 'MissingCanisterIdErrorCode';\n\n  constructor(public readonly receivedCanisterId: unknown) {\n    super();\n    Object.setPrototypeOf(this, MissingCanisterIdErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Canister ID is required, but received ${typeof this.receivedCanisterId} instead. If you are using automatically generated declarations, this may be because your application is not setting the canister ID in process.env correctly.`;\n  }\n}\n\nexport class InvalidReadStateRequestErrorCode extends ErrorCode {\n  public name = 'InvalidReadStateRequestErrorCode';\n\n  constructor(public readonly request: unknown) {\n    super();\n    Object.setPrototypeOf(this, InvalidReadStateRequestErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Invalid read state request: ${this.request}`;\n  }\n}\n\nexport class ExpiryJsonDeserializeErrorCode extends ErrorCode {\n  public name = 'ExpiryJsonDeserializeErrorCode';\n\n  constructor(public readonly error: string) {\n    super();\n    Object.setPrototypeOf(this, ExpiryJsonDeserializeErrorCode.prototype);\n  }\n\n  public toErrorMessage(): string {\n    return `Failed to deserialize expiry: ${this.error}`;\n  }\n}\n\n/**\n * Special error used to indicate that a code path is unreachable.\n *\n * For internal use only.\n */\nexport const UNREACHABLE_ERROR = new Error('unreachable');\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}